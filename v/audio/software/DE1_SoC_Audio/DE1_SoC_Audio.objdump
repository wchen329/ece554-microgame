
DE1_SoC_Audio.elf:     file format elf32-littlenios2
DE1_SoC_Audio.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x050801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x05080000 paddr 0x05080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x05080020 paddr 0x05080020 align 2**12
         filesz 0x0000f3e0 memsz 0x0000f3e0 flags r-x
    LOAD off    0x00010400 vaddr 0x0508f400 paddr 0x05090e68 align 2**12
         filesz 0x00001a68 memsz 0x00001a68 flags rw-
    LOAD off    0x000128d0 vaddr 0x050928d0 paddr 0x050928d0 align 2**12
         filesz 0x00000000 memsz 0x00000320 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05080000  05080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  05080020  05080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e490  050801b8  050801b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000db8  0508e648  0508e648  0000f648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a68  0508f400  05090e68  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000320  050928d0  050928d0  000128d0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00011e68  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e80  00000000  00000000  00011e90  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00025952  00000000  00000000  00012d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009b5a  00000000  00000000  00038662  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000b0f2  00000000  00000000  000421bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001ea8  00000000  00000000  0004d2b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000034b1  00000000  00000000  0004f158  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000111df  00000000  00000000  00052609  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  000637e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a88  00000000  00000000  00063848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00067ae2  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00067ae5  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00067ae8  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00067ae9  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00067aea  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00067aee  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00067af2  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00067af6  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00067aff  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00067b08  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000a  00000000  00000000  00067b11  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000003e  00000000  00000000  00067b1b  2**0
                  CONTENTS, READONLY
 28 .jdi          00004813  00000000  00000000  00067b59  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0009a81f  00000000  00000000  0006c36c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05080000 l    d  .entry	00000000 .entry
05080020 l    d  .exceptions	00000000 .exceptions
050801b8 l    d  .text	00000000 .text
0508e648 l    d  .rodata	00000000 .rodata
0508f400 l    d  .rwdata	00000000 .rwdata
050928d0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE1_SoC_Audio_bsp//obj/HAL/src/crt0.o
05080200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
05080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 AUDIO.c
05092910 l     O .bss	00000028 reg_file
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 LED.c
00000000 l    df *ABS*	00000000 SEG7.c
0508f400 l     O .rwdata	00000010 szMap
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 main.c
050928d0 l     O .bss	00000004 sum.3876
050928d4 l     O .bss	00000002 cnt.3877
00000000 l    df *ABS*	00000000 lib2-divmod.c
050826a8 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
05082a28 l     F .text	00000034 __sprint_r
0508f126 l     O .rodata	00000010 blanks.3515
0508f136 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
05084ad8 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
05086514 l     F .text	00000008 __fp_lock
0508651c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0508f410 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0508f16c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0508f2b4 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0508a85c l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0508bb28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0508bc40 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0508bc6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0508bf18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0508c008 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0508c0f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0508c2cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
05090e5c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0508c54c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0508c688 l     F .text	00000038 alt_dev_reg
0508fdcc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0508c978 l     F .text	00000204 altera_avalon_jtag_uart_irq
0508cb7c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0508d1b8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0508d58c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0508da2c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0508db64 l     F .text	00000050 alt_get_errno
0508dbb4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
05081f90 g     F .text	00000050 display_time_elapsed
05088e6c g     F .text	00000074 _mprec_log10
05081030 g     F .text	00000124 I2C_Read
05088f5c g     F .text	00000084 __any_on
05089bcc g     F .text	00000064 _isatty_r
0508f19c g     O .rodata	00000028 __mprec_tinytens
0508c214 g     F .text	00000078 alt_main
0508bae4 g     F .text	00000044 __ashldi3
05082840 g     F .text	00000084 _puts_r
05081d24 g     F .text	00000060 button_monitor_isr
05092960 g     O .bss	00000100 alt_irq
05089c30 g     F .text	0000006c _lseek_r
05090e68 g       *ABS*	00000000 __flash_rwdata_start
0508b0fc g     F .text	0000005c __eqdf2
05081bc8 g     F .text	0000003c ui_is_mic_record
05092bf0 g       *ABS*	00000000 __alt_heap_start
05080204 g     F .text	00000188 AUDIO_Init
05082804 g     F .text	0000003c printf
0508044c g     F .text	00000078 AUDIO_AdcEnableHighPassFilter
05089780 g     F .text	0000005c __sseek
050865a4 g     F .text	0000010c __sinit
0508723c g     F .text	0000009c _setlocale_r
05086530 g     F .text	00000064 __sfmoreglue
0508c2ac g     F .text	00000020 __malloc_unlock
05087e34 g     F .text	00000128 memmove
05086594 g     F .text	00000010 _cleanup
05080cfc g     F .text	000000f4 aduio_RegWrite
05080f08 g     F .text	0000002c AUDIO_FifoClear
05088038 g     F .text	000000a8 _Balloc
050816a4 g     F .text	0000002c LED_AllOff
0508b1b4 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
05080eb4 g     F .text	00000054 AUDIO_AdcFifoGetData
050813c4 g     F .text	0000012c i2c_write
05080000 g     F .entry	0000001c __reset
05081fe0 g     F .text	00000094 show_power
05080020 g       *ABS*	00000000 __flash_exceptions_start
05089b64 g     F .text	00000068 _fstat_r
050928f4 g     O .bss	00000004 errno
05092900 g     O .bss	00000004 alt_argv
05098e2c g       *ABS*	00000000 _gp
0508c51c g     F .text	00000030 usleep
050821dc g     F .text	00000060 show_menu
0508fc4c g     O .rwdata	00000180 alt_fd_list
0508df90 g     F .text	00000090 alt_find_dev
05087d3c g     F .text	000000f8 memcpy
05081640 g     F .text	00000038 LED_Display
05086524 g     F .text	0000000c _cleanup_r
0508b2d8 g     F .text	000000d4 __floatsidf
05081d84 g     F .text	00000084 button_monitor_start
0508daec g     F .text	00000078 alt_io_redirect
0508b27c g     F .text	0000005c __ltdf2
0508e648 g       *ABS*	00000000 __DTOR_END__
050828c4 g     F .text	00000014 puts
05088dc8 g     F .text	000000a4 __ratio
05081e08 g     F .text	00000188 init_audio
0508cd7c g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
050827d8 g     F .text	0000002c _printf_r
050827c8 g     F .text	00000008 __udivsi3
0508bf68 g     F .text	000000a0 isatty
05080be4 g     F .text	0000008c AUDIO_EnableByPass
0508f1ec g     O .rodata	000000c8 __mprec_tens
050872d8 g     F .text	0000000c __locale_charset
05084924 g     F .text	00000040 vsnprintf
0508e1e8 g     F .text	0000008c alt_icache_flush
05081154 g     F .text	0000017c I2C_MultipleRead
050928f0 g     O .bss	00000004 __malloc_top_pad
050809c4 g     F .text	00000110 AUDIO_SetLineInVol
05090e34 g     O .rwdata	00000004 __mb_cur_max
050872e4 g     F .text	0000000c _localeconv_r
05088438 g     F .text	0000003c __i2b
05086bf8 g     F .text	000004e4 __sfvwrite_r
05081740 g     F .text	0000005c SEG7_Clear
05089640 g     F .text	00000064 _sbrk_r
05081b3c g     F .text	0000008c myprintf_dword_array
05089c9c g     F .text	0000006c _read_r
0508f810 g     O .rwdata	0000000c __lc_ctype
05090e50 g     O .rwdata	00000004 alt_max_fd
0508b8cc g     F .text	00000104 __unpack_d
05089a14 g     F .text	0000013c _fclose_r
050864e4 g     F .text	00000030 fflush
05080574 g     F .text	000000e0 AUDIO_DacEnableZeroCross
050928ec g     O .bss	00000004 __malloc_max_sbrked_mem
0508bd68 g     F .text	000001b0 alt_irq_register
0508abb0 g     F .text	00000054 __adddf3
05088b3c g     F .text	00000148 __b2d
0508a2d0 g     F .text	0000058c __umoddi3
0508c144 g     F .text	000000d0 lseek
05090e2c g     O .rwdata	00000004 _global_impure_ptr
05088fe0 g     F .text	000005fc _realloc_r
05092bf0 g       *ABS*	00000000 __bss_end
0508d93c g     F .text	000000f0 alt_iic_isr_register
0508de6c g     F .text	00000104 alt_tick
05089d08 g     F .text	000005c8 __udivdi3
0508f1c4 g     O .rodata	00000028 __mprec_bigtens
0508821c g     F .text	00000104 __s2b
0508b480 g     F .text	0000011c __floatunsidf
050803d4 g     F .text	00000078 AUDIO_MicBoost
050888dc g     F .text	00000058 __mcmp
050867bc g     F .text	00000018 __fp_lock_all
0508d8f0 g     F .text	0000004c alt_ic_irq_enabled
05080f34 g     F .text	000000fc I2C_Write
050817f8 g     F .text	00000070 SEG7_Number
0508ddd4 g     F .text	00000098 alt_alarm_stop
050928f8 g     O .bss	00000004 alt_irq_active
050800ec g     F .exceptions	000000cc alt_irq_handler
0508fc24 g     O .rwdata	00000028 alt_dev_null
050812d0 g     F .text	00000084 i2c_start
0508d548 g     F .text	00000044 alt_dcache_flush_all
05088320 g     F .text	00000068 __hi0bits
0508b3ac g     F .text	000000d4 __fixdfsi
05090e68 g       *ABS*	00000000 __ram_rwdata_end
05090e48 g     O .rwdata	00000008 alt_dev_list
0508c59c g     F .text	000000ec write
0508f400 g       *ABS*	00000000 __ram_rodata_end
0508bcbc g     F .text	000000ac fstat
0508baa0 g     F .text	00000044 __lshrdi3
05081a48 g     F .text	0000006c myprintf
05088654 g     F .text	0000012c __pow5mult
050928e4 g     O .bss	00000004 __nlocale_changed
050827d0 g     F .text	00000008 __umodsi3
05080c70 g     F .text	0000008c AUDIO_EnableSiteTone
05092bf0 g       *ABS*	00000000 end
05081678 g     F .text	0000002c LED_AllOn
0508c8b8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0508e648 g       *ABS*	00000000 __CTOR_LIST__
050ce200 g       *ABS*	00000000 __alt_stack_pointer
0508d22c g     F .text	00000088 alt_avalon_timer_sc_init
0508b5fc g     F .text	000000ac __clzsi2
0508cf94 g     F .text	00000224 altera_avalon_jtag_uart_write
050867ac g     F .text	00000004 __sfp_lock_acquire
05087c44 g     F .text	000000f8 memchr
05082a5c g     F .text	00001df8 ___vfprintf_internal_r
050828d8 g     F .text	00000058 _sprintf_r
05086928 g     F .text	000002d0 _free_r
0508e46c g     F .text	000001a0 __call_exitprocs
050928e0 g     O .bss	00000004 __mlocale_changed
05090e38 g     O .rwdata	00000004 __malloc_sbrk_base
050801b8 g     F .text	0000004c _start
05092908 g     O .bss	00000004 _alt_tick_rate
05088780 g     F .text	0000015c __lshift
0509290c g     O .bss	00000004 _alt_nticks
0508c31c g     F .text	000000f0 read
0508c6f4 g     F .text	00000060 alt_sys_init
0508e33c g     F .text	00000130 __register_exitproc
05080654 g     F .text	0000008c AUDIO_DacEnableSoftMute
05088474 g     F .text	000001e0 __multiply
0508cc20 g     F .text	00000068 altera_avalon_jtag_uart_close
0508f400 g       *ABS*	00000000 __ram_rwdata_start
0508e648 g       *ABS*	00000000 __ram_rodata_start
05092938 g     O .bss	00000028 __malloc_current_mallinfo
05088c84 g     F .text	00000144 __d2b
05081c40 g     F .text	0000003c ui_is_dac_zero_cross
0508c754 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0508e134 g     F .text	000000b4 alt_get_fd
0508d3f4 g     F .text	00000154 alt_busy_sleep
0508b9d0 g     F .text	000000d0 __fpcmp_parts_d
050899b0 g     F .text	00000064 _close_r
0508e2c0 g     F .text	0000007c memcmp
0508c814 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
05092bf0 g       *ABS*	00000000 __alt_stack_base
0508c864 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
05084964 g     F .text	00000174 __swsetup_r
05082074 g     F .text	00000058 init
0508af48 g     F .text	000001b4 __divdf3
050866b0 g     F .text	000000fc __sfp
05088ee0 g     F .text	0000007c __copybits
050804c4 g     F .text	000000b0 AUDIO_DacDeemphasisControl
0508f81c g     O .rwdata	00000408 __malloc_av_
050867b8 g     F .text	00000004 __sinit_lock_release
05084878 g     F .text	000000ac _vsnprintf_r
05081354 g     F .text	00000070 i2c_stop
0508ac64 g     F .text	000002e4 __muldf3
050896a4 g     F .text	00000054 __sread
0508179c g     F .text	0000005c SEG7_Full
0508e020 g     F .text	00000114 alt_find_file
05081934 g     F .text	000000e4 SEG7_Decimal
0508d5dc g     F .text	000000a0 alt_dev_llist_insert
0508c28c g     F .text	00000020 __malloc_lock
0508c46c g     F .text	000000b0 sbrk
0508084c g     F .text	00000090 AUDIO_SetInputSource
050862fc g     F .text	000001e8 _fflush_r
050898f4 g     F .text	000000bc _calloc_r
0508038c g     F .text	00000048 AUDIO_InterfaceActive
050928d0 g       *ABS*	00000000 __bss_start
05087f5c g     F .text	000000dc memset
0508223c g     F .text	0000046c main
05092904 g     O .bss	00000004 alt_envp
050928e8 g     O .bss	00000004 __malloc_max_total_mem
0508c7b4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
050814f0 g     F .text	00000150 i2c_read
050928d8 g     O .bss	00000004 record_sample_rate
050897dc g     F .text	00000008 __sclose
050ce200 g       *ABS*	00000000 __alt_heap_limit
05089b50 g     F .text	00000014 fclose
05092a60 g     O .bss	00000190 _atexit0
05084ce0 g     F .text	0000161c _dtoa_r
050874c0 g     F .text	00000784 _malloc_r
05090e54 g     O .rwdata	00000004 alt_errno
050870dc g     F .text	000000a8 _fwalk
05081c7c g     F .text	000000a8 ui_get_sample_rate
0508271c g     F .text	00000050 __divsi3
0508f2c0 g     O .rodata	00000014 __thenan_df
050867ec g     F .text	0000013c _malloc_trim_r
0508e648 g       *ABS*	00000000 __CTOR_END__
0508076c g     F .text	000000e0 AUDIO_LineInMute
050897e4 g     F .text	000000a4 strcmp
050806e0 g     F .text	0000008c AUDIO_MicMute
0508e648 g       *ABS*	00000000 __flash_rodata_start
0508e648 g       *ABS*	00000000 __DTOR_LIST__
0508b158 g     F .text	0000005c __nedf2
0508c6c0 g     F .text	00000034 alt_irq_init
0508c40c g     F .text	00000060 alt_release_fd
05082930 g     F .text	0000006c sprintf
0508f2d4 g     O .rodata	00000100 __clz_tab
05081868 g     F .text	000000cc SEG7_Hex
05081a18 g     F .text	00000030 debug_output
050928dc g     O .bss	00000004 _PathLocale
0508e274 g     F .text	00000014 atexit
050820cc g     F .text	00000110 dump_record_data
05089888 g     F .text	0000006c _write_r
050872f0 g     F .text	0000001c setlocale
05090e30 g     O .rwdata	00000004 _impure_ptr
050928fc g     O .bss	00000004 alt_argc
0508d6d8 g     F .text	0000005c _do_dtors
05080e78 g     F .text	0000003c AUDIO_AdcFifoNotEmpty
05080020 g       .exceptions	00000000 alt_irq_entry
05088adc g     F .text	00000060 __ulp
050895dc g     F .text	00000038 __isinfd
050867d4 g     F .text	00000018 __fp_unlock_all
05081c04 g     F .text	0000003c ui_is_mic_boost
05080e2c g     F .text	0000004c AUDIO_DacFifoSetData
05090e40 g     O .rwdata	00000008 alt_fs_list
05081ab4 g     F .text	00000088 myprintf_hex_array
05080020 g       *ABS*	00000000 __ram_exceptions_start
050808dc g     F .text	000000e8 AUDIO_SetSampleRate
0508730c g     F .text	0000000c localeconv
05080000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0508d764 g     F .text	00000050 alt_ic_isr_register
05090e68 g       *ABS*	00000000 _edata
05092bf0 g       *ABS*	00000000 _end
05080ad4 g     F .text	00000110 AUDIO_SetLineOutVol
050801b8 g       *ABS*	00000000 __ram_exceptions_end
0508cc88 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0508d850 g     F .text	000000a0 alt_ic_irq_disable
050896f8 g     F .text	00000088 __swrite
05090e3c g     O .rwdata	00000004 __malloc_trim_threshold
0508df70 g     F .text	00000020 altera_nios2_qsys_irq_init
0508e288 g     F .text	00000038 exit
050816d0 g     F .text	00000070 LED_LightCount
05087184 g     F .text	000000b8 _fwalk_reent
05088934 g     F .text	000001a8 __mdiff
0508276c g     F .text	0000005c __modsi3
050ce200 g       *ABS*	00000000 __alt_data_end
05080020 g     F .exceptions	00000000 alt_exception
050867b0 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0508e60c g     F .text	0000003c _exit
05089614 g     F .text	0000002c __isnand
0508d2b4 g     F .text	00000140 alt_alarm_start
0508b59c g     F .text	00000060 __muldi3
05087318 g     F .text	000001a8 __smakebuf_r
0508299c g     F .text	0000008c strlen
0508dc80 g     F .text	00000154 open
05080df0 g     F .text	0000003c AUDIO_DacFifoNotFull
0508b218 g     F .text	00000064 __gedf2
0508d734 g     F .text	00000030 alt_icache_flush_all
05090e58 g     O .rwdata	00000004 alt_priority_mask
0508d7b4 g     F .text	0000009c alt_ic_irq_enable
05084854 g     F .text	00000024 __vfprintf_internal
0508ac04 g     F .text	00000060 __subdf3
05088388 g     F .text	000000b0 __lo0bits
05090e60 g     O .rwdata	00000008 alt_alarm_list
0508d67c g     F .text	0000005c _do_ctors
0508bb78 g     F .text	000000c8 close
0508c074 g     F .text	00000080 alt_load
0508b6a8 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
050867b4 g     F .text	00000004 __sinit_lock_acquire
05088108 g     F .text	00000114 __multadd
0508e7f8 g     O .rodata	00000800 szMenu
050880e0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

05080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 5080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 5080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 5080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 508000c:	00bffd16 	blt	zero,r2,5080004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5080010:	00414234 	movhi	at,1288
    ori r1, r1, %lo(_start)
 5080014:	08406e14 	ori	at,at,440
    jmp r1
 5080018:	0800683a 	jmp	at
 508001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .exceptions:

05080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 5080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 5080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 5080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 508002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 5080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 5080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 5080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 508003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 5080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 5080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 5080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 508004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 5080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 5080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 5080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 508005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 5080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 5080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 5080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 508006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 5080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 5080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 5080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 508007c:	10000326 	beq	r2,zero,508008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 5080080:	20000226 	beq	r4,zero,508008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 5080084:	50800ec0 	call	50800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 5080088:	00000306 	br	5080098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 508008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 5080090:	e8bfff17 	ldw	r2,-4(ea)

05080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 5080094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 5080098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 508009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 50800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 50800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 50800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 50800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 50800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 50800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 50800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 50800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 50800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 50800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 50800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 50800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 50800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 50800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 50800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 50800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 50800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 50800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 50800e8:	ef80083a 	eret

050800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 50800ec:	defff904 	addi	sp,sp,-28
 50800f0:	dfc00615 	stw	ra,24(sp)
 50800f4:	df000515 	stw	fp,20(sp)
 50800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 50800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5080100:	0005313a 	rdctl	r2,ipending
 5080104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 5080108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 508010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 5080110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 5080114:	00800044 	movi	r2,1
 5080118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 508011c:	e0fffb17 	ldw	r3,-20(fp)
 5080120:	e0bffc17 	ldw	r2,-16(fp)
 5080124:	1884703a 	and	r2,r3,r2
 5080128:	10001726 	beq	r2,zero,5080188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 508012c:	00c14274 	movhi	r3,1289
 5080130:	18ca5804 	addi	r3,r3,10592
 5080134:	e0bffd17 	ldw	r2,-12(fp)
 5080138:	100490fa 	slli	r2,r2,3
 508013c:	1885883a 	add	r2,r3,r2
 5080140:	10c00017 	ldw	r3,0(r2)
 5080144:	01014274 	movhi	r4,1289
 5080148:	210a5804 	addi	r4,r4,10592
 508014c:	e0bffd17 	ldw	r2,-12(fp)
 5080150:	100490fa 	slli	r2,r2,3
 5080154:	2085883a 	add	r2,r4,r2
 5080158:	10800104 	addi	r2,r2,4
 508015c:	10800017 	ldw	r2,0(r2)
 5080160:	1009883a 	mov	r4,r2
 5080164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 5080168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 508016c:	0005313a 	rdctl	r2,ipending
 5080170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 5080174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 5080178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 508017c:	e0bffb17 	ldw	r2,-20(fp)
 5080180:	103fe31e 	bne	r2,zero,5080110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 5080184:	00000706 	br	50801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 5080188:	e0bffc17 	ldw	r2,-16(fp)
 508018c:	1085883a 	add	r2,r2,r2
 5080190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 5080194:	e0bffd17 	ldw	r2,-12(fp)
 5080198:	10800044 	addi	r2,r2,1
 508019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 50801a0:	003fde06 	br	508011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 50801a4:	e037883a 	mov	sp,fp
 50801a8:	dfc00117 	ldw	ra,4(sp)
 50801ac:	df000017 	ldw	fp,0(sp)
 50801b0:	dec00204 	addi	sp,sp,8
 50801b4:	f800283a 	ret

Disassembly of section .text:

050801b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 50801b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 50801bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 50801c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 50801c4:	00bffd16 	blt	zero,r2,50801bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 50801c8:	06c14334 	movhi	sp,1292
    ori sp, sp, %lo(__alt_stack_pointer)
 50801cc:	def88014 	ori	sp,sp,57856
    movhi gp, %hi(_gp)
 50801d0:	06814274 	movhi	gp,1289
    ori gp, gp, %lo(_gp)
 50801d4:	d6a38b14 	ori	gp,gp,36396
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 50801d8:	00814274 	movhi	r2,1289
    ori r2, r2, %lo(__bss_start)
 50801dc:	108a3414 	ori	r2,r2,10448

    movhi r3, %hi(__bss_end)
 50801e0:	00c14274 	movhi	r3,1289
    ori r3, r3, %lo(__bss_end)
 50801e4:	18cafc14 	ori	r3,r3,11248

    beq r2, r3, 1f
 50801e8:	10c00326 	beq	r2,r3,50801f8 <_start+0x40>

0:
    stw zero, (r2)
 50801ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 50801f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 50801f4:	10fffd36 	bltu	r2,r3,50801ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 50801f8:	508c0740 	call	508c074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 50801fc:	508c2140 	call	508c214 <alt_main>

05080200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 5080200:	003fff06 	br	5080200 <alt_after_alt_main>

05080204 <AUDIO_Init>:

/////////////////////////////////////////////////////////////////////////
///////////// External function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool AUDIO_Init(void){
 5080204:	defffd04 	addi	sp,sp,-12
 5080208:	dfc00215 	stw	ra,8(sp)
 508020c:	df000115 	stw	fp,4(sp)
 5080210:	df000104 	addi	fp,sp,4
   bool bSuccess = TRUE;
 5080214:	00800044 	movi	r2,1
 5080218:	e0bfff15 	stw	r2,-4(fp)
    AUDIO_DEBUG(("[AUDIO] AUDIO_Init...\r\n"));
 508021c:	01014274 	movhi	r4,1289
 5080220:	21399204 	addi	r4,r4,-6584
 5080224:	5081a480 	call	5081a48 <myprintf>

    if (bSuccess)
 5080228:	e0bfff17 	ldw	r2,-4(fp)
 508022c:	10000426 	beq	r2,zero,5080240 <AUDIO_Init+0x3c>
        bSuccess = aduio_RegWrite(15, 0x0000);  // reset
 5080230:	010003c4 	movi	r4,15
 5080234:	000b883a 	mov	r5,zero
 5080238:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 508023c:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
 5080240:	e0bfff17 	ldw	r2,-4(fp)
 5080244:	10000426 	beq	r2,zero,5080258 <AUDIO_Init+0x54>
        bSuccess = aduio_RegWrite(9, 0x0000);  // inactive interface         
 5080248:	01000244 	movi	r4,9
 508024c:	000b883a 	mov	r5,zero
 5080250:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080254:	e0bfff15 	stw	r2,-4(fp)
       
    //usleep(20*1000);    
    if (bSuccess)
 5080258:	e0bfff17 	ldw	r2,-4(fp)
 508025c:	10000426 	beq	r2,zero,5080270 <AUDIO_Init+0x6c>
        bSuccess = aduio_RegWrite(0, 0x0017);  // Left Line In: set left line in volume
 5080260:	0009883a 	mov	r4,zero
 5080264:	014005c4 	movi	r5,23
 5080268:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 508026c:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
 5080270:	e0bfff17 	ldw	r2,-4(fp)
 5080274:	10000426 	beq	r2,zero,5080288 <AUDIO_Init+0x84>
        bSuccess = aduio_RegWrite(1, 0x0017);  // Right Line In: set right line in volume
 5080278:	01000044 	movi	r4,1
 508027c:	014005c4 	movi	r5,23
 5080280:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080284:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
 5080288:	e0bfff17 	ldw	r2,-4(fp)
 508028c:	10000426 	beq	r2,zero,50802a0 <AUDIO_Init+0x9c>
        bSuccess = aduio_RegWrite(2, 0x005B);  // Left Headphone Out: set left line out volume
 5080290:	01000084 	movi	r4,2
 5080294:	014016c4 	movi	r5,91
 5080298:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 508029c:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
 50802a0:	e0bfff17 	ldw	r2,-4(fp)
 50802a4:	10000426 	beq	r2,zero,50802b8 <AUDIO_Init+0xb4>
        bSuccess = aduio_RegWrite(3, 0x005B);  // Right Headphone Out: set right line out volume
 50802a8:	010000c4 	movi	r4,3
 50802ac:	014016c4 	movi	r5,91
 50802b0:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50802b4:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)      
 50802b8:	e0bfff17 	ldw	r2,-4(fp)
 50802bc:	10000426 	beq	r2,zero,50802d0 <AUDIO_Init+0xcc>
        bSuccess = aduio_RegWrite(4, 0x0015);  // Analogue Audio Path Control: set mic as input and boost it, and enable dac         
 50802c0:	01000104 	movi	r4,4
 50802c4:	01400544 	movi	r5,21
 50802c8:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50802cc:	e0bfff15 	stw	r2,-4(fp)
                
    if (bSuccess)
 50802d0:	e0bfff17 	ldw	r2,-4(fp)
 50802d4:	10000426 	beq	r2,zero,50802e8 <AUDIO_Init+0xe4>
        bSuccess = aduio_RegWrite(5, 0x0000);  // Digital Audio Path Control: disable soft mute         
 50802d8:	01000144 	movi	r4,5
 50802dc:	000b883a 	mov	r5,zero
 50802e0:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50802e4:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
 50802e8:	e0bfff17 	ldw	r2,-4(fp)
 50802ec:	10000426 	beq	r2,zero,5080300 <AUDIO_Init+0xfc>
        bSuccess = aduio_RegWrite(6, 0);  // power down control: power on all         
 50802f0:	01000184 	movi	r4,6
 50802f4:	000b883a 	mov	r5,zero
 50802f8:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50802fc:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
 5080300:	e0bfff17 	ldw	r2,-4(fp)
 5080304:	10000426 	beq	r2,zero,5080318 <AUDIO_Init+0x114>
        bSuccess = aduio_RegWrite(7, 0x0042);  // I2S, iwl=16-bits, Enable Master Mode         
 5080308:	010001c4 	movi	r4,7
 508030c:	01401084 	movi	r5,66
 5080310:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080314:	e0bfff15 	stw	r2,-4(fp)
//        bSuccess = aduio_RegWrite(7, 0x0041);  // MSB-First, left justified, iwl=16-bits, Enable Master Mode         

    if (bSuccess)
 5080318:	e0bfff17 	ldw	r2,-4(fp)
 508031c:	10000426 	beq	r2,zero,5080330 <AUDIO_Init+0x12c>
        bSuccess = aduio_RegWrite(8, 0x0002);  // Normal, Base OVer-Sampleing Rate 384 fs (BOSR=1)         
 5080320:	01000204 	movi	r4,8
 5080324:	01400084 	movi	r5,2
 5080328:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 508032c:	e0bfff15 	stw	r2,-4(fp)


    if (bSuccess)
 5080330:	e0bfff17 	ldw	r2,-4(fp)
 5080334:	10000426 	beq	r2,zero,5080348 <AUDIO_Init+0x144>
        bSuccess = aduio_RegWrite(9, 0x0001);  // active interface
 5080338:	01000244 	movi	r4,9
 508033c:	01400044 	movi	r5,1
 5080340:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080344:	e0bfff15 	stw	r2,-4(fp)
        
        
         
    AUDIO_DEBUG(("[AUDIO] AUDIO_Init %s\r\n", bSuccess?"success":"fail"));        
 5080348:	e0bfff17 	ldw	r2,-4(fp)
 508034c:	10000326 	beq	r2,zero,508035c <AUDIO_Init+0x158>
 5080350:	00814274 	movhi	r2,1289
 5080354:	10b99804 	addi	r2,r2,-6560
 5080358:	00000206 	br	5080364 <AUDIO_Init+0x160>
 508035c:	00814274 	movhi	r2,1289
 5080360:	10b99a04 	addi	r2,r2,-6552
 5080364:	01014274 	movhi	r4,1289
 5080368:	21399c04 	addi	r4,r4,-6544
 508036c:	100b883a 	mov	r5,r2
 5080370:	5081a480 	call	5081a48 <myprintf>
    
    return bSuccess;        
 5080374:	e0bfff17 	ldw	r2,-4(fp)
         
}
 5080378:	e037883a 	mov	sp,fp
 508037c:	dfc00117 	ldw	ra,4(sp)
 5080380:	df000017 	ldw	fp,0(sp)
 5080384:	dec00204 	addi	sp,sp,8
 5080388:	f800283a 	ret

0508038c <AUDIO_InterfaceActive>:

bool AUDIO_InterfaceActive(bool bActive){
 508038c:	defffc04 	addi	sp,sp,-16
 5080390:	dfc00315 	stw	ra,12(sp)
 5080394:	df000215 	stw	fp,8(sp)
 5080398:	df000204 	addi	fp,sp,8
 508039c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    bSuccess = aduio_RegWrite(9, bActive?0x0001:0x0000); 
 50803a0:	e0bfff17 	ldw	r2,-4(fp)
 50803a4:	1004c03a 	cmpne	r2,r2,zero
 50803a8:	10803fcc 	andi	r2,r2,255
 50803ac:	01000244 	movi	r4,9
 50803b0:	100b883a 	mov	r5,r2
 50803b4:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50803b8:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;
 50803bc:	e0bffe17 	ldw	r2,-8(fp)
}
 50803c0:	e037883a 	mov	sp,fp
 50803c4:	dfc00117 	ldw	ra,4(sp)
 50803c8:	df000017 	ldw	fp,0(sp)
 50803cc:	dec00204 	addi	sp,sp,8
 50803d0:	f800283a 	ret

050803d4 <AUDIO_MicBoost>:

bool AUDIO_MicBoost(bool bBoost){
 50803d4:	defffb04 	addi	sp,sp,-20
 50803d8:	dfc00415 	stw	ra,16(sp)
 50803dc:	df000315 	stw	fp,12(sp)
 50803e0:	df000304 	addi	fp,sp,12
 50803e4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[4];
 50803e8:	00814274 	movhi	r2,1289
 50803ec:	108a4404 	addi	r2,r2,10512
 50803f0:	1080020b 	ldhu	r2,8(r2)
 50803f4:	e0bffd0d 	sth	r2,-12(fp)
    if (bBoost)
 50803f8:	e0bfff17 	ldw	r2,-4(fp)
 50803fc:	10000426 	beq	r2,zero,5080410 <AUDIO_MicBoost+0x3c>
        control |= 0x0001;
 5080400:	e0bffd0b 	ldhu	r2,-12(fp)
 5080404:	10800054 	ori	r2,r2,1
 5080408:	e0bffd0d 	sth	r2,-12(fp)
 508040c:	00000406 	br	5080420 <AUDIO_MicBoost+0x4c>
    else        
        control &= 0xFFFE;
 5080410:	e0fffd0b 	ldhu	r3,-12(fp)
 5080414:	00bfff84 	movi	r2,-2
 5080418:	1884703a 	and	r2,r3,r2
 508041c:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
 5080420:	e0bffd0b 	ldhu	r2,-12(fp)
 5080424:	01000104 	movi	r4,4
 5080428:	100b883a 	mov	r5,r2
 508042c:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080430:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;
 5080434:	e0bffe17 	ldw	r2,-8(fp)
}
 5080438:	e037883a 	mov	sp,fp
 508043c:	dfc00117 	ldw	ra,4(sp)
 5080440:	df000017 	ldw	fp,0(sp)
 5080444:	dec00204 	addi	sp,sp,8
 5080448:	f800283a 	ret

0508044c <AUDIO_AdcEnableHighPassFilter>:

bool AUDIO_AdcEnableHighPassFilter(bool bEnable){
 508044c:	defffb04 	addi	sp,sp,-20
 5080450:	dfc00415 	stw	ra,16(sp)
 5080454:	df000315 	stw	fp,12(sp)
 5080458:	df000304 	addi	fp,sp,12
 508045c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[5];
 5080460:	00814274 	movhi	r2,1289
 5080464:	108a4404 	addi	r2,r2,10512
 5080468:	1080028b 	ldhu	r2,10(r2)
 508046c:	e0bffd0d 	sth	r2,-12(fp)
    if (bEnable)
 5080470:	e0bfff17 	ldw	r2,-4(fp)
 5080474:	10000526 	beq	r2,zero,508048c <AUDIO_AdcEnableHighPassFilter+0x40>
        control &= 0xFFFE;
 5080478:	e0fffd0b 	ldhu	r3,-12(fp)
 508047c:	00bfff84 	movi	r2,-2
 5080480:	1884703a 	and	r2,r3,r2
 5080484:	e0bffd0d 	sth	r2,-12(fp)
 5080488:	00000306 	br	5080498 <AUDIO_AdcEnableHighPassFilter+0x4c>
    else        
        control |= 0x0001;
 508048c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080490:	10800054 	ori	r2,r2,1
 5080494:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
 5080498:	e0bffd0b 	ldhu	r2,-12(fp)
 508049c:	01000144 	movi	r4,5
 50804a0:	100b883a 	mov	r5,r2
 50804a4:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50804a8:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;    
 50804ac:	e0bffe17 	ldw	r2,-8(fp)
}
 50804b0:	e037883a 	mov	sp,fp
 50804b4:	dfc00117 	ldw	ra,4(sp)
 50804b8:	df000017 	ldw	fp,0(sp)
 50804bc:	dec00204 	addi	sp,sp,8
 50804c0:	f800283a 	ret

050804c4 <AUDIO_DacDeemphasisControl>:



bool AUDIO_DacDeemphasisControl(alt_u8 deemphasis_type){
 50804c4:	defffb04 	addi	sp,sp,-20
 50804c8:	dfc00415 	stw	ra,16(sp)
 50804cc:	df000315 	stw	fp,12(sp)
 50804d0:	df000304 	addi	fp,sp,12
 50804d4:	2005883a 	mov	r2,r4
 50804d8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[5];
 50804dc:	00814274 	movhi	r2,1289
 50804e0:	108a4404 	addi	r2,r2,10512
 50804e4:	1080028b 	ldhu	r2,10(r2)
 50804e8:	e0bffd0d 	sth	r2,-12(fp)
    control &= 0xFFF9;
 50804ec:	e0fffd0b 	ldhu	r3,-12(fp)
 50804f0:	00bffe44 	movi	r2,-7
 50804f4:	1884703a 	and	r2,r3,r2
 50804f8:	e0bffd0d 	sth	r2,-12(fp)
    switch(deemphasis_type){
 50804fc:	e0bfff03 	ldbu	r2,-4(fp)
 5080500:	10c000a0 	cmpeqi	r3,r2,2
 5080504:	1800081e 	bne	r3,zero,5080528 <AUDIO_DacDeemphasisControl+0x64>
 5080508:	10c000e0 	cmpeqi	r3,r2,3
 508050c:	18000a1e 	bne	r3,zero,5080538 <AUDIO_DacDeemphasisControl+0x74>
 5080510:	10800060 	cmpeqi	r2,r2,1
 5080514:	10000c26 	beq	r2,zero,5080548 <AUDIO_DacDeemphasisControl+0x84>
        case DEEMPHASIS_48K: control |= ((0x03) << 1); break;
 5080518:	e0bffd0b 	ldhu	r2,-12(fp)
 508051c:	10800194 	ori	r2,r2,6
 5080520:	e0bffd0d 	sth	r2,-12(fp)
 5080524:	00000806 	br	5080548 <AUDIO_DacDeemphasisControl+0x84>
        case DEEMPHASIS_44K1: control |= ((0x02) << 1); break;
 5080528:	e0bffd0b 	ldhu	r2,-12(fp)
 508052c:	10800114 	ori	r2,r2,4
 5080530:	e0bffd0d 	sth	r2,-12(fp)
 5080534:	00000406 	br	5080548 <AUDIO_DacDeemphasisControl+0x84>
        case DEEMPHASIS_32K: control |= ((0x01) << 1); break;
 5080538:	e0bffd0b 	ldhu	r2,-12(fp)
 508053c:	10800094 	ori	r2,r2,2
 5080540:	e0bffd0d 	sth	r2,-12(fp)
 5080544:	0001883a 	nop
    }
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
 5080548:	e0bffd0b 	ldhu	r2,-12(fp)
 508054c:	01000144 	movi	r4,5
 5080550:	100b883a 	mov	r5,r2
 5080554:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080558:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;       
 508055c:	e0bffe17 	ldw	r2,-8(fp)
}
 5080560:	e037883a 	mov	sp,fp
 5080564:	dfc00117 	ldw	ra,4(sp)
 5080568:	df000017 	ldw	fp,0(sp)
 508056c:	dec00204 	addi	sp,sp,8
 5080570:	f800283a 	ret

05080574 <AUDIO_DacEnableZeroCross>:

bool AUDIO_DacEnableZeroCross(bool bEnable){
 5080574:	defffa04 	addi	sp,sp,-24
 5080578:	dfc00515 	stw	ra,20(sp)
 508057c:	df000415 	stw	fp,16(sp)
 5080580:	df000404 	addi	fp,sp,16
 5080584:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control_l, control_r;
    alt_u16 mask;
    control_l = reg_file[2];
 5080588:	00814274 	movhi	r2,1289
 508058c:	108a4404 	addi	r2,r2,10512
 5080590:	1080010b 	ldhu	r2,4(r2)
 5080594:	e0bffd0d 	sth	r2,-12(fp)
    control_r = reg_file[3];
 5080598:	00814274 	movhi	r2,1289
 508059c:	108a4404 	addi	r2,r2,10512
 50805a0:	1080018b 	ldhu	r2,6(r2)
 50805a4:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 7;
 50805a8:	00802004 	movi	r2,128
 50805ac:	e0bffe0d 	sth	r2,-8(fp)
    if (bEnable){
 50805b0:	e0bfff17 	ldw	r2,-4(fp)
 50805b4:	10000926 	beq	r2,zero,50805dc <AUDIO_DacEnableZeroCross+0x68>
        control_l |= mask;
 50805b8:	e0fffd0b 	ldhu	r3,-12(fp)
 50805bc:	e0bffe0b 	ldhu	r2,-8(fp)
 50805c0:	1884b03a 	or	r2,r3,r2
 50805c4:	e0bffd0d 	sth	r2,-12(fp)
        control_r |= mask;
 50805c8:	e0fffd8b 	ldhu	r3,-10(fp)
 50805cc:	e0bffe0b 	ldhu	r2,-8(fp)
 50805d0:	1884b03a 	or	r2,r3,r2
 50805d4:	e0bffd8d 	sth	r2,-10(fp)
 50805d8:	00000c06 	br	508060c <AUDIO_DacEnableZeroCross+0x98>
    }else{        
        control_l &= ~mask;
 50805dc:	e0bffe0b 	ldhu	r2,-8(fp)
 50805e0:	0084303a 	nor	r2,zero,r2
 50805e4:	1007883a 	mov	r3,r2
 50805e8:	e0bffd0b 	ldhu	r2,-12(fp)
 50805ec:	1884703a 	and	r2,r3,r2
 50805f0:	e0bffd0d 	sth	r2,-12(fp)
        control_r &= ~mask;
 50805f4:	e0bffe0b 	ldhu	r2,-8(fp)
 50805f8:	0084303a 	nor	r2,zero,r2
 50805fc:	1007883a 	mov	r3,r2
 5080600:	e0bffd8b 	ldhu	r2,-10(fp)
 5080604:	1884703a 	and	r2,r3,r2
 5080608:	e0bffd8d 	sth	r2,-10(fp)
    }        
    bSuccess = aduio_RegWrite(2, control_l);  // Left Line In: set left line in volume
 508060c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080610:	01000084 	movi	r4,2
 5080614:	100b883a 	mov	r5,r2
 5080618:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 508061c:	e0bffc15 	stw	r2,-16(fp)
    if (bSuccess)
 5080620:	e0bffc17 	ldw	r2,-16(fp)
 5080624:	10000526 	beq	r2,zero,508063c <AUDIO_DacEnableZeroCross+0xc8>
        bSuccess = aduio_RegWrite(3, control_r);  // Left Line In: set left line in volume
 5080628:	e0bffd8b 	ldhu	r2,-10(fp)
 508062c:	010000c4 	movi	r4,3
 5080630:	100b883a 	mov	r5,r2
 5080634:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080638:	e0bffc15 	stw	r2,-16(fp)
    return bSuccess;      
 508063c:	e0bffc17 	ldw	r2,-16(fp)
}
 5080640:	e037883a 	mov	sp,fp
 5080644:	dfc00117 	ldw	ra,4(sp)
 5080648:	df000017 	ldw	fp,0(sp)
 508064c:	dec00204 	addi	sp,sp,8
 5080650:	f800283a 	ret

05080654 <AUDIO_DacEnableSoftMute>:

bool AUDIO_DacEnableSoftMute(bool bEnable){
 5080654:	defffb04 	addi	sp,sp,-20
 5080658:	dfc00415 	stw	ra,16(sp)
 508065c:	df000315 	stw	fp,12(sp)
 5080660:	df000304 	addi	fp,sp,12
 5080664:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[5];
 5080668:	00814274 	movhi	r2,1289
 508066c:	108a4404 	addi	r2,r2,10512
 5080670:	1080028b 	ldhu	r2,10(r2)
 5080674:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 3;
 5080678:	00800204 	movi	r2,8
 508067c:	e0bffd8d 	sth	r2,-10(fp)
    if (bEnable)
 5080680:	e0bfff17 	ldw	r2,-4(fp)
 5080684:	10000526 	beq	r2,zero,508069c <AUDIO_DacEnableSoftMute+0x48>
        control |= mask;
 5080688:	e0fffd0b 	ldhu	r3,-12(fp)
 508068c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080690:	1884b03a 	or	r2,r3,r2
 5080694:	e0bffd0d 	sth	r2,-12(fp)
 5080698:	00000606 	br	50806b4 <AUDIO_DacEnableSoftMute+0x60>
    else        
        control &= ~mask;
 508069c:	e0bffd8b 	ldhu	r2,-10(fp)
 50806a0:	0084303a 	nor	r2,zero,r2
 50806a4:	1007883a 	mov	r3,r2
 50806a8:	e0bffd0b 	ldhu	r2,-12(fp)
 50806ac:	1884703a 	and	r2,r3,r2
 50806b0:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
 50806b4:	e0bffd0b 	ldhu	r2,-12(fp)
 50806b8:	01000144 	movi	r4,5
 50806bc:	100b883a 	mov	r5,r2
 50806c0:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50806c4:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;      
 50806c8:	e0bffe17 	ldw	r2,-8(fp)
}
 50806cc:	e037883a 	mov	sp,fp
 50806d0:	dfc00117 	ldw	ra,4(sp)
 50806d4:	df000017 	ldw	fp,0(sp)
 50806d8:	dec00204 	addi	sp,sp,8
 50806dc:	f800283a 	ret

050806e0 <AUDIO_MicMute>:

bool AUDIO_MicMute(bool bMute){
 50806e0:	defffb04 	addi	sp,sp,-20
 50806e4:	dfc00415 	stw	ra,16(sp)
 50806e8:	df000315 	stw	fp,12(sp)
 50806ec:	df000304 	addi	fp,sp,12
 50806f0:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 50806f4:	00814274 	movhi	r2,1289
 50806f8:	108a4404 	addi	r2,r2,10512
 50806fc:	1080020b 	ldhu	r2,8(r2)
 5080700:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 1;
 5080704:	00800084 	movi	r2,2
 5080708:	e0bffd8d 	sth	r2,-10(fp)
    if (bMute)
 508070c:	e0bfff17 	ldw	r2,-4(fp)
 5080710:	10000526 	beq	r2,zero,5080728 <AUDIO_MicMute+0x48>
        control |= mask;
 5080714:	e0fffd0b 	ldhu	r3,-12(fp)
 5080718:	e0bffd8b 	ldhu	r2,-10(fp)
 508071c:	1884b03a 	or	r2,r3,r2
 5080720:	e0bffd0d 	sth	r2,-12(fp)
 5080724:	00000606 	br	5080740 <AUDIO_MicMute+0x60>
    else        
        control &= ~mask;
 5080728:	e0bffd8b 	ldhu	r2,-10(fp)
 508072c:	0084303a 	nor	r2,zero,r2
 5080730:	1007883a 	mov	r3,r2
 5080734:	e0bffd0b 	ldhu	r2,-12(fp)
 5080738:	1884703a 	and	r2,r3,r2
 508073c:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
 5080740:	e0bffd0b 	ldhu	r2,-12(fp)
 5080744:	01000104 	movi	r4,4
 5080748:	100b883a 	mov	r5,r2
 508074c:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080750:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
 5080754:	e0bffe17 	ldw	r2,-8(fp)
}
 5080758:	e037883a 	mov	sp,fp
 508075c:	dfc00117 	ldw	ra,4(sp)
 5080760:	df000017 	ldw	fp,0(sp)
 5080764:	dec00204 	addi	sp,sp,8
 5080768:	f800283a 	ret

0508076c <AUDIO_LineInMute>:

bool AUDIO_LineInMute(bool bMute){
 508076c:	defffa04 	addi	sp,sp,-24
 5080770:	dfc00515 	stw	ra,20(sp)
 5080774:	df000415 	stw	fp,16(sp)
 5080778:	df000404 	addi	fp,sp,16
 508077c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control_l, control_r;
    alt_u16 mask;
    control_l = reg_file[0];
 5080780:	00814274 	movhi	r2,1289
 5080784:	108a4404 	addi	r2,r2,10512
 5080788:	1080000b 	ldhu	r2,0(r2)
 508078c:	e0bffd0d 	sth	r2,-12(fp)
    control_r = reg_file[1];
 5080790:	00814274 	movhi	r2,1289
 5080794:	108a4404 	addi	r2,r2,10512
 5080798:	1080008b 	ldhu	r2,2(r2)
 508079c:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 7;
 50807a0:	00802004 	movi	r2,128
 50807a4:	e0bffe0d 	sth	r2,-8(fp)
    if (bMute){
 50807a8:	e0bfff17 	ldw	r2,-4(fp)
 50807ac:	10000926 	beq	r2,zero,50807d4 <AUDIO_LineInMute+0x68>
        control_l |= mask;
 50807b0:	e0fffd0b 	ldhu	r3,-12(fp)
 50807b4:	e0bffe0b 	ldhu	r2,-8(fp)
 50807b8:	1884b03a 	or	r2,r3,r2
 50807bc:	e0bffd0d 	sth	r2,-12(fp)
        control_r |= mask;
 50807c0:	e0fffd8b 	ldhu	r3,-10(fp)
 50807c4:	e0bffe0b 	ldhu	r2,-8(fp)
 50807c8:	1884b03a 	or	r2,r3,r2
 50807cc:	e0bffd8d 	sth	r2,-10(fp)
 50807d0:	00000c06 	br	5080804 <AUDIO_LineInMute+0x98>
    }else{        
        control_l &= ~mask;
 50807d4:	e0bffe0b 	ldhu	r2,-8(fp)
 50807d8:	0084303a 	nor	r2,zero,r2
 50807dc:	1007883a 	mov	r3,r2
 50807e0:	e0bffd0b 	ldhu	r2,-12(fp)
 50807e4:	1884703a 	and	r2,r3,r2
 50807e8:	e0bffd0d 	sth	r2,-12(fp)
        control_r &= ~mask;
 50807ec:	e0bffe0b 	ldhu	r2,-8(fp)
 50807f0:	0084303a 	nor	r2,zero,r2
 50807f4:	1007883a 	mov	r3,r2
 50807f8:	e0bffd8b 	ldhu	r2,-10(fp)
 50807fc:	1884703a 	and	r2,r3,r2
 5080800:	e0bffd8d 	sth	r2,-10(fp)
    }        
    bSuccess = aduio_RegWrite(0, control_l);  // Left Line In: set left line in volume
 5080804:	e0bffd0b 	ldhu	r2,-12(fp)
 5080808:	0009883a 	mov	r4,zero
 508080c:	100b883a 	mov	r5,r2
 5080810:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080814:	e0bffc15 	stw	r2,-16(fp)
    if (bSuccess)
 5080818:	e0bffc17 	ldw	r2,-16(fp)
 508081c:	10000526 	beq	r2,zero,5080834 <AUDIO_LineInMute+0xc8>
        bSuccess = aduio_RegWrite(1, control_r);  // Left Line In: set left line in volume
 5080820:	e0bffd8b 	ldhu	r2,-10(fp)
 5080824:	01000044 	movi	r4,1
 5080828:	100b883a 	mov	r5,r2
 508082c:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080830:	e0bffc15 	stw	r2,-16(fp)
    return bSuccess;        
 5080834:	e0bffc17 	ldw	r2,-16(fp)
}
 5080838:	e037883a 	mov	sp,fp
 508083c:	dfc00117 	ldw	ra,4(sp)
 5080840:	df000017 	ldw	fp,0(sp)
 5080844:	dec00204 	addi	sp,sp,8
 5080848:	f800283a 	ret

0508084c <AUDIO_SetInputSource>:



bool AUDIO_SetInputSource(alt_u8 InputSource){
 508084c:	defffb04 	addi	sp,sp,-20
 5080850:	dfc00415 	stw	ra,16(sp)
 5080854:	df000315 	stw	fp,12(sp)
 5080858:	df000304 	addi	fp,sp,12
 508085c:	2005883a 	mov	r2,r4
 5080860:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 5080864:	00814274 	movhi	r2,1289
 5080868:	108a4404 	addi	r2,r2,10512
 508086c:	1080020b 	ldhu	r2,8(r2)
 5080870:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 2;
 5080874:	00800104 	movi	r2,4
 5080878:	e0bffd8d 	sth	r2,-10(fp)
    if (InputSource == SOURCE_MIC)
 508087c:	e0bfff03 	ldbu	r2,-4(fp)
 5080880:	1000051e 	bne	r2,zero,5080898 <AUDIO_SetInputSource+0x4c>
        control |= mask;
 5080884:	e0fffd0b 	ldhu	r3,-12(fp)
 5080888:	e0bffd8b 	ldhu	r2,-10(fp)
 508088c:	1884b03a 	or	r2,r3,r2
 5080890:	e0bffd0d 	sth	r2,-12(fp)
 5080894:	00000606 	br	50808b0 <AUDIO_SetInputSource+0x64>
    else        
        control &= ~mask;
 5080898:	e0bffd8b 	ldhu	r2,-10(fp)
 508089c:	0084303a 	nor	r2,zero,r2
 50808a0:	1007883a 	mov	r3,r2
 50808a4:	e0bffd0b 	ldhu	r2,-12(fp)
 50808a8:	1884703a 	and	r2,r3,r2
 50808ac:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
 50808b0:	e0bffd0b 	ldhu	r2,-12(fp)
 50808b4:	01000104 	movi	r4,4
 50808b8:	100b883a 	mov	r5,r2
 50808bc:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50808c0:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;       
 50808c4:	e0bffe17 	ldw	r2,-8(fp)
}
 50808c8:	e037883a 	mov	sp,fp
 50808cc:	dfc00117 	ldw	ra,4(sp)
 50808d0:	df000017 	ldw	fp,0(sp)
 50808d4:	dec00204 	addi	sp,sp,8
 50808d8:	f800283a 	ret

050808dc <AUDIO_SetSampleRate>:

// See datasheet page 39
bool AUDIO_SetSampleRate(alt_u8 SampleRate){
 50808dc:	defffb04 	addi	sp,sp,-20
 50808e0:	dfc00415 	stw	ra,16(sp)
 50808e4:	df000315 	stw	fp,12(sp)
 50808e8:	df000304 	addi	fp,sp,12
 50808ec:	2005883a 	mov	r2,r4
 50808f0:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = 0;
 50808f4:	e03ffd0d 	sth	zero,-12(fp)

    switch(SampleRate){
 50808f8:	e0bfff03 	ldbu	r2,-4(fp)
 50808fc:	10c001e8 	cmpgeui	r3,r2,7
 5080900:	1800221e 	bne	r3,zero,508098c <AUDIO_SetSampleRate+0xb0>
 5080904:	1085883a 	add	r2,r2,r2
 5080908:	1087883a 	add	r3,r2,r2
 508090c:	00814234 	movhi	r2,1288
 5080910:	10824804 	addi	r2,r2,2336
 5080914:	1885883a 	add	r2,r3,r2
 5080918:	10800017 	ldw	r2,0(r2)
 508091c:	1000683a 	jmp	r2
 5080920:	0508093c 	xorhi	r20,zero,8228
 5080924:	05080944 	movi	r20,8229
 5080928:	05080950 	cmplti	r20,zero,8229
 508092c:	0508095c 	xori	r20,zero,8229
 5080930:	05080968 	cmpgeui	r20,zero,8229
 5080934:	05080974 	movhi	r20,8229
 5080938:	05080980 	call	508098 <__alt_mem_sdram+0x508098>
         // MCLK = 18.432
        case RATE_ADC48K_DAC48K: control = (0x0) << 2; break;
 508093c:	e03ffd0d 	sth	zero,-12(fp)
 5080940:	00001206 	br	508098c <AUDIO_SetSampleRate+0xb0>
        case RATE_ADC48K_DAC8K: control = (0x1) << 2; break;
 5080944:	00800104 	movi	r2,4
 5080948:	e0bffd0d 	sth	r2,-12(fp)
 508094c:	00000f06 	br	508098c <AUDIO_SetSampleRate+0xb0>
        case RATE_ADC8K_DAC48K: control = (0x2) << 2; break;
 5080950:	00800204 	movi	r2,8
 5080954:	e0bffd0d 	sth	r2,-12(fp)
 5080958:	00000c06 	br	508098c <AUDIO_SetSampleRate+0xb0>
        case RATE_ADC8K_DAC8K: control = (0x3) << 2; break;
 508095c:	00800304 	movi	r2,12
 5080960:	e0bffd0d 	sth	r2,-12(fp)
 5080964:	00000906 	br	508098c <AUDIO_SetSampleRate+0xb0>
        case RATE_ADC32K_DAC32K: control = (0x6) << 2; break;
 5080968:	00800604 	movi	r2,24
 508096c:	e0bffd0d 	sth	r2,-12(fp)
 5080970:	00000606 	br	508098c <AUDIO_SetSampleRate+0xb0>
        case RATE_ADC96K_DAC96K: control = (0x7) << 2; break;
 5080974:	00800704 	movi	r2,28
 5080978:	e0bffd0d 	sth	r2,-12(fp)
 508097c:	00000306 	br	508098c <AUDIO_SetSampleRate+0xb0>
        case RATE_ADC44K1_DAC44K1: control = (0x8) << 2; break;
 5080980:	00800804 	movi	r2,32
 5080984:	e0bffd0d 	sth	r2,-12(fp)
 5080988:	0001883a 	nop
        // MCLK = 11.2896
      //  case RATE_ADC44K1_DAC8K: control = (0x9) << 2; break;
      //  case RATE_ADC8K_DAC44K1: control = (0xA) << 2; break;
    }
    control |= 0x02; // BOSR=1 (384fs = 384*48k = 18.432M)
 508098c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080990:	10800094 	ori	r2,r2,2
 5080994:	e0bffd0d 	sth	r2,-12(fp)
        
    bSuccess = aduio_RegWrite(8, control);  // Left Line In: set left line in volume
 5080998:	e0bffd0b 	ldhu	r2,-12(fp)
 508099c:	01000204 	movi	r4,8
 50809a0:	100b883a 	mov	r5,r2
 50809a4:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50809a8:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;      
 50809ac:	e0bffe17 	ldw	r2,-8(fp)
}
 50809b0:	e037883a 	mov	sp,fp
 50809b4:	dfc00117 	ldw	ra,4(sp)
 50809b8:	df000017 	ldw	fp,0(sp)
 50809bc:	dec00204 	addi	sp,sp,8
 50809c0:	f800283a 	ret

050809c4 <AUDIO_SetLineInVol>:





bool AUDIO_SetLineInVol(alt_u16 l_vol, alt_u16 r_vol){
 50809c4:	defffa04 	addi	sp,sp,-24
 50809c8:	dfc00515 	stw	ra,20(sp)
 50809cc:	df000415 	stw	fp,16(sp)
 50809d0:	df000404 	addi	fp,sp,16
 50809d4:	2007883a 	mov	r3,r4
 50809d8:	2805883a 	mov	r2,r5
 50809dc:	e0fffe0d 	sth	r3,-8(fp)
 50809e0:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    
    // left
    control = reg_file[0];
 50809e4:	00814274 	movhi	r2,1289
 50809e8:	108a4404 	addi	r2,r2,10512
 50809ec:	1080000b 	ldhu	r2,0(r2)
 50809f0:	e0bffd0d 	sth	r2,-12(fp)
    control &= 0xFFE0;
 50809f4:	e0fffd0b 	ldhu	r3,-12(fp)
 50809f8:	00bff804 	movi	r2,-32
 50809fc:	1884703a 	and	r2,r3,r2
 5080a00:	e0bffd0d 	sth	r2,-12(fp)
    control += l_vol & 0x1F;
 5080a04:	e0bffe0b 	ldhu	r2,-8(fp)
 5080a08:	108007cc 	andi	r2,r2,31
 5080a0c:	1007883a 	mov	r3,r2
 5080a10:	e0bffd0b 	ldhu	r2,-12(fp)
 5080a14:	1885883a 	add	r2,r3,r2
 5080a18:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(0, control);
 5080a1c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080a20:	0009883a 	mov	r4,zero
 5080a24:	100b883a 	mov	r5,r2
 5080a28:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080a2c:	e0bffc15 	stw	r2,-16(fp)
    
    if (bSuccess){
 5080a30:	e0bffc17 	ldw	r2,-16(fp)
 5080a34:	10001326 	beq	r2,zero,5080a84 <AUDIO_SetLineInVol+0xc0>
        // right
        control = reg_file[1];
 5080a38:	00814274 	movhi	r2,1289
 5080a3c:	108a4404 	addi	r2,r2,10512
 5080a40:	1080008b 	ldhu	r2,2(r2)
 5080a44:	e0bffd0d 	sth	r2,-12(fp)
        control &= 0xFFE0;
 5080a48:	e0fffd0b 	ldhu	r3,-12(fp)
 5080a4c:	00bff804 	movi	r2,-32
 5080a50:	1884703a 	and	r2,r3,r2
 5080a54:	e0bffd0d 	sth	r2,-12(fp)
        control += r_vol & 0x1F;
 5080a58:	e0bfff0b 	ldhu	r2,-4(fp)
 5080a5c:	108007cc 	andi	r2,r2,31
 5080a60:	1007883a 	mov	r3,r2
 5080a64:	e0bffd0b 	ldhu	r2,-12(fp)
 5080a68:	1885883a 	add	r2,r3,r2
 5080a6c:	e0bffd0d 	sth	r2,-12(fp)
        bSuccess = aduio_RegWrite(1, control);        
 5080a70:	e0bffd0b 	ldhu	r2,-12(fp)
 5080a74:	01000044 	movi	r4,1
 5080a78:	100b883a 	mov	r5,r2
 5080a7c:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080a80:	e0bffc15 	stw	r2,-16(fp)
    }
    
    AUDIO_DEBUG(("[AUDIO] set Line-In vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));        
 5080a84:	e17ffe0b 	ldhu	r5,-8(fp)
 5080a88:	e0ffff0b 	ldhu	r3,-4(fp)
 5080a8c:	e0bffc17 	ldw	r2,-16(fp)
 5080a90:	10000326 	beq	r2,zero,5080aa0 <AUDIO_SetLineInVol+0xdc>
 5080a94:	00814274 	movhi	r2,1289
 5080a98:	10b99804 	addi	r2,r2,-6560
 5080a9c:	00000206 	br	5080aa8 <AUDIO_SetLineInVol+0xe4>
 5080aa0:	00814274 	movhi	r2,1289
 5080aa4:	10b99a04 	addi	r2,r2,-6552
 5080aa8:	01014274 	movhi	r4,1289
 5080aac:	2139a204 	addi	r4,r4,-6520
 5080ab0:	180d883a 	mov	r6,r3
 5080ab4:	100f883a 	mov	r7,r2
 5080ab8:	5081a480 	call	5081a48 <myprintf>
    return bSuccess;
 5080abc:	e0bffc17 	ldw	r2,-16(fp)
}
 5080ac0:	e037883a 	mov	sp,fp
 5080ac4:	dfc00117 	ldw	ra,4(sp)
 5080ac8:	df000017 	ldw	fp,0(sp)
 5080acc:	dec00204 	addi	sp,sp,8
 5080ad0:	f800283a 	ret

05080ad4 <AUDIO_SetLineOutVol>:

bool AUDIO_SetLineOutVol(alt_u16 l_vol, alt_u16 r_vol){
 5080ad4:	defffa04 	addi	sp,sp,-24
 5080ad8:	dfc00515 	stw	ra,20(sp)
 5080adc:	df000415 	stw	fp,16(sp)
 5080ae0:	df000404 	addi	fp,sp,16
 5080ae4:	2007883a 	mov	r3,r4
 5080ae8:	2805883a 	mov	r2,r5
 5080aec:	e0fffe0d 	sth	r3,-8(fp)
 5080af0:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;

 
    // left
    control = reg_file[2];
 5080af4:	00814274 	movhi	r2,1289
 5080af8:	108a4404 	addi	r2,r2,10512
 5080afc:	1080010b 	ldhu	r2,4(r2)
 5080b00:	e0bffd0d 	sth	r2,-12(fp)
    control &= 0xFF80;
 5080b04:	e0fffd0b 	ldhu	r3,-12(fp)
 5080b08:	00bfe004 	movi	r2,-128
 5080b0c:	1884703a 	and	r2,r3,r2
 5080b10:	e0bffd0d 	sth	r2,-12(fp)
    control += l_vol & 0x7F;
 5080b14:	e0bffe0b 	ldhu	r2,-8(fp)
 5080b18:	10801fcc 	andi	r2,r2,127
 5080b1c:	1007883a 	mov	r3,r2
 5080b20:	e0bffd0b 	ldhu	r2,-12(fp)
 5080b24:	1885883a 	add	r2,r3,r2
 5080b28:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(2, control);
 5080b2c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080b30:	01000084 	movi	r4,2
 5080b34:	100b883a 	mov	r5,r2
 5080b38:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080b3c:	e0bffc15 	stw	r2,-16(fp)
    
    if (bSuccess){
 5080b40:	e0bffc17 	ldw	r2,-16(fp)
 5080b44:	10001326 	beq	r2,zero,5080b94 <AUDIO_SetLineOutVol+0xc0>
        // right
        control = reg_file[3];
 5080b48:	00814274 	movhi	r2,1289
 5080b4c:	108a4404 	addi	r2,r2,10512
 5080b50:	1080018b 	ldhu	r2,6(r2)
 5080b54:	e0bffd0d 	sth	r2,-12(fp)
        control &= 0xFF80;
 5080b58:	e0fffd0b 	ldhu	r3,-12(fp)
 5080b5c:	00bfe004 	movi	r2,-128
 5080b60:	1884703a 	and	r2,r3,r2
 5080b64:	e0bffd0d 	sth	r2,-12(fp)
        control += r_vol & 0x7F;
 5080b68:	e0bfff0b 	ldhu	r2,-4(fp)
 5080b6c:	10801fcc 	andi	r2,r2,127
 5080b70:	1007883a 	mov	r3,r2
 5080b74:	e0bffd0b 	ldhu	r2,-12(fp)
 5080b78:	1885883a 	add	r2,r3,r2
 5080b7c:	e0bffd0d 	sth	r2,-12(fp)
        bSuccess = aduio_RegWrite(3, control);        
 5080b80:	e0bffd0b 	ldhu	r2,-12(fp)
 5080b84:	010000c4 	movi	r4,3
 5080b88:	100b883a 	mov	r5,r2
 5080b8c:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080b90:	e0bffc15 	stw	r2,-16(fp)
    }    
    
    AUDIO_DEBUG(("[AUDIO] set Line-Out vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));
 5080b94:	e17ffe0b 	ldhu	r5,-8(fp)
 5080b98:	e0ffff0b 	ldhu	r3,-4(fp)
 5080b9c:	e0bffc17 	ldw	r2,-16(fp)
 5080ba0:	10000326 	beq	r2,zero,5080bb0 <AUDIO_SetLineOutVol+0xdc>
 5080ba4:	00814274 	movhi	r2,1289
 5080ba8:	10b99804 	addi	r2,r2,-6560
 5080bac:	00000206 	br	5080bb8 <AUDIO_SetLineOutVol+0xe4>
 5080bb0:	00814274 	movhi	r2,1289
 5080bb4:	10b99a04 	addi	r2,r2,-6552
 5080bb8:	01014274 	movhi	r4,1289
 5080bbc:	2139ab04 	addi	r4,r4,-6484
 5080bc0:	180d883a 	mov	r6,r3
 5080bc4:	100f883a 	mov	r7,r2
 5080bc8:	5081a480 	call	5081a48 <myprintf>
    
    return bSuccess;
 5080bcc:	e0bffc17 	ldw	r2,-16(fp)
}
 5080bd0:	e037883a 	mov	sp,fp
 5080bd4:	dfc00117 	ldw	ra,4(sp)
 5080bd8:	df000017 	ldw	fp,0(sp)
 5080bdc:	dec00204 	addi	sp,sp,8
 5080be0:	f800283a 	ret

05080be4 <AUDIO_EnableByPass>:


bool AUDIO_EnableByPass(bool bEnable){
 5080be4:	defffb04 	addi	sp,sp,-20
 5080be8:	dfc00415 	stw	ra,16(sp)
 5080bec:	df000315 	stw	fp,12(sp)
 5080bf0:	df000304 	addi	fp,sp,12
 5080bf4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 5080bf8:	00814274 	movhi	r2,1289
 5080bfc:	108a4404 	addi	r2,r2,10512
 5080c00:	1080020b 	ldhu	r2,8(r2)
 5080c04:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 3;
 5080c08:	00800204 	movi	r2,8
 5080c0c:	e0bffd8d 	sth	r2,-10(fp)
    if (bEnable)
 5080c10:	e0bfff17 	ldw	r2,-4(fp)
 5080c14:	10000526 	beq	r2,zero,5080c2c <AUDIO_EnableByPass+0x48>
        control |= mask;
 5080c18:	e0fffd0b 	ldhu	r3,-12(fp)
 5080c1c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080c20:	1884b03a 	or	r2,r3,r2
 5080c24:	e0bffd0d 	sth	r2,-12(fp)
 5080c28:	00000606 	br	5080c44 <AUDIO_EnableByPass+0x60>
    else        
        control &= ~mask;
 5080c2c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080c30:	0084303a 	nor	r2,zero,r2
 5080c34:	1007883a 	mov	r3,r2
 5080c38:	e0bffd0b 	ldhu	r2,-12(fp)
 5080c3c:	1884703a 	and	r2,r3,r2
 5080c40:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control); 
 5080c44:	e0bffd0b 	ldhu	r2,-12(fp)
 5080c48:	01000104 	movi	r4,4
 5080c4c:	100b883a 	mov	r5,r2
 5080c50:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080c54:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;  	
 5080c58:	e0bffe17 	ldw	r2,-8(fp)
}
 5080c5c:	e037883a 	mov	sp,fp
 5080c60:	dfc00117 	ldw	ra,4(sp)
 5080c64:	df000017 	ldw	fp,0(sp)
 5080c68:	dec00204 	addi	sp,sp,8
 5080c6c:	f800283a 	ret

05080c70 <AUDIO_EnableSiteTone>:

bool AUDIO_EnableSiteTone(bool bEnable){
 5080c70:	defffb04 	addi	sp,sp,-20
 5080c74:	dfc00415 	stw	ra,16(sp)
 5080c78:	df000315 	stw	fp,12(sp)
 5080c7c:	df000304 	addi	fp,sp,12
 5080c80:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 5080c84:	00814274 	movhi	r2,1289
 5080c88:	108a4404 	addi	r2,r2,10512
 5080c8c:	1080020b 	ldhu	r2,8(r2)
 5080c90:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 5;
 5080c94:	00800804 	movi	r2,32
 5080c98:	e0bffd8d 	sth	r2,-10(fp)
    if (bEnable)
 5080c9c:	e0bfff17 	ldw	r2,-4(fp)
 5080ca0:	10000526 	beq	r2,zero,5080cb8 <AUDIO_EnableSiteTone+0x48>
        control |= mask;
 5080ca4:	e0fffd0b 	ldhu	r3,-12(fp)
 5080ca8:	e0bffd8b 	ldhu	r2,-10(fp)
 5080cac:	1884b03a 	or	r2,r3,r2
 5080cb0:	e0bffd0d 	sth	r2,-12(fp)
 5080cb4:	00000606 	br	5080cd0 <AUDIO_EnableSiteTone+0x60>
    else        
        control &= ~mask;
 5080cb8:	e0bffd8b 	ldhu	r2,-10(fp)
 5080cbc:	0084303a 	nor	r2,zero,r2
 5080cc0:	1007883a 	mov	r3,r2
 5080cc4:	e0bffd0b 	ldhu	r2,-12(fp)
 5080cc8:	1884703a 	and	r2,r3,r2
 5080ccc:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control); 
 5080cd0:	e0bffd0b 	ldhu	r2,-12(fp)
 5080cd4:	01000104 	movi	r4,4
 5080cd8:	100b883a 	mov	r5,r2
 5080cdc:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080ce0:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
 5080ce4:	e0bffe17 	ldw	r2,-8(fp)
}
 5080ce8:	e037883a 	mov	sp,fp
 5080cec:	dfc00117 	ldw	ra,4(sp)
 5080cf0:	df000017 	ldw	fp,0(sp)
 5080cf4:	dec00204 	addi	sp,sp,8
 5080cf8:	f800283a 	ret

05080cfc <aduio_RegWrite>:

/////////////////////////////////////////////////////////////////////////
///////////// Interla function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool aduio_RegWrite(alt_u8 reg_index, alt_u16 data16){
 5080cfc:	defff904 	addi	sp,sp,-28
 5080d00:	dfc00615 	stw	ra,24(sp)
 5080d04:	df000515 	stw	fp,20(sp)
 5080d08:	df000504 	addi	fp,sp,20
 5080d0c:	2007883a 	mov	r3,r4
 5080d10:	2805883a 	mov	r2,r5
 5080d14:	e0fffe05 	stb	r3,-8(fp)
 5080d18:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 data, control;
    if (reg_index <= 10)
 5080d1c:	e0bffe03 	ldbu	r2,-8(fp)
 5080d20:	108002e8 	cmpgeui	r2,r2,11
 5080d24:	1000071e 	bne	r2,zero,5080d44 <aduio_RegWrite+0x48>
        reg_file[reg_index] = data16;
 5080d28:	e0bffe03 	ldbu	r2,-8(fp)
 5080d2c:	00c14274 	movhi	r3,1289
 5080d30:	18ca4404 	addi	r3,r3,10512
 5080d34:	1085883a 	add	r2,r2,r2
 5080d38:	1885883a 	add	r2,r3,r2
 5080d3c:	e0ffff0b 	ldhu	r3,-4(fp)
 5080d40:	10c0000d 	sth	r3,0(r2)
    data = data16 & 0xFF;
 5080d44:	e0bfff0b 	ldhu	r2,-4(fp)
 5080d48:	e0bffc05 	stb	r2,-16(fp)
    control = (reg_index << 1) & 0xFE;
 5080d4c:	e0bffe03 	ldbu	r2,-8(fp)
 5080d50:	1085883a 	add	r2,r2,r2
 5080d54:	e0bffc45 	stb	r2,-15(fp)
    control |= ((data16 >> 8) & 0x01);
 5080d58:	e0bfff0b 	ldhu	r2,-4(fp)
 5080d5c:	1004d23a 	srli	r2,r2,8
 5080d60:	1080004c 	andi	r2,r2,1
 5080d64:	1007883a 	mov	r3,r2
 5080d68:	e0bffc43 	ldbu	r2,-15(fp)
 5080d6c:	1884b03a 	or	r2,r3,r2
 5080d70:	e0bffc45 	stb	r2,-15(fp)
    AUDIO_DEBUG(("[AUDIO] set audio reg[%02d] = %04Xh\r\n", reg_index, data16));
 5080d74:	e0fffe03 	ldbu	r3,-8(fp)
 5080d78:	e0bfff0b 	ldhu	r2,-4(fp)
 5080d7c:	01014274 	movhi	r4,1289
 5080d80:	2139b504 	addi	r4,r4,-6444
 5080d84:	180b883a 	mov	r5,r3
 5080d88:	100d883a 	mov	r6,r2
 5080d8c:	5081a480 	call	5081a48 <myprintf>
    bSuccess = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, I2C_AUDIO_ADDR, control, data);
 5080d90:	e0bffc43 	ldbu	r2,-15(fp)
 5080d94:	e0fffc03 	ldbu	r3,-16(fp)
 5080d98:	d8c00015 	stw	r3,0(sp)
 5080d9c:	01010034 	movhi	r4,1024
 5080da0:	21000c04 	addi	r4,r4,48
 5080da4:	01410034 	movhi	r5,1024
 5080da8:	29400804 	addi	r5,r5,32
 5080dac:	01800d04 	movi	r6,52
 5080db0:	100f883a 	mov	r7,r2
 5080db4:	5080f340 	call	5080f34 <I2C_Write>
 5080db8:	e0bffd15 	stw	r2,-12(fp)
    if (!bSuccess) 
 5080dbc:	e0bffd17 	ldw	r2,-12(fp)
 5080dc0:	1000031e 	bne	r2,zero,5080dd0 <aduio_RegWrite+0xd4>
        AUDIO_DEBUG(("[AUDIO] write reg fail!!!!\r\n"));
 5080dc4:	01014274 	movhi	r4,1289
 5080dc8:	2139bf04 	addi	r4,r4,-6404
 5080dcc:	5081a480 	call	5081a48 <myprintf>
    usleep(50*1000);  // wait audio chip read        
 5080dd0:	0130d414 	movui	r4,50000
 5080dd4:	508c51c0 	call	508c51c <usleep>
    return bSuccess;        
 5080dd8:	e0bffd17 	ldw	r2,-12(fp)
}
 5080ddc:	e037883a 	mov	sp,fp
 5080de0:	dfc00117 	ldw	ra,4(sp)
 5080de4:	df000017 	ldw	fp,0(sp)
 5080de8:	dec00204 	addi	sp,sp,8
 5080dec:	f800283a 	ret

05080df0 <AUDIO_DacFifoNotFull>:

/////////////////////////////////////////////////////////////////////////
///////////// Audio Play & Recor ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// check whether the dac-fifo is full.
bool AUDIO_DacFifoNotFull(void){
 5080df0:	defffe04 	addi	sp,sp,-8
 5080df4:	df000115 	stw	fp,4(sp)
 5080df8:	df000104 	addi	fp,sp,4
    bool bReady;
    bReady = AUDIO_DAC_FULL()?FALSE:TRUE;
 5080dfc:	00814434 	movhi	r2,1296
 5080e00:	10840d04 	addi	r2,r2,4148
 5080e04:	10800037 	ldwio	r2,0(r2)
 5080e08:	1080004c 	andi	r2,r2,1
 5080e0c:	1005003a 	cmpeq	r2,r2,zero
 5080e10:	10803fcc 	andi	r2,r2,255
 5080e14:	e0bfff15 	stw	r2,-4(fp)
    return bReady;
 5080e18:	e0bfff17 	ldw	r2,-4(fp)
}
 5080e1c:	e037883a 	mov	sp,fp
 5080e20:	df000017 	ldw	fp,0(sp)
 5080e24:	dec00104 	addi	sp,sp,4
 5080e28:	f800283a 	ret

05080e2c <AUDIO_DacFifoSetData>:

// call AUDIO_PlayIsReady to make sure the fifo is not full before call this function 
void AUDIO_DacFifoSetData(short ch_left, short ch_right){
 5080e2c:	defffd04 	addi	sp,sp,-12
 5080e30:	df000215 	stw	fp,8(sp)
 5080e34:	df000204 	addi	fp,sp,8
 5080e38:	2007883a 	mov	r3,r4
 5080e3c:	2805883a 	mov	r2,r5
 5080e40:	e0fffe0d 	sth	r3,-8(fp)
 5080e44:	e0bfff0d 	sth	r2,-4(fp)
    AUDIO_DAC_WRITE_L(ch_left);
 5080e48:	e0fffe0f 	ldh	r3,-8(fp)
 5080e4c:	00814434 	movhi	r2,1296
 5080e50:	10840804 	addi	r2,r2,4128
 5080e54:	10c00035 	stwio	r3,0(r2)
    AUDIO_DAC_WRITE_R(ch_right);
 5080e58:	e0ffff0f 	ldh	r3,-4(fp)
 5080e5c:	00814434 	movhi	r2,1296
 5080e60:	10840904 	addi	r2,r2,4132
 5080e64:	10c00035 	stwio	r3,0(r2)
}
 5080e68:	e037883a 	mov	sp,fp
 5080e6c:	df000017 	ldw	fp,0(sp)
 5080e70:	dec00104 	addi	sp,sp,4
 5080e74:	f800283a 	ret

05080e78 <AUDIO_AdcFifoNotEmpty>:

// wheck whether there is data available in adc-fifo
bool AUDIO_AdcFifoNotEmpty(void){
 5080e78:	defffe04 	addi	sp,sp,-8
 5080e7c:	df000115 	stw	fp,4(sp)
 5080e80:	df000104 	addi	fp,sp,4
    bool bReady;
    bReady = AUDIO_ADC_EMPTY()?FALSE:TRUE;
 5080e84:	00814434 	movhi	r2,1296
 5080e88:	10840d04 	addi	r2,r2,4148
 5080e8c:	10800037 	ldwio	r2,0(r2)
 5080e90:	1080008c 	andi	r2,r2,2
 5080e94:	1005003a 	cmpeq	r2,r2,zero
 5080e98:	10803fcc 	andi	r2,r2,255
 5080e9c:	e0bfff15 	stw	r2,-4(fp)
    return bReady;
 5080ea0:	e0bfff17 	ldw	r2,-4(fp)
}
 5080ea4:	e037883a 	mov	sp,fp
 5080ea8:	df000017 	ldw	fp,0(sp)
 5080eac:	dec00104 	addi	sp,sp,4
 5080eb0:	f800283a 	ret

05080eb4 <AUDIO_AdcFifoGetData>:


// make sure the data is available before call this fucntion
void AUDIO_AdcFifoGetData(short *pch_left, short *pch_right){
 5080eb4:	defffd04 	addi	sp,sp,-12
 5080eb8:	df000215 	stw	fp,8(sp)
 5080ebc:	df000204 	addi	fp,sp,8
 5080ec0:	e13ffe15 	stw	r4,-8(fp)
 5080ec4:	e17fff15 	stw	r5,-4(fp)
    *pch_left = AUDIO_ADC_READ_L();
 5080ec8:	00814434 	movhi	r2,1296
 5080ecc:	10840a04 	addi	r2,r2,4136
 5080ed0:	10800037 	ldwio	r2,0(r2)
 5080ed4:	1007883a 	mov	r3,r2
 5080ed8:	e0bffe17 	ldw	r2,-8(fp)
 5080edc:	10c0000d 	sth	r3,0(r2)
    *pch_right = AUDIO_ADC_READ_R();
 5080ee0:	00814434 	movhi	r2,1296
 5080ee4:	10840b04 	addi	r2,r2,4140
 5080ee8:	10800037 	ldwio	r2,0(r2)
 5080eec:	1007883a 	mov	r3,r2
 5080ef0:	e0bfff17 	ldw	r2,-4(fp)
 5080ef4:	10c0000d 	sth	r3,0(r2)
    
}
 5080ef8:	e037883a 	mov	sp,fp
 5080efc:	df000017 	ldw	fp,0(sp)
 5080f00:	dec00104 	addi	sp,sp,4
 5080f04:	f800283a 	ret

05080f08 <AUDIO_FifoClear>:

void AUDIO_FifoClear(void){
 5080f08:	deffff04 	addi	sp,sp,-4
 5080f0c:	df000015 	stw	fp,0(sp)
 5080f10:	d839883a 	mov	fp,sp
    AUDIO_FIFO_CLEAR();
 5080f14:	00c00044 	movi	r3,1
 5080f18:	00814434 	movhi	r2,1296
 5080f1c:	10840c04 	addi	r2,r2,4144
 5080f20:	10c00035 	stwio	r3,0(r2)
}
 5080f24:	e037883a 	mov	sp,fp
 5080f28:	df000017 	ldw	fp,0(sp)
 5080f2c:	dec00104 	addi	sp,sp,4
 5080f30:	f800283a 	ret

05080f34 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 5080f34:	defff804 	addi	sp,sp,-32
 5080f38:	dfc00715 	stw	ra,28(sp)
 5080f3c:	df000615 	stw	fp,24(sp)
 5080f40:	df000604 	addi	fp,sp,24
 5080f44:	e13ffb15 	stw	r4,-20(fp)
 5080f48:	e17ffc15 	stw	r5,-16(fp)
 5080f4c:	3007883a 	mov	r3,r6
 5080f50:	3805883a 	mov	r2,r7
 5080f54:	e1000217 	ldw	r4,8(fp)
 5080f58:	e0fffd05 	stb	r3,-12(fp)
 5080f5c:	e0bffe05 	stb	r2,-8(fp)
 5080f60:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
 5080f64:	00800044 	movi	r2,1
 5080f68:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 5080f6c:	e13ffb17 	ldw	r4,-20(fp)
 5080f70:	e17ffc17 	ldw	r5,-16(fp)
 5080f74:	50812d00 	call	50812d0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 5080f78:	e0bffd03 	ldbu	r2,-12(fp)
 5080f7c:	10803fcc 	andi	r2,r2,255
 5080f80:	e13ffb17 	ldw	r4,-20(fp)
 5080f84:	e17ffc17 	ldw	r5,-16(fp)
 5080f88:	100d883a 	mov	r6,r2
 5080f8c:	50813c40 	call	50813c4 <i2c_write>
 5080f90:	1000041e 	bne	r2,zero,5080fa4 <I2C_Write+0x70>
        bSuccess = FALSE;
 5080f94:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 5080f98:	01014274 	movhi	r4,1289
 5080f9c:	2139c704 	addi	r4,r4,-6372
 5080fa0:	5081a480 	call	5081a48 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 5080fa4:	e0bffa17 	ldw	r2,-24(fp)
 5080fa8:	10000a26 	beq	r2,zero,5080fd4 <I2C_Write+0xa0>
 5080fac:	e0bffe03 	ldbu	r2,-8(fp)
 5080fb0:	e13ffb17 	ldw	r4,-20(fp)
 5080fb4:	e17ffc17 	ldw	r5,-16(fp)
 5080fb8:	100d883a 	mov	r6,r2
 5080fbc:	50813c40 	call	50813c4 <i2c_write>
 5080fc0:	1000041e 	bne	r2,zero,5080fd4 <I2C_Write+0xa0>
        bSuccess = FALSE;
 5080fc4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 5080fc8:	01014274 	movhi	r4,1289
 5080fcc:	2139cf04 	addi	r4,r4,-6340
 5080fd0:	5081a480 	call	5081a48 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 5080fd4:	e0bffa17 	ldw	r2,-24(fp)
 5080fd8:	10000a26 	beq	r2,zero,5081004 <I2C_Write+0xd0>
 5080fdc:	e0bfff03 	ldbu	r2,-4(fp)
 5080fe0:	e13ffb17 	ldw	r4,-20(fp)
 5080fe4:	e17ffc17 	ldw	r5,-16(fp)
 5080fe8:	100d883a 	mov	r6,r2
 5080fec:	50813c40 	call	50813c4 <i2c_write>
 5080ff0:	1000041e 	bne	r2,zero,5081004 <I2C_Write+0xd0>
        bSuccess = FALSE;
 5080ff4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 5080ff8:	01014274 	movhi	r4,1289
 5080ffc:	2139d804 	addi	r4,r4,-6304
 5081000:	5081a480 	call	5081a48 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 5081004:	e13ffb17 	ldw	r4,-20(fp)
 5081008:	e17ffc17 	ldw	r5,-16(fp)
 508100c:	50813540 	call	5081354 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 5081010:	0106d604 	movi	r4,7000
 5081014:	508c51c0 	call	508c51c <usleep>
    
    return bSuccess;
 5081018:	e0bffa17 	ldw	r2,-24(fp)

    
}
 508101c:	e037883a 	mov	sp,fp
 5081020:	dfc00117 	ldw	ra,4(sp)
 5081024:	df000017 	ldw	fp,0(sp)
 5081028:	dec00204 	addi	sp,sp,8
 508102c:	f800283a 	ret

05081030 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 5081030:	defff904 	addi	sp,sp,-28
 5081034:	dfc00615 	stw	ra,24(sp)
 5081038:	df000515 	stw	fp,20(sp)
 508103c:	df000504 	addi	fp,sp,20
 5081040:	e13ffc15 	stw	r4,-16(fp)
 5081044:	e17ffd15 	stw	r5,-12(fp)
 5081048:	3007883a 	mov	r3,r6
 508104c:	3805883a 	mov	r2,r7
 5081050:	e0fffe05 	stb	r3,-8(fp)
 5081054:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 5081058:	00800044 	movi	r2,1
 508105c:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 5081060:	e13ffc17 	ldw	r4,-16(fp)
 5081064:	e17ffd17 	ldw	r5,-12(fp)
 5081068:	50812d00 	call	50812d0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 508106c:	e0bffe03 	ldbu	r2,-8(fp)
 5081070:	10803fcc 	andi	r2,r2,255
 5081074:	e13ffc17 	ldw	r4,-16(fp)
 5081078:	e17ffd17 	ldw	r5,-12(fp)
 508107c:	100d883a 	mov	r6,r2
 5081080:	50813c40 	call	50813c4 <i2c_write>
 5081084:	1000041e 	bne	r2,zero,5081098 <I2C_Read+0x68>
        bSuccess = FALSE;
 5081088:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 508108c:	01014274 	movhi	r4,1289
 5081090:	2139c704 	addi	r4,r4,-6372
 5081094:	5081a480 	call	5081a48 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 5081098:	e0bffb17 	ldw	r2,-20(fp)
 508109c:	10000a26 	beq	r2,zero,50810c8 <I2C_Read+0x98>
 50810a0:	e0bfff03 	ldbu	r2,-4(fp)
 50810a4:	e13ffc17 	ldw	r4,-16(fp)
 50810a8:	e17ffd17 	ldw	r5,-12(fp)
 50810ac:	100d883a 	mov	r6,r2
 50810b0:	50813c40 	call	50813c4 <i2c_write>
 50810b4:	1000041e 	bne	r2,zero,50810c8 <I2C_Read+0x98>
        bSuccess = FALSE;
 50810b8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 50810bc:	01014274 	movhi	r4,1289
 50810c0:	2139cf04 	addi	r4,r4,-6340
 50810c4:	5081a480 	call	5081a48 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 50810c8:	e13ffc17 	ldw	r4,-16(fp)
 50810cc:	e17ffd17 	ldw	r5,-12(fp)
 50810d0:	50812d00 	call	50812d0 <i2c_start>
    DeviceAddr |= 1; // Read
 50810d4:	e0bffe03 	ldbu	r2,-8(fp)
 50810d8:	10800054 	ori	r2,r2,1
 50810dc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 50810e0:	e0bffb17 	ldw	r2,-20(fp)
 50810e4:	10000b26 	beq	r2,zero,5081114 <I2C_Read+0xe4>
 50810e8:	e0bffe03 	ldbu	r2,-8(fp)
 50810ec:	10803fcc 	andi	r2,r2,255
 50810f0:	e13ffc17 	ldw	r4,-16(fp)
 50810f4:	e17ffd17 	ldw	r5,-12(fp)
 50810f8:	100d883a 	mov	r6,r2
 50810fc:	50813c40 	call	50813c4 <i2c_write>
 5081100:	1000041e 	bne	r2,zero,5081114 <I2C_Read+0xe4>
        bSuccess = FALSE;
 5081104:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 5081108:	01014274 	movhi	r4,1289
 508110c:	2139e004 	addi	r4,r4,-6272
 5081110:	5081a480 	call	5081a48 <myprintf>
    }
    
    if (bSuccess){
 5081114:	e0bffb17 	ldw	r2,-20(fp)
 5081118:	10000526 	beq	r2,zero,5081130 <I2C_Read+0x100>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 508111c:	e13ffc17 	ldw	r4,-16(fp)
 5081120:	e17ffd17 	ldw	r5,-12(fp)
 5081124:	e1800217 	ldw	r6,8(fp)
 5081128:	000f883a 	mov	r7,zero
 508112c:	50814f00 	call	50814f0 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 5081130:	e13ffc17 	ldw	r4,-16(fp)
 5081134:	e17ffd17 	ldw	r5,-12(fp)
 5081138:	50813540 	call	5081354 <i2c_stop>
    
    return bSuccess;
 508113c:	e0bffb17 	ldw	r2,-20(fp)
}
 5081140:	e037883a 	mov	sp,fp
 5081144:	dfc00117 	ldw	ra,4(sp)
 5081148:	df000017 	ldw	fp,0(sp)
 508114c:	dec00204 	addi	sp,sp,8
 5081150:	f800283a 	ret

05081154 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
 5081154:	defff604 	addi	sp,sp,-40
 5081158:	dfc00915 	stw	ra,36(sp)
 508115c:	df000815 	stw	fp,32(sp)
 5081160:	df000804 	addi	fp,sp,32
 5081164:	e13ffb15 	stw	r4,-20(fp)
 5081168:	e17ffc15 	stw	r5,-16(fp)
 508116c:	3005883a 	mov	r2,r6
 5081170:	e1fffe15 	stw	r7,-8(fp)
 5081174:	e0c00217 	ldw	r3,8(fp)
 5081178:	e0bffd05 	stb	r2,-12(fp)
 508117c:	e0ffff0d 	sth	r3,-4(fp)
    int i;
    bool bSuccess = TRUE;
 5081180:	00800044 	movi	r2,1
 5081184:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
 5081188:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 508118c:	e13ffb17 	ldw	r4,-20(fp)
 5081190:	e17ffc17 	ldw	r5,-16(fp)
 5081194:	50812d00 	call	50812d0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 5081198:	e0bffd03 	ldbu	r2,-12(fp)
 508119c:	10803fcc 	andi	r2,r2,255
 50811a0:	e13ffb17 	ldw	r4,-20(fp)
 50811a4:	e17ffc17 	ldw	r5,-16(fp)
 50811a8:	100d883a 	mov	r6,r2
 50811ac:	50813c40 	call	50813c4 <i2c_write>
 50811b0:	1000041e 	bne	r2,zero,50811c4 <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
 50811b4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 50811b8:	01014274 	movhi	r4,1289
 50811bc:	2139c704 	addi	r4,r4,-6372
 50811c0:	5081a480 	call	5081a48 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 50811c4:	e0bff917 	ldw	r2,-28(fp)
 50811c8:	10000a26 	beq	r2,zero,50811f4 <I2C_MultipleRead+0xa0>
 50811cc:	e0bffa03 	ldbu	r2,-24(fp)
 50811d0:	e13ffb17 	ldw	r4,-20(fp)
 50811d4:	e17ffc17 	ldw	r5,-16(fp)
 50811d8:	100d883a 	mov	r6,r2
 50811dc:	50813c40 	call	50813c4 <i2c_write>
 50811e0:	1000041e 	bne	r2,zero,50811f4 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
 50811e4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 50811e8:	01014274 	movhi	r4,1289
 50811ec:	2139cf04 	addi	r4,r4,-6340
 50811f0:	5081a480 	call	5081a48 <myprintf>
    }    
    if (bSuccess)        
 50811f4:	e0bff917 	ldw	r2,-28(fp)
 50811f8:	10000326 	beq	r2,zero,5081208 <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
 50811fc:	e13ffb17 	ldw	r4,-20(fp)
 5081200:	e17ffc17 	ldw	r5,-16(fp)
 5081204:	50812d00 	call	50812d0 <i2c_start>
    DeviceAddr |= 1; // Read
 5081208:	e0bffd03 	ldbu	r2,-12(fp)
 508120c:	10800054 	ori	r2,r2,1
 5081210:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 5081214:	e0bff917 	ldw	r2,-28(fp)
 5081218:	10000b26 	beq	r2,zero,5081248 <I2C_MultipleRead+0xf4>
 508121c:	e0bffd03 	ldbu	r2,-12(fp)
 5081220:	10803fcc 	andi	r2,r2,255
 5081224:	e13ffb17 	ldw	r4,-20(fp)
 5081228:	e17ffc17 	ldw	r5,-16(fp)
 508122c:	100d883a 	mov	r6,r2
 5081230:	50813c40 	call	50813c4 <i2c_write>
 5081234:	1000041e 	bne	r2,zero,5081248 <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
 5081238:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 508123c:	01014274 	movhi	r4,1289
 5081240:	2139e004 	addi	r4,r4,-6272
 5081244:	5081a480 	call	5081a48 <myprintf>
    }
    
    if (bSuccess){
 5081248:	e0bff917 	ldw	r2,-28(fp)
 508124c:	10001726 	beq	r2,zero,50812ac <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
 5081250:	e03ff815 	stw	zero,-32(fp)
 5081254:	00001006 	br	5081298 <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 5081258:	e0bff817 	ldw	r2,-32(fp)
 508125c:	e0fffe17 	ldw	r3,-8(fp)
 5081260:	1887883a 	add	r3,r3,r2
 5081264:	e0bfff0b 	ldhu	r2,-4(fp)
 5081268:	113fffc4 	addi	r4,r2,-1
 508126c:	e0bff817 	ldw	r2,-32(fp)
 5081270:	2084c03a 	cmpne	r2,r4,r2
 5081274:	10803fcc 	andi	r2,r2,255
 5081278:	e13ffb17 	ldw	r4,-20(fp)
 508127c:	e17ffc17 	ldw	r5,-16(fp)
 5081280:	180d883a 	mov	r6,r3
 5081284:	100f883a 	mov	r7,r2
 5081288:	50814f00 	call	50814f0 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 508128c:	e0bff817 	ldw	r2,-32(fp)
 5081290:	10800044 	addi	r2,r2,1
 5081294:	e0bff815 	stw	r2,-32(fp)
 5081298:	e0bfff0b 	ldhu	r2,-4(fp)
 508129c:	e0fff817 	ldw	r3,-32(fp)
 50812a0:	1880020e 	bge	r3,r2,50812ac <I2C_MultipleRead+0x158>
 50812a4:	e0bff917 	ldw	r2,-28(fp)
 50812a8:	103feb1e 	bne	r2,zero,5081258 <I2C_MultipleRead+0x104>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 50812ac:	e13ffb17 	ldw	r4,-20(fp)
 50812b0:	e17ffc17 	ldw	r5,-16(fp)
 50812b4:	50813540 	call	5081354 <i2c_stop>
    
    return bSuccess;    
 50812b8:	e0bff917 	ldw	r2,-28(fp)
    
}
 50812bc:	e037883a 	mov	sp,fp
 50812c0:	dfc00117 	ldw	ra,4(sp)
 50812c4:	df000017 	ldw	fp,0(sp)
 50812c8:	dec00204 	addi	sp,sp,8
 50812cc:	f800283a 	ret

050812d0 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 50812d0:	defffc04 	addi	sp,sp,-16
 50812d4:	dfc00315 	stw	ra,12(sp)
 50812d8:	df000215 	stw	fp,8(sp)
 50812dc:	df000204 	addi	fp,sp,8
 50812e0:	e13ffe15 	stw	r4,-8(fp)
 50812e4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 50812e8:	e0bfff17 	ldw	r2,-4(fp)
 50812ec:	10800104 	addi	r2,r2,4
 50812f0:	00c00044 	movi	r3,1
 50812f4:	10c00035 	stwio	r3,0(r2)
    
    
    
    // start condition 
    SDA_HIGH(data_base); // data high
 50812f8:	e0bfff17 	ldw	r2,-4(fp)
 50812fc:	00c00044 	movi	r3,1
 5081300:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 5081304:	e0bffe17 	ldw	r2,-8(fp)
 5081308:	00c00044 	movi	r3,1
 508130c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 5081310:	01000044 	movi	r4,1
 5081314:	508c51c0 	call	508c51c <usleep>
     
    SDA_LOW(data_base); // data low
 5081318:	e0bfff17 	ldw	r2,-4(fp)
 508131c:	0007883a 	mov	r3,zero
 5081320:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 5081324:	01000044 	movi	r4,1
 5081328:	508c51c0 	call	508c51c <usleep>
    SCL_LOW(clk_base); // clock low
 508132c:	e0bffe17 	ldw	r2,-8(fp)
 5081330:	0007883a 	mov	r3,zero
 5081334:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 5081338:	01000044 	movi	r4,1
 508133c:	508c51c0 	call	508c51c <usleep>
}
 5081340:	e037883a 	mov	sp,fp
 5081344:	dfc00117 	ldw	ra,4(sp)
 5081348:	df000017 	ldw	fp,0(sp)
 508134c:	dec00204 	addi	sp,sp,8
 5081350:	f800283a 	ret

05081354 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 5081354:	defffc04 	addi	sp,sp,-16
 5081358:	dfc00315 	stw	ra,12(sp)
 508135c:	df000215 	stw	fp,8(sp)
 5081360:	df000204 	addi	fp,sp,8
 5081364:	e13ffe15 	stw	r4,-8(fp)
 5081368:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 508136c:	e0bfff17 	ldw	r2,-4(fp)
 5081370:	10800104 	addi	r2,r2,4
 5081374:	00c00044 	movi	r3,1
 5081378:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
 508137c:	e0bfff17 	ldw	r2,-4(fp)
 5081380:	0007883a 	mov	r3,zero
 5081384:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 5081388:	e0bffe17 	ldw	r2,-8(fp)
 508138c:	00c00044 	movi	r3,1
 5081390:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 5081394:	01000044 	movi	r4,1
 5081398:	508c51c0 	call	508c51c <usleep>
    SDA_HIGH(data_base); // data high
 508139c:	e0bfff17 	ldw	r2,-4(fp)
 50813a0:	00c00044 	movi	r3,1
 50813a4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 50813a8:	01000044 	movi	r4,1
 50813ac:	508c51c0 	call	508c51c <usleep>
}
 50813b0:	e037883a 	mov	sp,fp
 50813b4:	dfc00117 	ldw	ra,4(sp)
 50813b8:	df000017 	ldw	fp,0(sp)
 50813bc:	dec00204 	addi	sp,sp,8
 50813c0:	f800283a 	ret

050813c4 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 50813c4:	defff804 	addi	sp,sp,-32
 50813c8:	dfc00715 	stw	ra,28(sp)
 50813cc:	df000615 	stw	fp,24(sp)
 50813d0:	df000604 	addi	fp,sp,24
 50813d4:	e13ffd15 	stw	r4,-12(fp)
 50813d8:	e17ffe15 	stw	r5,-8(fp)
 50813dc:	3005883a 	mov	r2,r6
 50813e0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 50813e4:	00bfe004 	movi	r2,-128
 50813e8:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 50813ec:	e0bffe17 	ldw	r2,-8(fp)
 50813f0:	10800104 	addi	r2,r2,4
 50813f4:	00c00044 	movi	r3,1
 50813f8:	10c00035 	stwio	r3,0(r2)
    
    for(i=0;i<8;i++){
 50813fc:	e03ffb15 	stw	zero,-20(fp)
 5081400:	00001f06 	br	5081480 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 5081404:	e0bffd17 	ldw	r2,-12(fp)
 5081408:	0007883a 	mov	r3,zero
 508140c:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 5081410:	e0ffff03 	ldbu	r3,-4(fp)
 5081414:	e0bffa03 	ldbu	r2,-24(fp)
 5081418:	1884703a 	and	r2,r3,r2
 508141c:	10803fcc 	andi	r2,r2,255
 5081420:	10000426 	beq	r2,zero,5081434 <i2c_write+0x70>
            SDA_HIGH(data_base);
 5081424:	e0bffe17 	ldw	r2,-8(fp)
 5081428:	00c00044 	movi	r3,1
 508142c:	10c00035 	stwio	r3,0(r2)
 5081430:	00000306 	br	5081440 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
 5081434:	e0bffe17 	ldw	r2,-8(fp)
 5081438:	0007883a 	mov	r3,zero
 508143c:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 5081440:	e0bffa03 	ldbu	r2,-24(fp)
 5081444:	1004d07a 	srli	r2,r2,1
 5081448:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
 508144c:	e0bffd17 	ldw	r2,-12(fp)
 5081450:	00c00044 	movi	r3,1
 5081454:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 5081458:	01000044 	movi	r4,1
 508145c:	508c51c0 	call	508c51c <usleep>
        SCL_LOW(clk_base);
 5081460:	e0bffd17 	ldw	r2,-12(fp)
 5081464:	0007883a 	mov	r3,zero
 5081468:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 508146c:	01000044 	movi	r4,1
 5081470:	508c51c0 	call	508c51c <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 5081474:	e0bffb17 	ldw	r2,-20(fp)
 5081478:	10800044 	addi	r2,r2,1
 508147c:	e0bffb15 	stw	r2,-20(fp)
 5081480:	e0bffb17 	ldw	r2,-20(fp)
 5081484:	10800210 	cmplti	r2,r2,8
 5081488:	103fde1e 	bne	r2,zero,5081404 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 508148c:	e0bffe17 	ldw	r2,-8(fp)
 5081490:	10800104 	addi	r2,r2,4
 5081494:	0007883a 	mov	r3,zero
 5081498:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 508149c:	e0bffd17 	ldw	r2,-12(fp)
 50814a0:	00c00044 	movi	r3,1
 50814a4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 50814a8:	01000044 	movi	r4,1
 50814ac:	508c51c0 	call	508c51c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 50814b0:	e0bffe17 	ldw	r2,-8(fp)
 50814b4:	10800037 	ldwio	r2,0(r2)
 50814b8:	1005003a 	cmpeq	r2,r2,zero
 50814bc:	10803fcc 	andi	r2,r2,255
 50814c0:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 50814c4:	e0bffd17 	ldw	r2,-12(fp)
 50814c8:	0007883a 	mov	r3,zero
 50814cc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 50814d0:	01000044 	movi	r4,1
 50814d4:	508c51c0 	call	508c51c <usleep>
    return bAck;
 50814d8:	e0bffc17 	ldw	r2,-16(fp)
}    
 50814dc:	e037883a 	mov	sp,fp
 50814e0:	dfc00117 	ldw	ra,4(sp)
 50814e4:	df000017 	ldw	fp,0(sp)
 50814e8:	dec00204 	addi	sp,sp,8
 50814ec:	f800283a 	ret

050814f0 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 50814f0:	defff804 	addi	sp,sp,-32
 50814f4:	dfc00715 	stw	ra,28(sp)
 50814f8:	df000615 	stw	fp,24(sp)
 50814fc:	df000604 	addi	fp,sp,24
 5081500:	e13ffc15 	stw	r4,-16(fp)
 5081504:	e17ffd15 	stw	r5,-12(fp)
 5081508:	e1bffe15 	stw	r6,-8(fp)
 508150c:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 5081510:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 5081514:	e0bffd17 	ldw	r2,-12(fp)
 5081518:	10800104 	addi	r2,r2,4
 508151c:	0007883a 	mov	r3,zero
 5081520:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 5081524:	e0bffc17 	ldw	r2,-16(fp)
 5081528:	0007883a 	mov	r3,zero
 508152c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 5081530:	01000044 	movi	r4,1
 5081534:	508c51c0 	call	508c51c <usleep>

    for(i=0;i<8;i++){
 5081538:	e03ffb15 	stw	zero,-20(fp)
 508153c:	00001606 	br	5081598 <i2c_read+0xa8>
        Data <<= 1;
 5081540:	e0bffa03 	ldbu	r2,-24(fp)
 5081544:	1085883a 	add	r2,r2,r2
 5081548:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 508154c:	e0bffc17 	ldw	r2,-16(fp)
 5081550:	00c00044 	movi	r3,1
 5081554:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 5081558:	01000044 	movi	r4,1
 508155c:	508c51c0 	call	508c51c <usleep>
        if (SDA_READ(data_base))  // read data   
 5081560:	e0bffd17 	ldw	r2,-12(fp)
 5081564:	10800037 	ldwio	r2,0(r2)
 5081568:	10000326 	beq	r2,zero,5081578 <i2c_read+0x88>
            Data |= 0x01;
 508156c:	e0bffa03 	ldbu	r2,-24(fp)
 5081570:	10800054 	ori	r2,r2,1
 5081574:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 5081578:	e0bffc17 	ldw	r2,-16(fp)
 508157c:	0007883a 	mov	r3,zero
 5081580:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 5081584:	01000044 	movi	r4,1
 5081588:	508c51c0 	call	508c51c <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 508158c:	e0bffb17 	ldw	r2,-20(fp)
 5081590:	10800044 	addi	r2,r2,1
 5081594:	e0bffb15 	stw	r2,-20(fp)
 5081598:	e0bffb17 	ldw	r2,-20(fp)
 508159c:	10800210 	cmplti	r2,r2,8
 50815a0:	103fe71e 	bne	r2,zero,5081540 <i2c_read+0x50>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 50815a4:	e0bffc17 	ldw	r2,-16(fp)
 50815a8:	0007883a 	mov	r3,zero
 50815ac:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 50815b0:	e0bffd17 	ldw	r2,-12(fp)
 50815b4:	10800104 	addi	r2,r2,4
 50815b8:	00c00044 	movi	r3,1
 50815bc:	10c00035 	stwio	r3,0(r2)
    if (bAck)
 50815c0:	e0bfff17 	ldw	r2,-4(fp)
 50815c4:	10000426 	beq	r2,zero,50815d8 <i2c_read+0xe8>
        SDA_LOW(data_base);
 50815c8:	e0bffd17 	ldw	r2,-12(fp)
 50815cc:	0007883a 	mov	r3,zero
 50815d0:	10c00035 	stwio	r3,0(r2)
 50815d4:	00000306 	br	50815e4 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
 50815d8:	e0bffd17 	ldw	r2,-12(fp)
 50815dc:	00c00044 	movi	r3,1
 50815e0:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 50815e4:	e0bffc17 	ldw	r2,-16(fp)
 50815e8:	00c00044 	movi	r3,1
 50815ec:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 50815f0:	01000044 	movi	r4,1
 50815f4:	508c51c0 	call	508c51c <usleep>
    SCL_LOW(clk_base); // clock low
 50815f8:	e0bffc17 	ldw	r2,-16(fp)
 50815fc:	0007883a 	mov	r3,zero
 5081600:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 5081604:	01000044 	movi	r4,1
 5081608:	508c51c0 	call	508c51c <usleep>
    SDA_LOW(data_base);  // data low
 508160c:	e0bffd17 	ldw	r2,-12(fp)
 5081610:	0007883a 	mov	r3,zero
 5081614:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 5081618:	01000044 	movi	r4,1
 508161c:	508c51c0 	call	508c51c <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 5081620:	e0bffe17 	ldw	r2,-8(fp)
 5081624:	e0fffa03 	ldbu	r3,-24(fp)
 5081628:	10c00005 	stb	r3,0(r2)
}
 508162c:	e037883a 	mov	sp,fp
 5081630:	dfc00117 	ldw	ra,4(sp)
 5081634:	df000017 	ldw	fp,0(sp)
 5081638:	dec00204 	addi	sp,sp,8
 508163c:	f800283a 	ret

05081640 <LED_Display>:
#define LED_INIT_MASK   (0x01 << 24)

#define LED_SET(mask)   IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, mask)


void LED_Display(alt_u32 Mask){ // 1: light, 0:unlight
 5081640:	defffd04 	addi	sp,sp,-12
 5081644:	df000215 	stw	fp,8(sp)
 5081648:	df000204 	addi	fp,sp,8
 508164c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 ThisMask;
    ThisMask = Mask;//~(Mask & 0x7FFFFFF);
 5081650:	e0bfff17 	ldw	r2,-4(fp)
 5081654:	e0bffe15 	stw	r2,-8(fp)
    LED_SET(ThisMask);  //0:ligh, 1:unlight
 5081658:	e0fffe17 	ldw	r3,-8(fp)
 508165c:	00810034 	movhi	r2,1024
 5081660:	10801404 	addi	r2,r2,80
 5081664:	10c00035 	stwio	r3,0(r2)
    
}
 5081668:	e037883a 	mov	sp,fp
 508166c:	df000017 	ldw	fp,0(sp)
 5081670:	dec00104 	addi	sp,sp,4
 5081674:	f800283a 	ret

05081678 <LED_AllOn>:


void LED_AllOn(void){
 5081678:	defffe04 	addi	sp,sp,-8
 508167c:	dfc00115 	stw	ra,4(sp)
 5081680:	df000015 	stw	fp,0(sp)
 5081684:	d839883a 	mov	fp,sp
    LED_Display(0xFFFFFFFF);       
 5081688:	013fffc4 	movi	r4,-1
 508168c:	50816400 	call	5081640 <LED_Display>
}
 5081690:	e037883a 	mov	sp,fp
 5081694:	dfc00117 	ldw	ra,4(sp)
 5081698:	df000017 	ldw	fp,0(sp)
 508169c:	dec00204 	addi	sp,sp,8
 50816a0:	f800283a 	ret

050816a4 <LED_AllOff>:

void LED_AllOff(void){
 50816a4:	defffe04 	addi	sp,sp,-8
 50816a8:	dfc00115 	stw	ra,4(sp)
 50816ac:	df000015 	stw	fp,0(sp)
 50816b0:	d839883a 	mov	fp,sp
    LED_Display(0x00);       
 50816b4:	0009883a 	mov	r4,zero
 50816b8:	50816400 	call	5081640 <LED_Display>
}
 50816bc:	e037883a 	mov	sp,fp
 50816c0:	dfc00117 	ldw	ra,4(sp)
 50816c4:	df000017 	ldw	fp,0(sp)
 50816c8:	dec00204 	addi	sp,sp,8
 50816cc:	f800283a 	ret

050816d0 <LED_LightCount>:


void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
 50816d0:	defffb04 	addi	sp,sp,-20
 50816d4:	dfc00415 	stw	ra,16(sp)
 50816d8:	df000315 	stw	fp,12(sp)
 50816dc:	df000304 	addi	fp,sp,12
 50816e0:	2005883a 	mov	r2,r4
 50816e4:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 Mask = 0;
 50816e8:	e03ffd15 	stw	zero,-12(fp)
    int i;
    for(i=0;i<LightCount;i++){
 50816ec:	e03ffe15 	stw	zero,-8(fp)
 50816f0:	00000906 	br	5081718 <LED_LightCount+0x48>
        Mask <<= 1;
 50816f4:	e0bffd17 	ldw	r2,-12(fp)
 50816f8:	1085883a 	add	r2,r2,r2
 50816fc:	e0bffd15 	stw	r2,-12(fp)
        Mask |= 0x01;
 5081700:	e0bffd17 	ldw	r2,-12(fp)
 5081704:	10800054 	ori	r2,r2,1
 5081708:	e0bffd15 	stw	r2,-12(fp)


void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
    alt_u32 Mask = 0;
    int i;
    for(i=0;i<LightCount;i++){
 508170c:	e0bffe17 	ldw	r2,-8(fp)
 5081710:	10800044 	addi	r2,r2,1
 5081714:	e0bffe15 	stw	r2,-8(fp)
 5081718:	e0bfff03 	ldbu	r2,-4(fp)
 508171c:	e0fffe17 	ldw	r3,-8(fp)
 5081720:	18bff416 	blt	r3,r2,50816f4 <LED_LightCount+0x24>
        Mask <<= 1;
        Mask |= 0x01;
    }
    LED_Display(Mask);  //0:ligh, 1:unlight
 5081724:	e13ffd17 	ldw	r4,-12(fp)
 5081728:	50816400 	call	5081640 <LED_Display>
    
}
 508172c:	e037883a 	mov	sp,fp
 5081730:	dfc00117 	ldw	ra,4(sp)
 5081734:	df000017 	ldw	fp,0(sp)
 5081738:	dec00204 	addi	sp,sp,8
 508173c:	f800283a 	ret

05081740 <SEG7_Clear>:
static    unsigned char szMap[] = {
        63, 6, 91, 79, 102, 109, 125, 7, 
        127, 111, 119, 124, 57, 94, 121, 113
    };  // 0,1,2,....9, a, b, c, d, e, f
    
void SEG7_Clear(void){
 5081740:	defffe04 	addi	sp,sp,-8
 5081744:	df000115 	stw	fp,4(sp)
 5081748:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
 508174c:	e03fff15 	stw	zero,-4(fp)
 5081750:	00000b06 	br	5081780 <SEG7_Clear+0x40>
        SEG7_SET(i, 0x00);
 5081754:	e0bfff17 	ldw	r2,-4(fp)
 5081758:	1085883a 	add	r2,r2,r2
 508175c:	1085883a 	add	r2,r2,r2
 5081760:	1007883a 	mov	r3,r2
 5081764:	00810034 	movhi	r2,1024
 5081768:	1885883a 	add	r2,r3,r2
 508176c:	0007883a 	mov	r3,zero
 5081770:	10c00035 	stwio	r3,0(r2)
        127, 111, 119, 124, 57, 94, 121, 113
    };  // 0,1,2,....9, a, b, c, d, e, f
    
void SEG7_Clear(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
 5081774:	e0bfff17 	ldw	r2,-4(fp)
 5081778:	10800044 	addi	r2,r2,1
 508177c:	e0bfff15 	stw	r2,-4(fp)
 5081780:	e0bfff17 	ldw	r2,-4(fp)
 5081784:	10800190 	cmplti	r2,r2,6
 5081788:	103ff21e 	bne	r2,zero,5081754 <SEG7_Clear+0x14>
        SEG7_SET(i, 0x00);
    }        
}
 508178c:	e037883a 	mov	sp,fp
 5081790:	df000017 	ldw	fp,0(sp)
 5081794:	dec00104 	addi	sp,sp,4
 5081798:	f800283a 	ret

0508179c <SEG7_Full>:
void SEG7_Full(void){
 508179c:	defffe04 	addi	sp,sp,-8
 50817a0:	df000115 	stw	fp,4(sp)
 50817a4:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
 50817a8:	e03fff15 	stw	zero,-4(fp)
 50817ac:	00000b06 	br	50817dc <SEG7_Full+0x40>
        SEG7_SET(i, 0xFF);
 50817b0:	e0bfff17 	ldw	r2,-4(fp)
 50817b4:	1085883a 	add	r2,r2,r2
 50817b8:	1085883a 	add	r2,r2,r2
 50817bc:	1007883a 	mov	r3,r2
 50817c0:	00810034 	movhi	r2,1024
 50817c4:	1885883a 	add	r2,r3,r2
 50817c8:	00c03fc4 	movi	r3,255
 50817cc:	10c00035 	stwio	r3,0(r2)
        SEG7_SET(i, 0x00);
    }        
}
void SEG7_Full(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
 50817d0:	e0bfff17 	ldw	r2,-4(fp)
 50817d4:	10800044 	addi	r2,r2,1
 50817d8:	e0bfff15 	stw	r2,-4(fp)
 50817dc:	e0bfff17 	ldw	r2,-4(fp)
 50817e0:	10800190 	cmplti	r2,r2,6
 50817e4:	103ff21e 	bne	r2,zero,50817b0 <SEG7_Full+0x14>
        SEG7_SET(i, 0xFF);
    }        
}
 50817e8:	e037883a 	mov	sp,fp
 50817ec:	df000017 	ldw	fp,0(sp)
 50817f0:	dec00104 	addi	sp,sp,4
 50817f4:	f800283a 	ret

050817f8 <SEG7_Number>:

void SEG7_Number(void){
 50817f8:	defffe04 	addi	sp,sp,-8
 50817fc:	df000115 	stw	fp,4(sp)
 5081800:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
 5081804:	e03fff15 	stw	zero,-4(fp)
 5081808:	00001006 	br	508184c <SEG7_Number+0x54>
        SEG7_SET(i, szMap[i]);
 508180c:	e0bfff17 	ldw	r2,-4(fp)
 5081810:	1085883a 	add	r2,r2,r2
 5081814:	1085883a 	add	r2,r2,r2
 5081818:	1007883a 	mov	r3,r2
 508181c:	00810034 	movhi	r2,1024
 5081820:	1885883a 	add	r2,r3,r2
 5081824:	01014274 	movhi	r4,1289
 5081828:	213d0004 	addi	r4,r4,-3072
 508182c:	e0ffff17 	ldw	r3,-4(fp)
 5081830:	20c7883a 	add	r3,r4,r3
 5081834:	18c00003 	ldbu	r3,0(r3)
 5081838:	18c03fcc 	andi	r3,r3,255
 508183c:	10c00035 	stwio	r3,0(r2)
    }        
}

void SEG7_Number(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
 5081840:	e0bfff17 	ldw	r2,-4(fp)
 5081844:	10800044 	addi	r2,r2,1
 5081848:	e0bfff15 	stw	r2,-4(fp)
 508184c:	e0bfff17 	ldw	r2,-4(fp)
 5081850:	10800190 	cmplti	r2,r2,6
 5081854:	103fed1e 	bne	r2,zero,508180c <SEG7_Number+0x14>
        SEG7_SET(i, szMap[i]);
    }        
}
 5081858:	e037883a 	mov	sp,fp
 508185c:	df000017 	ldw	fp,0(sp)
 5081860:	dec00104 	addi	sp,sp,4
 5081864:	f800283a 	ret

05081868 <SEG7_Hex>:

void SEG7_Hex(alt_u32 Data, alt_u8 point_mask){
 5081868:	defffb04 	addi	sp,sp,-20
 508186c:	df000415 	stw	fp,16(sp)
 5081870:	df000404 	addi	fp,sp,16
 5081874:	e13ffe15 	stw	r4,-8(fp)
 5081878:	2805883a 	mov	r2,r5
 508187c:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 mask = 0x01;
 5081880:	00800044 	movi	r2,1
 5081884:	e0bffc05 	stb	r2,-16(fp)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
 5081888:	e03ffc45 	stb	zero,-15(fp)
    for(i=0;i<SEG7_NUM;i++){
 508188c:	e03ffd15 	stw	zero,-12(fp)
 5081890:	00002106 	br	5081918 <SEG7_Hex+0xb0>
        seg_mask = szMap[Data & 0x0F];
 5081894:	e0bffe17 	ldw	r2,-8(fp)
 5081898:	108003cc 	andi	r2,r2,15
 508189c:	00c14274 	movhi	r3,1289
 50818a0:	18fd0004 	addi	r3,r3,-3072
 50818a4:	1885883a 	add	r2,r3,r2
 50818a8:	10800003 	ldbu	r2,0(r2)
 50818ac:	e0bffc45 	stb	r2,-15(fp)
        Data >>= 4;
 50818b0:	e0bffe17 	ldw	r2,-8(fp)
 50818b4:	1004d13a 	srli	r2,r2,4
 50818b8:	e0bffe15 	stw	r2,-8(fp)
        if (point_mask & mask)
 50818bc:	e0ffff03 	ldbu	r3,-4(fp)
 50818c0:	e0bffc03 	ldbu	r2,-16(fp)
 50818c4:	1884703a 	and	r2,r3,r2
 50818c8:	10803fcc 	andi	r2,r2,255
 50818cc:	10000426 	beq	r2,zero,50818e0 <SEG7_Hex+0x78>
            seg_mask |= 0x80;
 50818d0:	e0fffc43 	ldbu	r3,-15(fp)
 50818d4:	00bfe004 	movi	r2,-128
 50818d8:	1884b03a 	or	r2,r3,r2
 50818dc:	e0bffc45 	stb	r2,-15(fp)
        mask <<= 1;     
 50818e0:	e0bffc03 	ldbu	r2,-16(fp)
 50818e4:	1085883a 	add	r2,r2,r2
 50818e8:	e0bffc05 	stb	r2,-16(fp)
        SEG7_SET(i, seg_mask);
 50818ec:	e0bffd17 	ldw	r2,-12(fp)
 50818f0:	1085883a 	add	r2,r2,r2
 50818f4:	1085883a 	add	r2,r2,r2
 50818f8:	1007883a 	mov	r3,r2
 50818fc:	00810034 	movhi	r2,1024
 5081900:	1885883a 	add	r2,r3,r2
 5081904:	e0fffc43 	ldbu	r3,-15(fp)
 5081908:	10c00035 	stwio	r3,0(r2)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    for(i=0;i<SEG7_NUM;i++){
 508190c:	e0bffd17 	ldw	r2,-12(fp)
 5081910:	10800044 	addi	r2,r2,1
 5081914:	e0bffd15 	stw	r2,-12(fp)
 5081918:	e0bffd17 	ldw	r2,-12(fp)
 508191c:	10800190 	cmplti	r2,r2,6
 5081920:	103fdc1e 	bne	r2,zero,5081894 <SEG7_Hex+0x2c>
        if (point_mask & mask)
            seg_mask |= 0x80;
        mask <<= 1;     
        SEG7_SET(i, seg_mask);
    }        
}
 5081924:	e037883a 	mov	sp,fp
 5081928:	df000017 	ldw	fp,0(sp)
 508192c:	dec00104 	addi	sp,sp,4
 5081930:	f800283a 	ret

05081934 <SEG7_Decimal>:

void SEG7_Decimal(alt_u32 Data, alt_u8 point_mask){
 5081934:	defffa04 	addi	sp,sp,-24
 5081938:	dfc00515 	stw	ra,20(sp)
 508193c:	df000415 	stw	fp,16(sp)
 5081940:	df000404 	addi	fp,sp,16
 5081944:	e13ffe15 	stw	r4,-8(fp)
 5081948:	2805883a 	mov	r2,r5
 508194c:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 mask = 0x01;
 5081950:	00800044 	movi	r2,1
 5081954:	e0bffc05 	stb	r2,-16(fp)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
 5081958:	e03ffc45 	stb	zero,-15(fp)
    for(i=0;i<SEG7_NUM;i++){
 508195c:	e03ffd15 	stw	zero,-12(fp)
 5081960:	00002506 	br	50819f8 <SEG7_Decimal+0xc4>
        seg_mask = szMap[Data%10];
 5081964:	e0bffe17 	ldw	r2,-8(fp)
 5081968:	1009883a 	mov	r4,r2
 508196c:	01400284 	movi	r5,10
 5081970:	50827d00 	call	50827d0 <__umodsi3>
 5081974:	00c14274 	movhi	r3,1289
 5081978:	18fd0004 	addi	r3,r3,-3072
 508197c:	1885883a 	add	r2,r3,r2
 5081980:	10800003 	ldbu	r2,0(r2)
 5081984:	e0bffc45 	stb	r2,-15(fp)
        Data /= 10;
 5081988:	e0bffe17 	ldw	r2,-8(fp)
 508198c:	1009883a 	mov	r4,r2
 5081990:	01400284 	movi	r5,10
 5081994:	50827c80 	call	50827c8 <__udivsi3>
 5081998:	e0bffe15 	stw	r2,-8(fp)
        if (point_mask & mask)
 508199c:	e0ffff03 	ldbu	r3,-4(fp)
 50819a0:	e0bffc03 	ldbu	r2,-16(fp)
 50819a4:	1884703a 	and	r2,r3,r2
 50819a8:	10803fcc 	andi	r2,r2,255
 50819ac:	10000426 	beq	r2,zero,50819c0 <SEG7_Decimal+0x8c>
            seg_mask |= 0x80;
 50819b0:	e0fffc43 	ldbu	r3,-15(fp)
 50819b4:	00bfe004 	movi	r2,-128
 50819b8:	1884b03a 	or	r2,r3,r2
 50819bc:	e0bffc45 	stb	r2,-15(fp)
        mask <<= 1;   
 50819c0:	e0bffc03 	ldbu	r2,-16(fp)
 50819c4:	1085883a 	add	r2,r2,r2
 50819c8:	e0bffc05 	stb	r2,-16(fp)
        SEG7_SET(i, seg_mask);
 50819cc:	e0bffd17 	ldw	r2,-12(fp)
 50819d0:	1085883a 	add	r2,r2,r2
 50819d4:	1085883a 	add	r2,r2,r2
 50819d8:	1007883a 	mov	r3,r2
 50819dc:	00810034 	movhi	r2,1024
 50819e0:	1885883a 	add	r2,r3,r2
 50819e4:	e0fffc43 	ldbu	r3,-15(fp)
 50819e8:	10c00035 	stwio	r3,0(r2)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    for(i=0;i<SEG7_NUM;i++){
 50819ec:	e0bffd17 	ldw	r2,-12(fp)
 50819f0:	10800044 	addi	r2,r2,1
 50819f4:	e0bffd15 	stw	r2,-12(fp)
 50819f8:	e0bffd17 	ldw	r2,-12(fp)
 50819fc:	10800190 	cmplti	r2,r2,6
 5081a00:	103fd81e 	bne	r2,zero,5081964 <SEG7_Decimal+0x30>
            seg_mask |= 0x80;
        mask <<= 1;   
        SEG7_SET(i, seg_mask);
    }        
  
} 
 5081a04:	e037883a 	mov	sp,fp
 5081a08:	dfc00117 	ldw	ra,4(sp)
 5081a0c:	df000017 	ldw	fp,0(sp)
 5081a10:	dec00204 	addi	sp,sp,8
 5081a14:	f800283a 	ret

05081a18 <debug_output>:
    if (!UART_IsOpened())
        UART_Open();
    UART_WriteString(pMessage);  // UART debug
}
#else
void debug_output(char *pMessage){
 5081a18:	defffd04 	addi	sp,sp,-12
 5081a1c:	dfc00215 	stw	ra,8(sp)
 5081a20:	df000115 	stw	fp,4(sp)
 5081a24:	df000104 	addi	fp,sp,4
 5081a28:	e13fff15 	stw	r4,-4(fp)
    printf(pMessage);
 5081a2c:	e13fff17 	ldw	r4,-4(fp)
 5081a30:	50828040 	call	5082804 <printf>
}
 5081a34:	e037883a 	mov	sp,fp
 5081a38:	dfc00117 	ldw	ra,4(sp)
 5081a3c:	df000017 	ldw	fp,0(sp)
 5081a40:	dec00204 	addi	sp,sp,8
 5081a44:	f800283a 	ret

05081a48 <myprintf>:

#endif


int myprintf(char *format, ...){
 5081a48:	deff7804 	addi	sp,sp,-544
 5081a4c:	dfc08415 	stw	ra,528(sp)
 5081a50:	df008315 	stw	fp,524(sp)
 5081a54:	df008304 	addi	fp,sp,524
 5081a58:	e1400215 	stw	r5,8(fp)
 5081a5c:	e1800315 	stw	r6,12(fp)
 5081a60:	e1c00415 	stw	r7,16(fp)
 5081a64:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 5081a68:	e0800204 	addi	r2,fp,8
 5081a6c:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 5081a70:	e0bffe17 	ldw	r2,-8(fp)
 5081a74:	e0ff7e04 	addi	r3,fp,-520
 5081a78:	1809883a 	mov	r4,r3
 5081a7c:	01408004 	movi	r5,512
 5081a80:	e1bfff17 	ldw	r6,-4(fp)
 5081a84:	100f883a 	mov	r7,r2
 5081a88:	50849240 	call	5084924 <vsnprintf>
 5081a8c:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 5081a90:	e0bf7e04 	addi	r2,fp,-520
 5081a94:	1009883a 	mov	r4,r2
 5081a98:	5081a180 	call	5081a18 <debug_output>

    return rc;    
 5081a9c:	e0bf7d17 	ldw	r2,-524(fp)
}
 5081aa0:	e037883a 	mov	sp,fp
 5081aa4:	dfc00117 	ldw	ra,4(sp)
 5081aa8:	df000017 	ldw	fp,0(sp)
 5081aac:	dec00504 	addi	sp,sp,20
 5081ab0:	f800283a 	ret

05081ab4 <myprintf_hex_array>:


int myprintf_hex_array(unsigned char *pHex, int len){
 5081ab4:	defff704 	addi	sp,sp,-36
 5081ab8:	dfc00815 	stw	ra,32(sp)
 5081abc:	df000715 	stw	fp,28(sp)
 5081ac0:	df000704 	addi	fp,sp,28
 5081ac4:	e13ffe15 	stw	r4,-8(fp)
 5081ac8:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 5081acc:	e03ff915 	stw	zero,-28(fp)
 5081ad0:	00001106 	br	5081b18 <myprintf_hex_array+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
 5081ad4:	e0bff917 	ldw	r2,-28(fp)
 5081ad8:	e0fffe17 	ldw	r3,-8(fp)
 5081adc:	1885883a 	add	r2,r3,r2
 5081ae0:	10800003 	ldbu	r2,0(r2)
 5081ae4:	10803fcc 	andi	r2,r2,255
 5081ae8:	e0fffa04 	addi	r3,fp,-24
 5081aec:	1809883a 	mov	r4,r3
 5081af0:	01414274 	movhi	r5,1289
 5081af4:	2979e904 	addi	r5,r5,-6236
 5081af8:	100d883a 	mov	r6,r2
 5081afc:	50829300 	call	5082930 <sprintf>
        DEBUG((szText));
 5081b00:	e0bffa04 	addi	r2,fp,-24
 5081b04:	1009883a 	mov	r4,r2
 5081b08:	5081a480 	call	5081a48 <myprintf>


int myprintf_hex_array(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 5081b0c:	e0bff917 	ldw	r2,-28(fp)
 5081b10:	10800044 	addi	r2,r2,1
 5081b14:	e0bff915 	stw	r2,-28(fp)
 5081b18:	e0fff917 	ldw	r3,-28(fp)
 5081b1c:	e0bfff17 	ldw	r2,-4(fp)
 5081b20:	18bfec16 	blt	r3,r2,5081ad4 <myprintf_hex_array+0x20>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
 5081b24:	e0bfff17 	ldw	r2,-4(fp)
}
 5081b28:	e037883a 	mov	sp,fp
 5081b2c:	dfc00117 	ldw	ra,4(sp)
 5081b30:	df000017 	ldw	fp,0(sp)
 5081b34:	dec00204 	addi	sp,sp,8
 5081b38:	f800283a 	ret

05081b3c <myprintf_dword_array>:

int  myprintf_dword_array(unsigned int *pArray, int nElementCount){
 5081b3c:	defff704 	addi	sp,sp,-36
 5081b40:	dfc00815 	stw	ra,32(sp)
 5081b44:	df000715 	stw	fp,28(sp)
 5081b48:	df000704 	addi	fp,sp,28
 5081b4c:	e13ffe15 	stw	r4,-8(fp)
 5081b50:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 5081b54:	e03ff915 	stw	zero,-28(fp)
 5081b58:	00001206 	br	5081ba4 <myprintf_dword_array+0x68>
        sprintf(szText, "[%08X]", *(pArray+i));
 5081b5c:	e0bff917 	ldw	r2,-28(fp)
 5081b60:	1085883a 	add	r2,r2,r2
 5081b64:	1085883a 	add	r2,r2,r2
 5081b68:	e0fffe17 	ldw	r3,-8(fp)
 5081b6c:	1885883a 	add	r2,r3,r2
 5081b70:	10800017 	ldw	r2,0(r2)
 5081b74:	e0fffa04 	addi	r3,fp,-24
 5081b78:	1809883a 	mov	r4,r3
 5081b7c:	01414274 	movhi	r5,1289
 5081b80:	2979eb04 	addi	r5,r5,-6228
 5081b84:	100d883a 	mov	r6,r2
 5081b88:	50829300 	call	5082930 <sprintf>
        DEBUG((szText));
 5081b8c:	e0bffa04 	addi	r2,fp,-24
 5081b90:	1009883a 	mov	r4,r2
 5081b94:	5081a480 	call	5081a48 <myprintf>
}

int  myprintf_dword_array(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 5081b98:	e0bff917 	ldw	r2,-28(fp)
 5081b9c:	10800044 	addi	r2,r2,1
 5081ba0:	e0bff915 	stw	r2,-28(fp)
 5081ba4:	e0fff917 	ldw	r3,-28(fp)
 5081ba8:	e0bfff17 	ldw	r2,-4(fp)
 5081bac:	18bfeb16 	blt	r3,r2,5081b5c <myprintf_dword_array+0x20>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
 5081bb0:	e0bfff17 	ldw	r2,-4(fp)
}
 5081bb4:	e037883a 	mov	sp,fp
 5081bb8:	dfc00117 	ldw	ra,4(sp)
 5081bbc:	df000017 	ldw	fp,0(sp)
 5081bc0:	dec00204 	addi	sp,sp,8
 5081bc4:	f800283a 	ret

05081bc8 <ui_is_mic_record>:
int record_sample_rate;

///////////////////////////////////////////////////////////////////////////////
//////////// Internal function implement(body) ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool ui_is_mic_record(void){
 5081bc8:	defffe04 	addi	sp,sp,-8
 5081bcc:	df000115 	stw	fp,4(sp)
 5081bd0:	df000104 	addi	fp,sp,4
    bool bMicRecord;
    bMicRecord = (IORD(SW_BASE, 0) & 0x01)?FALSE:TRUE;
 5081bd4:	00810034 	movhi	r2,1024
 5081bd8:	10801004 	addi	r2,r2,64
 5081bdc:	10800037 	ldwio	r2,0(r2)
 5081be0:	1080004c 	andi	r2,r2,1
 5081be4:	1005003a 	cmpeq	r2,r2,zero
 5081be8:	10803fcc 	andi	r2,r2,255
 5081bec:	e0bfff15 	stw	r2,-4(fp)
    return bMicRecord;    
 5081bf0:	e0bfff17 	ldw	r2,-4(fp)
}
 5081bf4:	e037883a 	mov	sp,fp
 5081bf8:	df000017 	ldw	fp,0(sp)
 5081bfc:	dec00104 	addi	sp,sp,4
 5081c00:	f800283a 	ret

05081c04 <ui_is_mic_boost>:

bool ui_is_mic_boost(void){
 5081c04:	defffe04 	addi	sp,sp,-8
 5081c08:	df000115 	stw	fp,4(sp)
 5081c0c:	df000104 	addi	fp,sp,4
    bool bMicBoost;
    bMicBoost = (IORD(SW_BASE, 0) & (0x01 << 1))?TRUE:FALSE;
 5081c10:	00810034 	movhi	r2,1024
 5081c14:	10801004 	addi	r2,r2,64
 5081c18:	10800037 	ldwio	r2,0(r2)
 5081c1c:	1080008c 	andi	r2,r2,2
 5081c20:	1004c03a 	cmpne	r2,r2,zero
 5081c24:	10803fcc 	andi	r2,r2,255
 5081c28:	e0bfff15 	stw	r2,-4(fp)
    return bMicBoost;    
 5081c2c:	e0bfff17 	ldw	r2,-4(fp)
}
 5081c30:	e037883a 	mov	sp,fp
 5081c34:	df000017 	ldw	fp,0(sp)
 5081c38:	dec00104 	addi	sp,sp,4
 5081c3c:	f800283a 	ret

05081c40 <ui_is_dac_zero_cross>:

bool ui_is_dac_zero_cross(void){
 5081c40:	defffe04 	addi	sp,sp,-8
 5081c44:	df000115 	stw	fp,4(sp)
 5081c48:	df000104 	addi	fp,sp,4
    bool bZeroCross;
    bZeroCross = (IORD(SW_BASE, 0) & (0x01 << 2))?TRUE:FALSE;
 5081c4c:	00810034 	movhi	r2,1024
 5081c50:	10801004 	addi	r2,r2,64
 5081c54:	10800037 	ldwio	r2,0(r2)
 5081c58:	1080010c 	andi	r2,r2,4
 5081c5c:	1004c03a 	cmpne	r2,r2,zero
 5081c60:	10803fcc 	andi	r2,r2,255
 5081c64:	e0bfff15 	stw	r2,-4(fp)
    return bZeroCross;      
 5081c68:	e0bfff17 	ldw	r2,-4(fp)
}
 5081c6c:	e037883a 	mov	sp,fp
 5081c70:	df000017 	ldw	fp,0(sp)
 5081c74:	dec00104 	addi	sp,sp,4
 5081c78:	f800283a 	ret

05081c7c <ui_get_sample_rate>:

int ui_get_sample_rate(void){
 5081c7c:	defffd04 	addi	sp,sp,-12
 5081c80:	df000215 	stw	fp,8(sp)
 5081c84:	df000204 	addi	fp,sp,8
    int sample_rate = 96000;
 5081c88:	00800074 	movhi	r2,1
 5081c8c:	109dc004 	addi	r2,r2,30464
 5081c90:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 mask;
    mask = IORD(SW_BASE, 0);
 5081c94:	00810034 	movhi	r2,1024
 5081c98:	10801004 	addi	r2,r2,64
 5081c9c:	10800037 	ldwio	r2,0(r2)
 5081ca0:	e0bfff15 	stw	r2,-4(fp)
    mask = (mask >> 3) & 0x07;
 5081ca4:	e0bfff17 	ldw	r2,-4(fp)
 5081ca8:	1004d0fa 	srli	r2,r2,3
 5081cac:	108001cc 	andi	r2,r2,7
 5081cb0:	e0bfff15 	stw	r2,-4(fp)
    if (mask == 1)
 5081cb4:	e0bfff17 	ldw	r2,-4(fp)
 5081cb8:	10800058 	cmpnei	r2,r2,1
 5081cbc:	1000031e 	bne	r2,zero,5081ccc <ui_get_sample_rate+0x50>
        sample_rate = 48000;
 5081cc0:	00aee014 	movui	r2,48000
 5081cc4:	e0bffe15 	stw	r2,-8(fp)
 5081cc8:	00001106 	br	5081d10 <ui_get_sample_rate+0x94>
    else if (mask == 2)
 5081ccc:	e0bfff17 	ldw	r2,-4(fp)
 5081cd0:	10800098 	cmpnei	r2,r2,2
 5081cd4:	1000031e 	bne	r2,zero,5081ce4 <ui_get_sample_rate+0x68>
        sample_rate = 44100;
 5081cd8:	00ab1114 	movui	r2,44100
 5081cdc:	e0bffe15 	stw	r2,-8(fp)
 5081ce0:	00000b06 	br	5081d10 <ui_get_sample_rate+0x94>
    else if (mask == 3)
 5081ce4:	e0bfff17 	ldw	r2,-4(fp)
 5081ce8:	108000d8 	cmpnei	r2,r2,3
 5081cec:	1000031e 	bne	r2,zero,5081cfc <ui_get_sample_rate+0x80>
        sample_rate = 32000;
 5081cf0:	009f4004 	movi	r2,32000
 5081cf4:	e0bffe15 	stw	r2,-8(fp)
 5081cf8:	00000506 	br	5081d10 <ui_get_sample_rate+0x94>
    else if (mask == 4)
 5081cfc:	e0bfff17 	ldw	r2,-4(fp)
 5081d00:	10800118 	cmpnei	r2,r2,4
 5081d04:	1000021e 	bne	r2,zero,5081d10 <ui_get_sample_rate+0x94>
        sample_rate = 8000;
 5081d08:	0087d004 	movi	r2,8000
 5081d0c:	e0bffe15 	stw	r2,-8(fp)
    return sample_rate;      
 5081d10:	e0bffe17 	ldw	r2,-8(fp)
} 
 5081d14:	e037883a 	mov	sp,fp
 5081d18:	df000017 	ldw	fp,0(sp)
 5081d1c:	dec00104 	addi	sp,sp,4
 5081d20:	f800283a 	ret

05081d24 <button_monitor_isr>:

void button_monitor_isr(void* context, alt_u32 id){
 5081d24:	defffc04 	addi	sp,sp,-16
 5081d28:	df000315 	stw	fp,12(sp)
 5081d2c:	df000304 	addi	fp,sp,12
 5081d30:	e13ffe15 	stw	r4,-8(fp)
 5081d34:	e17fff15 	stw	r5,-4(fp)
    volatile alt_u32* pPressedMask = (volatile alt_u32*)context;
 5081d38:	e0bffe17 	ldw	r2,-8(fp)
 5081d3c:	e0bffd15 	stw	r2,-12(fp)
    *pPressedMask |= IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE) & 0x0F;  // 4-button 
 5081d40:	e0bffd17 	ldw	r2,-12(fp)
 5081d44:	10c00017 	ldw	r3,0(r2)
 5081d48:	00810034 	movhi	r2,1024
 5081d4c:	10801b04 	addi	r2,r2,108
 5081d50:	10800037 	ldwio	r2,0(r2)
 5081d54:	108003cc 	andi	r2,r2,15
 5081d58:	1886b03a 	or	r3,r3,r2
 5081d5c:	e0bffd17 	ldw	r2,-12(fp)
 5081d60:	10c00015 	stw	r3,0(r2)
    
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0); 
 5081d64:	0007883a 	mov	r3,zero
 5081d68:	00810034 	movhi	r2,1024
 5081d6c:	10801b04 	addi	r2,r2,108
 5081d70:	10c00035 	stwio	r3,0(r2)
}
 5081d74:	e037883a 	mov	sp,fp
 5081d78:	df000017 	ldw	fp,0(sp)
 5081d7c:	dec00104 	addi	sp,sp,4
 5081d80:	f800283a 	ret

05081d84 <button_monitor_start>:

bool button_monitor_start(volatile alt_u32 *pPressedMask){
 5081d84:	defffc04 	addi	sp,sp,-16
 5081d88:	dfc00315 	stw	ra,12(sp)
 5081d8c:	df000215 	stw	fp,8(sp)
 5081d90:	df000204 	addi	fp,sp,8
 5081d94:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
 5081d98:	00800044 	movi	r2,1
 5081d9c:	e0bffe15 	stw	r2,-8(fp)
    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0x0F); // 4-button
 5081da0:	00c003c4 	movi	r3,15
 5081da4:	00810034 	movhi	r2,1024
 5081da8:	10801a04 	addi	r2,r2,104
 5081dac:	10c00035 	stwio	r3,0(r2)
    
    // Reset the edge catpure register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0); 
 5081db0:	0007883a 	mov	r3,zero
 5081db4:	00810034 	movhi	r2,1024
 5081db8:	10801b04 	addi	r2,r2,108
 5081dbc:	10c00035 	stwio	r3,0(r2)
    
    // register IRQ
    if (bSuccess && (alt_irq_register(KEY_IRQ, (void *)pPressedMask, button_monitor_isr) != 0)){
 5081dc0:	e0bffe17 	ldw	r2,-8(fp)
 5081dc4:	10000a26 	beq	r2,zero,5081df0 <button_monitor_start+0x6c>
 5081dc8:	01000044 	movi	r4,1
 5081dcc:	e17fff17 	ldw	r5,-4(fp)
 5081dd0:	01814234 	movhi	r6,1288
 5081dd4:	31874904 	addi	r6,r6,7460
 5081dd8:	508bd680 	call	508bd68 <alt_irq_register>
 5081ddc:	10000426 	beq	r2,zero,5081df0 <button_monitor_start+0x6c>
        printf("[SW-MONITOR]register button IRQ fail\r\n");
 5081de0:	01014274 	movhi	r4,1289
 5081de4:	2139ed04 	addi	r4,r4,-6220
 5081de8:	50828c40 	call	50828c4 <puts>
        bSuccess = FALSE;
 5081dec:	e03ffe15 	stw	zero,-8(fp)
    }
    
    return bSuccess;        
 5081df0:	e0bffe17 	ldw	r2,-8(fp)
}
 5081df4:	e037883a 	mov	sp,fp
 5081df8:	dfc00117 	ldw	ra,4(sp)
 5081dfc:	df000017 	ldw	fp,0(sp)
 5081e00:	dec00204 	addi	sp,sp,8
 5081e04:	f800283a 	ret

05081e08 <init_audio>:




bool init_audio(AUDIO_FUNC audio_func){
 5081e08:	defffb04 	addi	sp,sp,-20
 5081e0c:	dfc00415 	stw	ra,16(sp)
 5081e10:	df000315 	stw	fp,12(sp)
 5081e14:	df000304 	addi	fp,sp,12
 5081e18:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
 5081e1c:	00800044 	movi	r2,1
 5081e20:	e0bffd15 	stw	r2,-12(fp)
    AUDIO_InterfaceActive(FALSE);
 5081e24:	0009883a 	mov	r4,zero
 5081e28:	508038c0 	call	508038c <AUDIO_InterfaceActive>
    //
    if (audio_func == MIC_RECORD){
 5081e2c:	e0bfff17 	ldw	r2,-4(fp)
 5081e30:	10000f1e 	bne	r2,zero,5081e70 <init_audio+0x68>
        bool bMicBoost;
        bMicBoost = ui_is_mic_boost();
 5081e34:	5081c040 	call	5081c04 <ui_is_mic_boost>
 5081e38:	e0bffe15 	stw	r2,-8(fp)
        AUDIO_SetInputSource(SOURCE_MIC);
 5081e3c:	0009883a 	mov	r4,zero
 5081e40:	508084c0 	call	508084c <AUDIO_SetInputSource>
        AUDIO_DacEnableSoftMute(TRUE);
 5081e44:	01000044 	movi	r4,1
 5081e48:	50806540 	call	5080654 <AUDIO_DacEnableSoftMute>
        AUDIO_AdcEnableHighPassFilter(FALSE);
 5081e4c:	0009883a 	mov	r4,zero
 5081e50:	508044c0 	call	508044c <AUDIO_AdcEnableHighPassFilter>
        AUDIO_MicBoost(bMicBoost);   
 5081e54:	e13ffe17 	ldw	r4,-8(fp)
 5081e58:	50803d40 	call	50803d4 <AUDIO_MicBoost>
        AUDIO_MicMute(FALSE);
 5081e5c:	0009883a 	mov	r4,zero
 5081e60:	50806e00 	call	50806e0 <AUDIO_MicMute>
        AUDIO_LineInMute(TRUE);
 5081e64:	01000044 	movi	r4,1
 5081e68:	508076c0 	call	508076c <AUDIO_LineInMute>
 5081e6c:	00002606 	br	5081f08 <init_audio+0x100>
    }else if (audio_func == LINEIN_RECORD){
 5081e70:	e0bfff17 	ldw	r2,-4(fp)
 5081e74:	10800058 	cmpnei	r2,r2,1
 5081e78:	10000e1e 	bne	r2,zero,5081eb4 <init_audio+0xac>
        AUDIO_SetInputSource(SOURCE_LINEIN);
 5081e7c:	01000044 	movi	r4,1
 5081e80:	508084c0 	call	508084c <AUDIO_SetInputSource>
        AUDIO_DacEnableSoftMute(TRUE);
 5081e84:	01000044 	movi	r4,1
 5081e88:	50806540 	call	5080654 <AUDIO_DacEnableSoftMute>
        AUDIO_AdcEnableHighPassFilter(FALSE);
 5081e8c:	0009883a 	mov	r4,zero
 5081e90:	508044c0 	call	508044c <AUDIO_AdcEnableHighPassFilter>
        AUDIO_MicMute(TRUE);
 5081e94:	01000044 	movi	r4,1
 5081e98:	50806e00 	call	50806e0 <AUDIO_MicMute>
        AUDIO_LineInMute(FALSE);
 5081e9c:	0009883a 	mov	r4,zero
 5081ea0:	508076c0 	call	508076c <AUDIO_LineInMute>
        AUDIO_SetLineInVol(0x17, 0x17);  // max 0x1F, min:0; 0x17: 0dB (assume max input is 2.0v rms)
 5081ea4:	010005c4 	movi	r4,23
 5081ea8:	014005c4 	movi	r5,23
 5081eac:	50809c40 	call	50809c4 <AUDIO_SetLineInVol>
 5081eb0:	00001506 	br	5081f08 <init_audio+0x100>
    }else if (audio_func == LINEOUT_PLAY){
 5081eb4:	e0bfff17 	ldw	r2,-4(fp)
 5081eb8:	10800098 	cmpnei	r2,r2,2
 5081ebc:	1000121e 	bne	r2,zero,5081f08 <init_audio+0x100>
        AUDIO_DacEnableSoftMute(TRUE);
 5081ec0:	01000044 	movi	r4,1
 5081ec4:	50806540 	call	5080654 <AUDIO_DacEnableSoftMute>
        AUDIO_MicBoost(FALSE);   
 5081ec8:	0009883a 	mov	r4,zero
 5081ecc:	50803d40 	call	50803d4 <AUDIO_MicBoost>
        AUDIO_MicMute(TRUE);
 5081ed0:	01000044 	movi	r4,1
 5081ed4:	50806e00 	call	50806e0 <AUDIO_MicMute>
        AUDIO_LineInMute(FALSE);
 5081ed8:	0009883a 	mov	r4,zero
 5081edc:	508076c0 	call	508076c <AUDIO_LineInMute>
        AUDIO_DacEnableSoftMute(FALSE);
 5081ee0:	0009883a 	mov	r4,zero
 5081ee4:	50806540 	call	5080654 <AUDIO_DacEnableSoftMute>
        //AUDIO_DacDeemphasisControl(DEEMPHASIS_48K);
        AUDIO_DacEnableZeroCross(ui_is_dac_zero_cross());
 5081ee8:	5081c400 	call	5081c40 <ui_is_dac_zero_cross>
 5081eec:	1009883a 	mov	r4,r2
 5081ef0:	50805740 	call	5080574 <AUDIO_DacEnableZeroCross>
        AUDIO_SetLineOutVol(LINEOUT_DEFUALT_VOL, LINEOUT_DEFUALT_VOL); // max 7F, min: 30, 0x79: 0 db
 5081ef4:	01001e44 	movi	r4,121
 5081ef8:	01401e44 	movi	r5,121
 5081efc:	5080ad40 	call	5080ad4 <AUDIO_SetLineOutVol>
        AUDIO_DacEnableSoftMute(FALSE);
 5081f00:	0009883a 	mov	r4,zero
 5081f04:	50806540 	call	5080654 <AUDIO_DacEnableSoftMute>
    }
    
    if (record_sample_rate == 8000)
 5081f08:	d0a6ab17 	ldw	r2,-25940(gp)
 5081f0c:	1087d018 	cmpnei	r2,r2,8000
 5081f10:	1000031e 	bne	r2,zero,5081f20 <init_audio+0x118>
        AUDIO_SetSampleRate(RATE_ADC8K_DAC8K);
 5081f14:	010000c4 	movi	r4,3
 5081f18:	50808dc0 	call	50808dc <AUDIO_SetSampleRate>
 5081f1c:	00001406 	br	5081f70 <init_audio+0x168>
    else if (record_sample_rate == 32000)
 5081f20:	d0a6ab17 	ldw	r2,-25940(gp)
 5081f24:	109f4018 	cmpnei	r2,r2,32000
 5081f28:	1000031e 	bne	r2,zero,5081f38 <init_audio+0x130>
        AUDIO_SetSampleRate(RATE_ADC32K_DAC32K);
 5081f2c:	01000104 	movi	r4,4
 5081f30:	50808dc0 	call	50808dc <AUDIO_SetSampleRate>
 5081f34:	00000e06 	br	5081f70 <init_audio+0x168>
    else if (record_sample_rate == 48000)
 5081f38:	d0e6ab17 	ldw	r3,-25940(gp)
 5081f3c:	00aee014 	movui	r2,48000
 5081f40:	1880031e 	bne	r3,r2,5081f50 <init_audio+0x148>
        AUDIO_SetSampleRate(RATE_ADC48K_DAC48K);
 5081f44:	0009883a 	mov	r4,zero
 5081f48:	50808dc0 	call	50808dc <AUDIO_SetSampleRate>
 5081f4c:	00000806 	br	5081f70 <init_audio+0x168>
    else if (record_sample_rate == 44100)
 5081f50:	d0e6ab17 	ldw	r3,-25940(gp)
 5081f54:	00ab1114 	movui	r2,44100
 5081f58:	1880031e 	bne	r3,r2,5081f68 <init_audio+0x160>
        AUDIO_SetSampleRate(RATE_ADC44K1_DAC44K1);
 5081f5c:	01000184 	movi	r4,6
 5081f60:	50808dc0 	call	50808dc <AUDIO_SetSampleRate>
 5081f64:	00000206 	br	5081f70 <init_audio+0x168>
    else    
        AUDIO_SetSampleRate(RATE_ADC96K_DAC96K);
 5081f68:	01000144 	movi	r4,5
 5081f6c:	50808dc0 	call	50808dc <AUDIO_SetSampleRate>
    //
    AUDIO_InterfaceActive(TRUE);
 5081f70:	01000044 	movi	r4,1
 5081f74:	508038c0 	call	508038c <AUDIO_InterfaceActive>
    
    return bSuccess;             
 5081f78:	e0bffd17 	ldw	r2,-12(fp)
}
 5081f7c:	e037883a 	mov	sp,fp
 5081f80:	dfc00117 	ldw	ra,4(sp)
 5081f84:	df000017 	ldw	fp,0(sp)
 5081f88:	dec00204 	addi	sp,sp,8
 5081f8c:	f800283a 	ret

05081f90 <display_time_elapsed>:


void display_time_elapsed(alt_u32 sample_num){
 5081f90:	defffc04 	addi	sp,sp,-16
 5081f94:	dfc00315 	stw	ra,12(sp)
 5081f98:	df000215 	stw	fp,8(sp)
 5081f9c:	df000204 	addi	fp,sp,8
 5081fa0:	e13fff15 	stw	r4,-4(fp)
    // assume sample rate is 48K
    alt_u32 time;
    time = sample_num * 100 / record_sample_rate;
 5081fa4:	e0bfff17 	ldw	r2,-4(fp)
 5081fa8:	10c01924 	muli	r3,r2,100
 5081fac:	d0a6ab17 	ldw	r2,-25940(gp)
 5081fb0:	1809883a 	mov	r4,r3
 5081fb4:	100b883a 	mov	r5,r2
 5081fb8:	50827c80 	call	50827c8 <__udivsi3>
 5081fbc:	e0bffe15 	stw	r2,-8(fp)
    SEG7_Decimal(time, 0x04);
 5081fc0:	e13ffe17 	ldw	r4,-8(fp)
 5081fc4:	01400104 	movi	r5,4
 5081fc8:	50819340 	call	5081934 <SEG7_Decimal>
}
 5081fcc:	e037883a 	mov	sp,fp
 5081fd0:	dfc00117 	ldw	ra,4(sp)
 5081fd4:	df000017 	ldw	fp,0(sp)
 5081fd8:	dec00204 	addi	sp,sp,8
 5081fdc:	f800283a 	ret

05081fe0 <show_power>:

void show_power(short sample){
 5081fe0:	defffc04 	addi	sp,sp,-16
 5081fe4:	dfc00315 	stw	ra,12(sp)
 5081fe8:	df000215 	stw	fp,8(sp)
 5081fec:	df000204 	addi	fp,sp,8
 5081ff0:	2005883a 	mov	r2,r4
 5081ff4:	e0bfff0d 	sth	r2,-4(fp)
    static alt_u32 sum = 0;
    static alt_u16   cnt = 0;
    alt_u16 power = 0;
 5081ff8:	e03ffe0d 	sth	zero,-8(fp)
    sum += (sample >= 0)?sample:-sample;
 5081ffc:	e0bfff0f 	ldh	r2,-4(fp)
 5082000:	10000216 	blt	r2,zero,508200c <show_power+0x2c>
 5082004:	e0bfff0f 	ldh	r2,-4(fp)
 5082008:	00000206 	br	5082014 <show_power+0x34>
 508200c:	e0bfff0f 	ldh	r2,-4(fp)
 5082010:	0085c83a 	sub	r2,zero,r2
 5082014:	d0e6a917 	ldw	r3,-25948(gp)
 5082018:	10c5883a 	add	r2,r2,r3
 508201c:	d0a6a915 	stw	r2,-25948(gp)
    cnt++;
 5082020:	d0a6aa0b 	ldhu	r2,-25944(gp)
 5082024:	10800044 	addi	r2,r2,1
 5082028:	d0a6aa0d 	sth	r2,-25944(gp)
    if (cnt == 32){
 508202c:	d0a6aa0b 	ldhu	r2,-25944(gp)
 5082030:	10bfffcc 	andi	r2,r2,65535
 5082034:	10800818 	cmpnei	r2,r2,32
 5082038:	1000091e 	bne	r2,zero,5082060 <show_power+0x80>
        power = sum >> 13;
 508203c:	d0a6a917 	ldw	r2,-25948(gp)
 5082040:	1004d37a 	srli	r2,r2,13
 5082044:	e0bffe0d 	sth	r2,-8(fp)
        LED_LightCount(power); 
 5082048:	e0bffe0b 	ldhu	r2,-8(fp)
 508204c:	10803fcc 	andi	r2,r2,255
 5082050:	1009883a 	mov	r4,r2
 5082054:	50816d00 	call	50816d0 <LED_LightCount>
        sum = 0;
 5082058:	d026a915 	stw	zero,-25948(gp)
        cnt = 0;
 508205c:	d026aa0d 	sth	zero,-25944(gp)
    }
}
 5082060:	e037883a 	mov	sp,fp
 5082064:	dfc00117 	ldw	ra,4(sp)
 5082068:	df000017 	ldw	fp,0(sp)
 508206c:	dec00204 	addi	sp,sp,8
 5082070:	f800283a 	ret

05082074 <init>:


bool init(void){
 5082074:	defffd04 	addi	sp,sp,-12
 5082078:	dfc00215 	stw	ra,8(sp)
 508207c:	df000115 	stw	fp,4(sp)
 5082080:	df000104 	addi	fp,sp,4
    bool bSuccess = TRUE;
 5082084:	00800044 	movi	r2,1
 5082088:	e0bfff15 	stw	r2,-4(fp)
    
    SEG7_Clear();
 508208c:	50817400 	call	5081740 <SEG7_Clear>


    SEG7_Decimal(0x00000000, 0x00);
 5082090:	0009883a 	mov	r4,zero
 5082094:	000b883a 	mov	r5,zero
 5082098:	50819340 	call	5081934 <SEG7_Decimal>

    // prepare    
    if (!AUDIO_Init()){
 508209c:	50802040 	call	5080204 <AUDIO_Init>
 50820a0:	1000041e 	bne	r2,zero,50820b4 <init+0x40>

        printf("Audio Init Error\r\n");
 50820a4:	01014274 	movhi	r4,1289
 50820a8:	2139f704 	addi	r4,r4,-6180
 50820ac:	50828c40 	call	50828c4 <puts>
        bSuccess = FALSE;
 50820b0:	e03fff15 	stw	zero,-4(fp)
    }
    
        
    return bSuccess;
 50820b4:	e0bfff17 	ldw	r2,-4(fp)
}
 50820b8:	e037883a 	mov	sp,fp
 50820bc:	dfc00117 	ldw	ra,4(sp)
 50820c0:	df000017 	ldw	fp,0(sp)
 50820c4:	dec00204 	addi	sp,sp,8
 50820c8:	f800283a 	ret

050820cc <dump_record_data>:

void dump_record_data(alt_u32 *pData, alt_u32 len){
 50820cc:	defff804 	addi	sp,sp,-32
 50820d0:	dfc00715 	stw	ra,28(sp)
 50820d4:	df000615 	stw	fp,24(sp)
 50820d8:	df000604 	addi	fp,sp,24
 50820dc:	e13ffe15 	stw	r4,-8(fp)
 50820e0:	e17fff15 	stw	r5,-4(fp)
    short sample_l, sample_r, sample_max = 0;
 50820e4:	e03ffa0d 	sth	zero,-24(fp)
    alt_u32 data;
    int i;
    //return ;
    for(i=0;i<len;i++){
 50820e8:	e03ffb15 	stw	zero,-20(fp)
 50820ec:	00002e06 	br	50821a8 <dump_record_data+0xdc>
        data = *pData++;
 50820f0:	e0bffe17 	ldw	r2,-8(fp)
 50820f4:	10800017 	ldw	r2,0(r2)
 50820f8:	e0bffc15 	stw	r2,-16(fp)
 50820fc:	e0bffe17 	ldw	r2,-8(fp)
 5082100:	10800104 	addi	r2,r2,4
 5082104:	e0bffe15 	stw	r2,-8(fp)
        sample_l = (short)((data >> 16) & 0xFFFF); 
 5082108:	e0bffc17 	ldw	r2,-16(fp)
 508210c:	1004d43a 	srli	r2,r2,16
 5082110:	e0bffd0d 	sth	r2,-12(fp)
        sample_r = (short)(data & 0xFFFF);
 5082114:	e0bffc17 	ldw	r2,-16(fp)
 5082118:	e0bffd8d 	sth	r2,-10(fp)
        //printf("[%d]%d/%d\n", i, sample_l, sample_r);
        if (sample_l > 0 && sample_max <  sample_l)
 508211c:	e0bffd0f 	ldh	r2,-12(fp)
 5082120:	0080050e 	bge	zero,r2,5082138 <dump_record_data+0x6c>
 5082124:	e0fffa0f 	ldh	r3,-24(fp)
 5082128:	e0bffd0f 	ldh	r2,-12(fp)
 508212c:	1880020e 	bge	r3,r2,5082138 <dump_record_data+0x6c>
            sample_max = sample_l;
 5082130:	e0bffd0b 	ldhu	r2,-12(fp)
 5082134:	e0bffa0d 	sth	r2,-24(fp)
        if (sample_l < 0 && sample_max <  -sample_l)
 5082138:	e0bffd0f 	ldh	r2,-12(fp)
 508213c:	1000070e 	bge	r2,zero,508215c <dump_record_data+0x90>
 5082140:	e0fffa0f 	ldh	r3,-24(fp)
 5082144:	e0bffd0f 	ldh	r2,-12(fp)
 5082148:	0085c83a 	sub	r2,zero,r2
 508214c:	1880030e 	bge	r3,r2,508215c <dump_record_data+0x90>
            sample_max = -sample_l;
 5082150:	e0bffd0b 	ldhu	r2,-12(fp)
 5082154:	0085c83a 	sub	r2,zero,r2
 5082158:	e0bffa0d 	sth	r2,-24(fp)
        if (sample_r > 0 && sample_max <  sample_r)
 508215c:	e0bffd8f 	ldh	r2,-10(fp)
 5082160:	0080050e 	bge	zero,r2,5082178 <dump_record_data+0xac>
 5082164:	e0fffa0f 	ldh	r3,-24(fp)
 5082168:	e0bffd8f 	ldh	r2,-10(fp)
 508216c:	1880020e 	bge	r3,r2,5082178 <dump_record_data+0xac>
            sample_max = sample_r;
 5082170:	e0bffd8b 	ldhu	r2,-10(fp)
 5082174:	e0bffa0d 	sth	r2,-24(fp)
        if (sample_r < 0 && sample_max <  -sample_r)
 5082178:	e0bffd8f 	ldh	r2,-10(fp)
 508217c:	1000070e 	bge	r2,zero,508219c <dump_record_data+0xd0>
 5082180:	e0fffa0f 	ldh	r3,-24(fp)
 5082184:	e0bffd8f 	ldh	r2,-10(fp)
 5082188:	0085c83a 	sub	r2,zero,r2
 508218c:	1880030e 	bge	r3,r2,508219c <dump_record_data+0xd0>
            sample_max = -sample_r;
 5082190:	e0bffd8b 	ldhu	r2,-10(fp)
 5082194:	0085c83a 	sub	r2,zero,r2
 5082198:	e0bffa0d 	sth	r2,-24(fp)
void dump_record_data(alt_u32 *pData, alt_u32 len){
    short sample_l, sample_r, sample_max = 0;
    alt_u32 data;
    int i;
    //return ;
    for(i=0;i<len;i++){
 508219c:	e0bffb17 	ldw	r2,-20(fp)
 50821a0:	10800044 	addi	r2,r2,1
 50821a4:	e0bffb15 	stw	r2,-20(fp)
 50821a8:	e0fffb17 	ldw	r3,-20(fp)
 50821ac:	e0bfff17 	ldw	r2,-4(fp)
 50821b0:	18bfcf36 	bltu	r3,r2,50820f0 <dump_record_data+0x24>
        if (sample_r > 0 && sample_max <  sample_r)
            sample_max = sample_r;
        if (sample_r < 0 && sample_max <  -sample_r)
            sample_max = -sample_r;
    }
    printf("max=%d\n", sample_max);
 50821b4:	e0bffa0f 	ldh	r2,-24(fp)
 50821b8:	01014274 	movhi	r4,1289
 50821bc:	2139fc04 	addi	r4,r4,-6160
 50821c0:	100b883a 	mov	r5,r2
 50821c4:	50828040 	call	5082804 <printf>
}
 50821c8:	e037883a 	mov	sp,fp
 50821cc:	dfc00117 	ldw	ra,4(sp)
 50821d0:	df000017 	ldw	fp,0(sp)
 50821d4:	dec00204 	addi	sp,sp,8
 50821d8:	f800283a 	ret

050821dc <show_menu>:
    "  LED:  Display audio singal strength.\n",
    "  SEG7: Display time elapsed for playing/recording.\n"
    "\n\n"
};

void show_menu(void){
 50821dc:	defffd04 	addi	sp,sp,-12
 50821e0:	dfc00215 	stw	ra,8(sp)
 50821e4:	df000115 	stw	fp,4(sp)
 50821e8:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<sizeof(szMenu)/sizeof(szMenu[0]);i++)
 50821ec:	e03fff15 	stw	zero,-4(fp)
 50821f0:	00000a06 	br	508221c <show_menu+0x40>
        printf(szMenu[i]);
 50821f4:	e0bfff17 	ldw	r2,-4(fp)
 50821f8:	100691fa 	slli	r3,r2,7
 50821fc:	00814274 	movhi	r2,1289
 5082200:	10b9fe04 	addi	r2,r2,-6152
 5082204:	1885883a 	add	r2,r3,r2
 5082208:	1009883a 	mov	r4,r2
 508220c:	50828040 	call	5082804 <printf>
    "\n\n"
};

void show_menu(void){
    int i;
    for(i=0;i<sizeof(szMenu)/sizeof(szMenu[0]);i++)
 5082210:	e0bfff17 	ldw	r2,-4(fp)
 5082214:	10800044 	addi	r2,r2,1
 5082218:	e0bfff15 	stw	r2,-4(fp)
 508221c:	e0bfff17 	ldw	r2,-4(fp)
 5082220:	10800430 	cmpltui	r2,r2,16
 5082224:	103ff31e 	bne	r2,zero,50821f4 <show_menu+0x18>
        printf(szMenu[i]);
}
 5082228:	e037883a 	mov	sp,fp
 508222c:	dfc00117 	ldw	ra,4(sp)
 5082230:	df000017 	ldw	fp,0(sp)
 5082234:	dec00204 	addi	sp,sp,8
 5082238:	f800283a 	ret

0508223c <main>:

int main()
{
 508223c:	deffeb04 	addi	sp,sp,-84
 5082240:	dfc01415 	stw	ra,80(sp)
 5082244:	df001315 	stw	fp,76(sp)
 5082248:	df001304 	addi	fp,sp,76
    typedef enum{
        ST_STANDY,
        ST_RECODING,
        ST_PLAYING
    }STATE;
    STATE state = ST_STANDY;
 508224c:	e03fed15 	stw	zero,-76(fp)
    volatile alt_u32 button_mask=0;
 5082250:	e03ffe15 	stw	zero,-8(fp)
    bool bRecordPressed, bPlayPressed, bError = FALSE;
 5082254:	e03fee15 	stw	zero,-72(fp)
    alt_u32 *pBuf, *pPlaying, *pRecording, RecordLen, PlayLen, data, try_cnt, buf_sample_size;
    alt_u16 ch_right, ch_left;

    
    printf("\nHello World\n");
 5082258:	01014274 	movhi	r4,1289
 508225c:	213bfe04 	addi	r4,r4,-4104
 5082260:	50828c40 	call	50828c4 <puts>

    show_menu();    
 5082264:	50821dc0 	call	50821dc <show_menu>
    if (!init())
 5082268:	50820740 	call	5082074 <init>
 508226c:	1000021e 	bne	r2,zero,5082278 <main+0x3c>
        return 0;
 5082270:	0005883a 	mov	r2,zero
 5082274:	00010706 	br	5082694 <main+0x458>
        
    
#ifdef USE_SDRAM_FOR_DATA
    pBuf = (alt_u32 *)SDRAM_BASE;
 5082278:	e03ff615 	stw	zero,-40(fp)
    buf_sample_size = SDRAM_SPAN/sizeof(alt_u32);
 508227c:	00804034 	movhi	r2,256
 5082280:	e0bff715 	stw	r2,-36(fp)
        LCD_TextOut("malloc fail\n\n");
        printf("malloc fail\r\n");
        return 0;
    }
#endif    
    button_monitor_start(&button_mask);  // button IRQ
 5082284:	e0bffe04 	addi	r2,fp,-8
 5082288:	1009883a 	mov	r4,r2
 508228c:	5081d840 	call	5081d84 <button_monitor_start>
    printf("ready\n");
 5082290:	01014274 	movhi	r4,1289
 5082294:	213c0204 	addi	r4,r4,-4088
 5082298:	50828c40 	call	50828c4 <puts>
    
    
    // test
    record_sample_rate = ui_get_sample_rate(); 
 508229c:	5081c7c0 	call	5081c7c <ui_get_sample_rate>
 50822a0:	d0a6ab15 	stw	r2,-25940(gp)
    RecordLen = buf_sample_size;
 50822a4:	e0bff717 	ldw	r2,-36(fp)
 50822a8:	e0bff115 	stw	r2,-60(fp)
 50822ac:	00000106 	br	50822b4 <main+0x78>
                    //printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
                }
                display_time_elapsed(PlayLen);     
            }
        }        
    }
 50822b0:	0001883a 	nop
    //
    
    // infinite loop
    while(1){
        // 
        bRecordPressed = (button_mask & RECORD_BUTTON)?TRUE:FALSE;
 50822b4:	e0bffe17 	ldw	r2,-8(fp)
 50822b8:	1080020c 	andi	r2,r2,8
 50822bc:	1004c03a 	cmpne	r2,r2,zero
 50822c0:	10803fcc 	andi	r2,r2,255
 50822c4:	e0bff815 	stw	r2,-32(fp)
        bPlayPressed = (button_mask & PLAY_BUTTON)?TRUE:FALSE;
 50822c8:	e0bffe17 	ldw	r2,-8(fp)
 50822cc:	1080010c 	andi	r2,r2,4
 50822d0:	1004c03a 	cmpne	r2,r2,zero
 50822d4:	10803fcc 	andi	r2,r2,255
 50822d8:	e0bff915 	stw	r2,-28(fp)
        if (bPlayPressed || bRecordPressed) 
 50822dc:	e0bff917 	ldw	r2,-28(fp)
 50822e0:	1000021e 	bne	r2,zero,50822ec <main+0xb0>
 50822e4:	e0bff817 	ldw	r2,-32(fp)
 50822e8:	10000126 	beq	r2,zero,50822f0 <main+0xb4>
            button_mask = 0;
 50822ec:	e03ffe15 	stw	zero,-8(fp)
        if (state == ST_STANDY){
 50822f0:	e0bfed17 	ldw	r2,-76(fp)
 50822f4:	1000431e 	bne	r2,zero,5082404 <main+0x1c8>
            if (bRecordPressed){
 50822f8:	e0bff817 	ldw	r2,-32(fp)
 50822fc:	10002826 	beq	r2,zero,50823a0 <main+0x164>
                bool bMicRecord;
                record_sample_rate = ui_get_sample_rate();
 5082300:	5081c7c0 	call	5081c7c <ui_get_sample_rate>
 5082304:	d0a6ab15 	stw	r2,-25940(gp)
                bMicRecord = ui_is_mic_record();
 5082308:	5081bc80 	call	5081bc8 <ui_is_mic_record>
 508230c:	e0bffa15 	stw	r2,-24(fp)
                AUDIO_FifoClear();
 5082310:	5080f080 	call	5080f08 <AUDIO_FifoClear>
                init_audio(bMicRecord?MIC_RECORD:LINEIN_RECORD);
 5082314:	e0bffa17 	ldw	r2,-24(fp)
 5082318:	1005003a 	cmpeq	r2,r2,zero
 508231c:	10803fcc 	andi	r2,r2,255
 5082320:	1009883a 	mov	r4,r2
 5082324:	5081e080 	call	5081e08 <init_audio>
                AUDIO_FifoClear();
 5082328:	5080f080 	call	5080f08 <AUDIO_FifoClear>
                state = ST_RECODING;
 508232c:	00800044 	movi	r2,1
 5082330:	e0bfed15 	stw	r2,-76(fp)
                if (bMicRecord){
 5082334:	e0bffa17 	ldw	r2,-24(fp)
 5082338:	10001026 	beq	r2,zero,508237c <main+0x140>
                    bool bMicBoost = ui_is_mic_boost();
 508233c:	5081c040 	call	5081c04 <ui_is_mic_boost>
 5082340:	e0bffb15 	stw	r2,-20(fp)
                    printf("MIC %srecording (sample rate = %d)...\r\n", bMicBoost?"Boost ":"", record_sample_rate);
 5082344:	e0bffb17 	ldw	r2,-20(fp)
 5082348:	10000326 	beq	r2,zero,5082358 <main+0x11c>
 508234c:	00814274 	movhi	r2,1289
 5082350:	10bc0404 	addi	r2,r2,-4080
 5082354:	00000206 	br	5082360 <main+0x124>
 5082358:	00814274 	movhi	r2,1289
 508235c:	10bc0604 	addi	r2,r2,-4072
 5082360:	d0e6ab17 	ldw	r3,-25940(gp)
 5082364:	01014274 	movhi	r4,1289
 5082368:	213c0704 	addi	r4,r4,-4068
 508236c:	100b883a 	mov	r5,r2
 5082370:	180d883a 	mov	r6,r3
 5082374:	50828040 	call	5082804 <printf>
 5082378:	00000506 	br	5082390 <main+0x154>

                }else{
                    printf("LINE-IN recording (sample rate = %d)...\r\n", record_sample_rate);
 508237c:	d0a6ab17 	ldw	r2,-25940(gp)
 5082380:	01014274 	movhi	r4,1289
 5082384:	213c1104 	addi	r4,r4,-4028
 5082388:	100b883a 	mov	r5,r2
 508238c:	50828040 	call	5082804 <printf>


                }                    
                pRecording = pBuf;
 5082390:	e0bff617 	ldw	r2,-40(fp)
 5082394:	e0bff015 	stw	r2,-64(fp)
                RecordLen = 0;
 5082398:	e03ff115 	stw	zero,-60(fp)
 508239c:	00001706 	br	50823fc <main+0x1c0>
            }else if (bPlayPressed){
 50823a0:	e0bff917 	ldw	r2,-28(fp)
 50823a4:	10001526 	beq	r2,zero,50823fc <main+0x1c0>
                if (RecordLen == 0){
 50823a8:	e0bff117 	ldw	r2,-60(fp)
 50823ac:	1000041e 	bne	r2,zero,50823c0 <main+0x184>
                    printf("Please record before play audio\r\n");
 50823b0:	01014274 	movhi	r4,1289
 50823b4:	213c1c04 	addi	r4,r4,-3984
 50823b8:	50828c40 	call	50828c4 <puts>
 50823bc:	00000f06 	br	50823fc <main+0x1c0>

                }else{
                    bool bZeroCross = ui_is_dac_zero_cross();
 50823c0:	5081c400 	call	5081c40 <ui_is_dac_zero_cross>
 50823c4:	e0bffc15 	stw	r2,-16(fp)
                    AUDIO_FifoClear();
 50823c8:	5080f080 	call	5080f08 <AUDIO_FifoClear>
                    init_audio(LINEOUT_PLAY);
 50823cc:	01000084 	movi	r4,2
 50823d0:	5081e080 	call	5081e08 <init_audio>
                    state = ST_PLAYING;
 50823d4:	00800084 	movi	r2,2
 50823d8:	e0bfed15 	stw	r2,-76(fp)
                    printf("playing (sample rate = %d)...\r\n", record_sample_rate);
 50823dc:	d0a6ab17 	ldw	r2,-25940(gp)
 50823e0:	01014274 	movhi	r4,1289
 50823e4:	213c2504 	addi	r4,r4,-3948
 50823e8:	100b883a 	mov	r5,r2
 50823ec:	50828040 	call	5082804 <printf>


                    pPlaying = pBuf;
 50823f0:	e0bff617 	ldw	r2,-40(fp)
 50823f4:	e0bfef15 	stw	r2,-68(fp)
                    PlayLen = 0;
 50823f8:	e03ff215 	stw	zero,-56(fp)
                }  
            }
            bError = FALSE;
 50823fc:	e03fee15 	stw	zero,-72(fp)
                    //printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
                }
                display_time_elapsed(PlayLen);     
            }
        }        
    }
 5082400:	003fab06 	br	50822b0 <main+0x74>
                    pPlaying = pBuf;
                    PlayLen = 0;
                }  
            }
            bError = FALSE;
        }else if (state == ST_RECODING){
 5082404:	e0bfed17 	ldw	r2,-76(fp)
 5082408:	10800058 	cmpnei	r2,r2,1
 508240c:	10004b1e 	bne	r2,zero,508253c <main+0x300>
            if (bRecordPressed || (RecordLen >= buf_sample_size) || bError){
 5082410:	e0bff817 	ldw	r2,-32(fp)
 5082414:	1000051e 	bne	r2,zero,508242c <main+0x1f0>
 5082418:	e0fff117 	ldw	r3,-60(fp)
 508241c:	e0bff717 	ldw	r2,-36(fp)
 5082420:	1880022e 	bgeu	r3,r2,508242c <main+0x1f0>
 5082424:	e0bfee17 	ldw	r2,-72(fp)
 5082428:	10000b26 	beq	r2,zero,5082458 <main+0x21c>
                // stop record
                printf("record %d samples\n", (int)RecordLen);
 508242c:	e0bff117 	ldw	r2,-60(fp)
 5082430:	01014274 	movhi	r4,1289
 5082434:	213c2d04 	addi	r4,r4,-3916
 5082438:	100b883a 	mov	r5,r2
 508243c:	50828040 	call	5082804 <printf>


                state = ST_STANDY;
 5082440:	e03fed15 	stw	zero,-76(fp)
                LED_AllOff();
 5082444:	50816a40 	call	50816a4 <LED_AllOff>
                dump_record_data(pBuf, RecordLen);
 5082448:	e13ff617 	ldw	r4,-40(fp)
 508244c:	e17ff117 	ldw	r5,-60(fp)
 5082450:	50820cc0 	call	50820cc <dump_record_data>
                    //printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
                }
                display_time_elapsed(PlayLen);     
            }
        }        
    }
 5082454:	003f9606 	br	50822b0 <main+0x74>
                LED_AllOff();
                dump_record_data(pBuf, RecordLen);
                
            }else{
                // continue recoding
                int i = 0;
 5082458:	e03ff415 	stw	zero,-48(fp)
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
 508245c:	00002e06 	br	5082518 <main+0x2dc>
                    try_cnt = 0;
 5082460:	e03ff315 	stw	zero,-52(fp)
                    while (!AUDIO_AdcFifoNotEmpty() && try_cnt < MAX_TRY_CNT){ // wait while empty
 5082464:	00000306 	br	5082474 <main+0x238>
                        try_cnt++;    
 5082468:	e0bff317 	ldw	r2,-52(fp)
 508246c:	10800044 	addi	r2,r2,1
 5082470:	e0bff315 	stw	r2,-52(fp)
            }else{
                // continue recoding
                int i = 0;
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
                    try_cnt = 0;
                    while (!AUDIO_AdcFifoNotEmpty() && try_cnt < MAX_TRY_CNT){ // wait while empty
 5082474:	5080e780 	call	5080e78 <AUDIO_AdcFifoNotEmpty>
 5082478:	1000031e 	bne	r2,zero,5082488 <main+0x24c>
 508247c:	e0bff317 	ldw	r2,-52(fp)
 5082480:	10810030 	cmpltui	r2,r2,1024
 5082484:	103ff81e 	bne	r2,zero,5082468 <main+0x22c>
                        try_cnt++;    
                    }    
                    if (try_cnt >= MAX_TRY_CNT){
 5082488:	e0bff317 	ldw	r2,-52(fp)
 508248c:	10810030 	cmpltui	r2,r2,1024
 5082490:	1000031e 	bne	r2,zero,50824a0 <main+0x264>
                        bError = TRUE;
 5082494:	00800044 	movi	r2,1
 5082498:	e0bfee15 	stw	r2,-72(fp)
                        break;
 508249c:	00002406 	br	5082530 <main+0x2f4>
                    }    
                    AUDIO_AdcFifoGetData(&ch_left, &ch_right);
 50824a0:	e0ffff84 	addi	r3,fp,-2
 50824a4:	e0bfff04 	addi	r2,fp,-4
 50824a8:	1809883a 	mov	r4,r3
 50824ac:	100b883a 	mov	r5,r2
 50824b0:	5080eb40 	call	5080eb4 <AUDIO_AdcFifoGetData>
                    data = (ch_left << 16) | ch_right;
 50824b4:	e0bfff8b 	ldhu	r2,-2(fp)
 50824b8:	10bfffcc 	andi	r2,r2,65535
 50824bc:	1006943a 	slli	r3,r2,16
 50824c0:	e0bfff0b 	ldhu	r2,-4(fp)
 50824c4:	10bfffcc 	andi	r2,r2,65535
 50824c8:	1884b03a 	or	r2,r3,r2
 50824cc:	e0bffd15 	stw	r2,-12(fp)
                    *pRecording++ = data;
 50824d0:	e0bff017 	ldw	r2,-64(fp)
 50824d4:	e0fffd17 	ldw	r3,-12(fp)
 50824d8:	10c00015 	stw	r3,0(r2)
 50824dc:	e0bff017 	ldw	r2,-64(fp)
 50824e0:	10800104 	addi	r2,r2,4
 50824e4:	e0bff015 	stw	r2,-64(fp)
                    RecordLen++;
 50824e8:	e0bff117 	ldw	r2,-60(fp)
 50824ec:	10800044 	addi	r2,r2,1
 50824f0:	e0bff115 	stw	r2,-60(fp)
                    i++;
 50824f4:	e0bff417 	ldw	r2,-48(fp)
 50824f8:	10800044 	addi	r2,r2,1
 50824fc:	e0bff415 	stw	r2,-48(fp)
                    show_power(data & 0xFFFF);
 5082500:	e0bffd17 	ldw	r2,-12(fp)
 5082504:	10bfffcc 	andi	r2,r2,65535
 5082508:	10a0001c 	xori	r2,r2,32768
 508250c:	10a00004 	addi	r2,r2,-32768
 5082510:	1009883a 	mov	r4,r2
 5082514:	5081fe00 	call	5081fe0 <show_power>
                dump_record_data(pBuf, RecordLen);
                
            }else{
                // continue recoding
                int i = 0;
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
 5082518:	e0bff417 	ldw	r2,-48(fp)
 508251c:	10803e88 	cmpgei	r2,r2,250
 5082520:	1000031e 	bne	r2,zero,5082530 <main+0x2f4>
 5082524:	e0fff117 	ldw	r3,-60(fp)
 5082528:	e0bff717 	ldw	r2,-36(fp)
 508252c:	18bfcc36 	bltu	r3,r2,5082460 <main+0x224>
                    *pRecording++ = data;
                    RecordLen++;
                    i++;
                    show_power(data & 0xFFFF);
                }  // while
                display_time_elapsed(RecordLen);    
 5082530:	e13ff117 	ldw	r4,-60(fp)
 5082534:	5081f900 	call	5081f90 <display_time_elapsed>
 5082538:	00005506 	br	5082690 <main+0x454>
            }     
        }else if (state == ST_PLAYING){
 508253c:	e0bfed17 	ldw	r2,-76(fp)
 5082540:	10800098 	cmpnei	r2,r2,2
 5082544:	103f5a1e 	bne	r2,zero,50822b0 <main+0x74>
            if (bPlayPressed || (PlayLen >= RecordLen) || bError){
 5082548:	e0bff917 	ldw	r2,-28(fp)
 508254c:	1000051e 	bne	r2,zero,5082564 <main+0x328>
 5082550:	e0fff217 	ldw	r3,-56(fp)
 5082554:	e0bff117 	ldw	r2,-60(fp)
 5082558:	1880022e 	bgeu	r3,r2,5082564 <main+0x328>
 508255c:	e0bfee17 	ldw	r2,-72(fp)
 5082560:	10000e26 	beq	r2,zero,508259c <main+0x360>
                // stop playing
                printf("Play Stop %s\r\n", bError?"(Error)":"");
 5082564:	e0bfee17 	ldw	r2,-72(fp)
 5082568:	10000326 	beq	r2,zero,5082578 <main+0x33c>
 508256c:	00814274 	movhi	r2,1289
 5082570:	10bc3204 	addi	r2,r2,-3896
 5082574:	00000206 	br	5082580 <main+0x344>
 5082578:	00814274 	movhi	r2,1289
 508257c:	10bc0604 	addi	r2,r2,-4072
 5082580:	01014274 	movhi	r4,1289
 5082584:	213c3404 	addi	r4,r4,-3888
 5082588:	100b883a 	mov	r5,r2
 508258c:	50828040 	call	5082804 <printf>

                state = ST_STANDY;
 5082590:	e03fed15 	stw	zero,-76(fp)
                LED_AllOff();
 5082594:	50816a40 	call	50816a4 <LED_AllOff>
 5082598:	00003d06 	br	5082690 <main+0x454>
            }else{
                // continue playing
                int i = 0;
 508259c:	e03ff515 	stw	zero,-44(fp)
                while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)){
 50825a0:	00003206 	br	508266c <main+0x430>
                    try_cnt = 0;                
 50825a4:	e03ff315 	stw	zero,-52(fp)
                    while (!AUDIO_DacFifoNotFull() && try_cnt < MAX_TRY_CNT){  // wait while full
 50825a8:	00000306 	br	50825b8 <main+0x37c>
                        try_cnt++;
 50825ac:	e0bff317 	ldw	r2,-52(fp)
 50825b0:	10800044 	addi	r2,r2,1
 50825b4:	e0bff315 	stw	r2,-52(fp)
            }else{
                // continue playing
                int i = 0;
                while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)){
                    try_cnt = 0;                
                    while (!AUDIO_DacFifoNotFull() && try_cnt < MAX_TRY_CNT){  // wait while full
 50825b8:	5080df00 	call	5080df0 <AUDIO_DacFifoNotFull>
 50825bc:	1000031e 	bne	r2,zero,50825cc <main+0x390>
 50825c0:	e0bff317 	ldw	r2,-52(fp)
 50825c4:	10810030 	cmpltui	r2,r2,1024
 50825c8:	103ff81e 	bne	r2,zero,50825ac <main+0x370>
                        try_cnt++;
                    }    
                    if (try_cnt >= MAX_TRY_CNT){
 50825cc:	e0bff317 	ldw	r2,-52(fp)
 50825d0:	10810030 	cmpltui	r2,r2,1024
 50825d4:	1000031e 	bne	r2,zero,50825e4 <main+0x3a8>
                        bError = TRUE;
 50825d8:	00800044 	movi	r2,1
 50825dc:	e0bfee15 	stw	r2,-72(fp)
                        break;
 50825e0:	00002806 	br	5082684 <main+0x448>
                    }    
                    data = *pPlaying++;
 50825e4:	e0bfef17 	ldw	r2,-68(fp)
 50825e8:	10800017 	ldw	r2,0(r2)
 50825ec:	e0bffd15 	stw	r2,-12(fp)
 50825f0:	e0bfef17 	ldw	r2,-68(fp)
 50825f4:	10800104 	addi	r2,r2,4
 50825f8:	e0bfef15 	stw	r2,-68(fp)
                   
                    //data = 0;
                    ch_left = data >> 16;
 50825fc:	e0bffd17 	ldw	r2,-12(fp)
 5082600:	1004d43a 	srli	r2,r2,16
 5082604:	e0bfff8d 	sth	r2,-2(fp)
                    ch_right = data & 0xFFFF;
 5082608:	e0bffd17 	ldw	r2,-12(fp)
 508260c:	e0bfff0d 	sth	r2,-4(fp)
                    AUDIO_DacFifoSetData(ch_left, ch_right);  
 5082610:	e0bfff8b 	ldhu	r2,-2(fp)
 5082614:	10ffffcc 	andi	r3,r2,65535
 5082618:	18e0001c 	xori	r3,r3,32768
 508261c:	18e00004 	addi	r3,r3,-32768
 5082620:	e0bfff0b 	ldhu	r2,-4(fp)
 5082624:	10bfffcc 	andi	r2,r2,65535
 5082628:	10a0001c 	xori	r2,r2,32768
 508262c:	10a00004 	addi	r2,r2,-32768
 5082630:	1809883a 	mov	r4,r3
 5082634:	100b883a 	mov	r5,r2
 5082638:	5080e2c0 	call	5080e2c <AUDIO_DacFifoSetData>
                    i++;
 508263c:	e0bff517 	ldw	r2,-44(fp)
 5082640:	10800044 	addi	r2,r2,1
 5082644:	e0bff515 	stw	r2,-44(fp)
                    PlayLen++;
 5082648:	e0bff217 	ldw	r2,-56(fp)
 508264c:	10800044 	addi	r2,r2,1
 5082650:	e0bff215 	stw	r2,-56(fp)
                    show_power(data & 0xFFFF);
 5082654:	e0bffd17 	ldw	r2,-12(fp)
 5082658:	10bfffcc 	andi	r2,r2,65535
 508265c:	10a0001c 	xori	r2,r2,32768
 5082660:	10a00004 	addi	r2,r2,-32768
 5082664:	1009883a 	mov	r4,r2
 5082668:	5081fe00 	call	5081fe0 <show_power>
                state = ST_STANDY;
                LED_AllOff();
            }else{
                // continue playing
                int i = 0;
                while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)){
 508266c:	e0bff517 	ldw	r2,-44(fp)
 5082670:	10803e88 	cmpgei	r2,r2,250
 5082674:	1000031e 	bne	r2,zero,5082684 <main+0x448>
 5082678:	e0fff217 	ldw	r3,-56(fp)
 508267c:	e0bff117 	ldw	r2,-60(fp)
 5082680:	18bfc836 	bltu	r3,r2,50825a4 <main+0x368>
                    i++;
                    PlayLen++;
                    show_power(data & 0xFFFF);
                    //printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
                }
                display_time_elapsed(PlayLen);     
 5082684:	e13ff217 	ldw	r4,-56(fp)
 5082688:	5081f900 	call	5081f90 <display_time_elapsed>
            }
        }        
    }
 508268c:	003f0806 	br	50822b0 <main+0x74>
 5082690:	003f0706 	br	50822b0 <main+0x74>
    
}
 5082694:	e037883a 	mov	sp,fp
 5082698:	dfc00117 	ldw	ra,4(sp)
 508269c:	df000017 	ldw	fp,0(sp)
 50826a0:	dec00204 	addi	sp,sp,8
 50826a4:	f800283a 	ret

050826a8 <udivmodsi4>:
 50826a8:	2005883a 	mov	r2,r4
 50826ac:	2900182e 	bgeu	r5,r4,5082710 <udivmodsi4+0x68>
 50826b0:	28001716 	blt	r5,zero,5082710 <udivmodsi4+0x68>
 50826b4:	01000804 	movi	r4,32
 50826b8:	00c00044 	movi	r3,1
 50826bc:	00000206 	br	50826c8 <udivmodsi4+0x20>
 50826c0:	20001126 	beq	r4,zero,5082708 <udivmodsi4+0x60>
 50826c4:	28000516 	blt	r5,zero,50826dc <udivmodsi4+0x34>
 50826c8:	294b883a 	add	r5,r5,r5
 50826cc:	213fffc4 	addi	r4,r4,-1
 50826d0:	18c7883a 	add	r3,r3,r3
 50826d4:	28bffa36 	bltu	r5,r2,50826c0 <udivmodsi4+0x18>
 50826d8:	18000b26 	beq	r3,zero,5082708 <udivmodsi4+0x60>
 50826dc:	0009883a 	mov	r4,zero
 50826e0:	11400236 	bltu	r2,r5,50826ec <udivmodsi4+0x44>
 50826e4:	1145c83a 	sub	r2,r2,r5
 50826e8:	20c8b03a 	or	r4,r4,r3
 50826ec:	1806d07a 	srli	r3,r3,1
 50826f0:	280ad07a 	srli	r5,r5,1
 50826f4:	183ffa1e 	bne	r3,zero,50826e0 <udivmodsi4+0x38>
 50826f8:	3000021e 	bne	r6,zero,5082704 <udivmodsi4+0x5c>
 50826fc:	2005883a 	mov	r2,r4
 5082700:	f800283a 	ret
 5082704:	f800283a 	ret
 5082708:	0009883a 	mov	r4,zero
 508270c:	003ffa06 	br	50826f8 <udivmodsi4+0x50>
 5082710:	00c00044 	movi	r3,1
 5082714:	0009883a 	mov	r4,zero
 5082718:	003ff106 	br	50826e0 <udivmodsi4+0x38>

0508271c <__divsi3>:
 508271c:	defffe04 	addi	sp,sp,-8
 5082720:	dfc00115 	stw	ra,4(sp)
 5082724:	dc000015 	stw	r16,0(sp)
 5082728:	20000a16 	blt	r4,zero,5082754 <__divsi3+0x38>
 508272c:	0021883a 	mov	r16,zero
 5082730:	28000b16 	blt	r5,zero,5082760 <__divsi3+0x44>
 5082734:	000d883a 	mov	r6,zero
 5082738:	50826a80 	call	50826a8 <udivmodsi4>
 508273c:	80000126 	beq	r16,zero,5082744 <__divsi3+0x28>
 5082740:	0085c83a 	sub	r2,zero,r2
 5082744:	dfc00117 	ldw	ra,4(sp)
 5082748:	dc000017 	ldw	r16,0(sp)
 508274c:	dec00204 	addi	sp,sp,8
 5082750:	f800283a 	ret
 5082754:	0109c83a 	sub	r4,zero,r4
 5082758:	04000044 	movi	r16,1
 508275c:	283ff50e 	bge	r5,zero,5082734 <__divsi3+0x18>
 5082760:	014bc83a 	sub	r5,zero,r5
 5082764:	8400005c 	xori	r16,r16,1
 5082768:	003ff206 	br	5082734 <__divsi3+0x18>

0508276c <__modsi3>:
 508276c:	deffff04 	addi	sp,sp,-4
 5082770:	dfc00015 	stw	ra,0(sp)
 5082774:	20000516 	blt	r4,zero,508278c <__modsi3+0x20>
 5082778:	28000c16 	blt	r5,zero,50827ac <__modsi3+0x40>
 508277c:	01800044 	movi	r6,1
 5082780:	dfc00017 	ldw	ra,0(sp)
 5082784:	dec00104 	addi	sp,sp,4
 5082788:	50826a81 	jmpi	50826a8 <udivmodsi4>
 508278c:	0109c83a 	sub	r4,zero,r4
 5082790:	28000b16 	blt	r5,zero,50827c0 <__modsi3+0x54>
 5082794:	01800044 	movi	r6,1
 5082798:	50826a80 	call	50826a8 <udivmodsi4>
 508279c:	0085c83a 	sub	r2,zero,r2
 50827a0:	dfc00017 	ldw	ra,0(sp)
 50827a4:	dec00104 	addi	sp,sp,4
 50827a8:	f800283a 	ret
 50827ac:	014bc83a 	sub	r5,zero,r5
 50827b0:	01800044 	movi	r6,1
 50827b4:	dfc00017 	ldw	ra,0(sp)
 50827b8:	dec00104 	addi	sp,sp,4
 50827bc:	50826a81 	jmpi	50826a8 <udivmodsi4>
 50827c0:	014bc83a 	sub	r5,zero,r5
 50827c4:	003ff306 	br	5082794 <__modsi3+0x28>

050827c8 <__udivsi3>:
 50827c8:	000d883a 	mov	r6,zero
 50827cc:	50826a81 	jmpi	50826a8 <udivmodsi4>

050827d0 <__umodsi3>:
 50827d0:	01800044 	movi	r6,1
 50827d4:	50826a81 	jmpi	50826a8 <udivmodsi4>

050827d8 <_printf_r>:
 50827d8:	defffd04 	addi	sp,sp,-12
 50827dc:	dfc00015 	stw	ra,0(sp)
 50827e0:	d9800115 	stw	r6,4(sp)
 50827e4:	d9c00215 	stw	r7,8(sp)
 50827e8:	280d883a 	mov	r6,r5
 50827ec:	21400217 	ldw	r5,8(r4)
 50827f0:	d9c00104 	addi	r7,sp,4
 50827f4:	5082a5c0 	call	5082a5c <___vfprintf_internal_r>
 50827f8:	dfc00017 	ldw	ra,0(sp)
 50827fc:	dec00304 	addi	sp,sp,12
 5082800:	f800283a 	ret

05082804 <printf>:
 5082804:	defffc04 	addi	sp,sp,-16
 5082808:	dfc00015 	stw	ra,0(sp)
 508280c:	d9400115 	stw	r5,4(sp)
 5082810:	d9800215 	stw	r6,8(sp)
 5082814:	d9c00315 	stw	r7,12(sp)
 5082818:	00814274 	movhi	r2,1289
 508281c:	10838c04 	addi	r2,r2,3632
 5082820:	10800017 	ldw	r2,0(r2)
 5082824:	200b883a 	mov	r5,r4
 5082828:	d9800104 	addi	r6,sp,4
 508282c:	11000217 	ldw	r4,8(r2)
 5082830:	50848540 	call	5084854 <__vfprintf_internal>
 5082834:	dfc00017 	ldw	ra,0(sp)
 5082838:	dec00404 	addi	sp,sp,16
 508283c:	f800283a 	ret

05082840 <_puts_r>:
 5082840:	defff604 	addi	sp,sp,-40
 5082844:	dc400815 	stw	r17,32(sp)
 5082848:	2023883a 	mov	r17,r4
 508284c:	2809883a 	mov	r4,r5
 5082850:	dc000715 	stw	r16,28(sp)
 5082854:	dfc00915 	stw	ra,36(sp)
 5082858:	2821883a 	mov	r16,r5
 508285c:	508299c0 	call	508299c <strlen>
 5082860:	10c00044 	addi	r3,r2,1
 5082864:	d8800115 	stw	r2,4(sp)
 5082868:	89400217 	ldw	r5,8(r17)
 508286c:	00814274 	movhi	r2,1289
 5082870:	10bc3804 	addi	r2,r2,-3872
 5082874:	d8800215 	stw	r2,8(sp)
 5082878:	00800044 	movi	r2,1
 508287c:	d8800315 	stw	r2,12(sp)
 5082880:	8809883a 	mov	r4,r17
 5082884:	00800084 	movi	r2,2
 5082888:	d9800404 	addi	r6,sp,16
 508288c:	dc000015 	stw	r16,0(sp)
 5082890:	d8c00615 	stw	r3,24(sp)
 5082894:	dec00415 	stw	sp,16(sp)
 5082898:	d8800515 	stw	r2,20(sp)
 508289c:	5086bf80 	call	5086bf8 <__sfvwrite_r>
 50828a0:	1000061e 	bne	r2,zero,50828bc <_puts_r+0x7c>
 50828a4:	00800284 	movi	r2,10
 50828a8:	dfc00917 	ldw	ra,36(sp)
 50828ac:	dc400817 	ldw	r17,32(sp)
 50828b0:	dc000717 	ldw	r16,28(sp)
 50828b4:	dec00a04 	addi	sp,sp,40
 50828b8:	f800283a 	ret
 50828bc:	00bfffc4 	movi	r2,-1
 50828c0:	003ff906 	br	50828a8 <_puts_r+0x68>

050828c4 <puts>:
 50828c4:	00814274 	movhi	r2,1289
 50828c8:	10838c04 	addi	r2,r2,3632
 50828cc:	200b883a 	mov	r5,r4
 50828d0:	11000017 	ldw	r4,0(r2)
 50828d4:	50828401 	jmpi	5082840 <_puts_r>

050828d8 <_sprintf_r>:
 50828d8:	deffe704 	addi	sp,sp,-100
 50828dc:	2807883a 	mov	r3,r5
 50828e0:	dfc01715 	stw	ra,92(sp)
 50828e4:	d9c01815 	stw	r7,96(sp)
 50828e8:	00a00034 	movhi	r2,32768
 50828ec:	10bfffc4 	addi	r2,r2,-1
 50828f0:	02008204 	movi	r8,520
 50828f4:	d8800215 	stw	r2,8(sp)
 50828f8:	d8800515 	stw	r2,20(sp)
 50828fc:	d80b883a 	mov	r5,sp
 5082900:	d9c01804 	addi	r7,sp,96
 5082904:	00bfffc4 	movi	r2,-1
 5082908:	d8c00015 	stw	r3,0(sp)
 508290c:	d8c00415 	stw	r3,16(sp)
 5082910:	da00030d 	sth	r8,12(sp)
 5082914:	d880038d 	sth	r2,14(sp)
 5082918:	5082a5c0 	call	5082a5c <___vfprintf_internal_r>
 508291c:	d8c00017 	ldw	r3,0(sp)
 5082920:	18000005 	stb	zero,0(r3)
 5082924:	dfc01717 	ldw	ra,92(sp)
 5082928:	dec01904 	addi	sp,sp,100
 508292c:	f800283a 	ret

05082930 <sprintf>:
 5082930:	deffe604 	addi	sp,sp,-104
 5082934:	2007883a 	mov	r3,r4
 5082938:	dfc01715 	stw	ra,92(sp)
 508293c:	d9801815 	stw	r6,96(sp)
 5082940:	d9c01915 	stw	r7,100(sp)
 5082944:	00814274 	movhi	r2,1289
 5082948:	10838c04 	addi	r2,r2,3632
 508294c:	11000017 	ldw	r4,0(r2)
 5082950:	00a00034 	movhi	r2,32768
 5082954:	10bfffc4 	addi	r2,r2,-1
 5082958:	280d883a 	mov	r6,r5
 508295c:	02008204 	movi	r8,520
 5082960:	d8800215 	stw	r2,8(sp)
 5082964:	d8800515 	stw	r2,20(sp)
 5082968:	d80b883a 	mov	r5,sp
 508296c:	d9c01804 	addi	r7,sp,96
 5082970:	00bfffc4 	movi	r2,-1
 5082974:	d8c00015 	stw	r3,0(sp)
 5082978:	d8c00415 	stw	r3,16(sp)
 508297c:	da00030d 	sth	r8,12(sp)
 5082980:	d880038d 	sth	r2,14(sp)
 5082984:	5082a5c0 	call	5082a5c <___vfprintf_internal_r>
 5082988:	d8c00017 	ldw	r3,0(sp)
 508298c:	18000005 	stb	zero,0(r3)
 5082990:	dfc01717 	ldw	ra,92(sp)
 5082994:	dec01a04 	addi	sp,sp,104
 5082998:	f800283a 	ret

0508299c <strlen>:
 508299c:	208000cc 	andi	r2,r4,3
 50829a0:	10001f1e 	bne	r2,zero,5082a20 <strlen+0x84>
 50829a4:	20800017 	ldw	r2,0(r4)
 50829a8:	01ffbff4 	movhi	r7,65279
 50829ac:	39ffbfc4 	addi	r7,r7,-257
 50829b0:	01a02074 	movhi	r6,32897
 50829b4:	31a02004 	addi	r6,r6,-32640
 50829b8:	11c7883a 	add	r3,r2,r7
 50829bc:	0084303a 	nor	r2,zero,r2
 50829c0:	1886703a 	and	r3,r3,r2
 50829c4:	1986703a 	and	r3,r3,r6
 50829c8:	2005883a 	mov	r2,r4
 50829cc:	1800101e 	bne	r3,zero,5082a10 <strlen+0x74>
 50829d0:	10800104 	addi	r2,r2,4
 50829d4:	10c00017 	ldw	r3,0(r2)
 50829d8:	19cb883a 	add	r5,r3,r7
 50829dc:	00c6303a 	nor	r3,zero,r3
 50829e0:	28c6703a 	and	r3,r5,r3
 50829e4:	1986703a 	and	r3,r3,r6
 50829e8:	1800091e 	bne	r3,zero,5082a10 <strlen+0x74>
 50829ec:	10800104 	addi	r2,r2,4
 50829f0:	10c00017 	ldw	r3,0(r2)
 50829f4:	19cb883a 	add	r5,r3,r7
 50829f8:	00c6303a 	nor	r3,zero,r3
 50829fc:	28c6703a 	and	r3,r5,r3
 5082a00:	1986703a 	and	r3,r3,r6
 5082a04:	183ff226 	beq	r3,zero,50829d0 <strlen+0x34>
 5082a08:	00000106 	br	5082a10 <strlen+0x74>
 5082a0c:	10800044 	addi	r2,r2,1
 5082a10:	10c00007 	ldb	r3,0(r2)
 5082a14:	183ffd1e 	bne	r3,zero,5082a0c <strlen+0x70>
 5082a18:	1105c83a 	sub	r2,r2,r4
 5082a1c:	f800283a 	ret
 5082a20:	2005883a 	mov	r2,r4
 5082a24:	003ffa06 	br	5082a10 <strlen+0x74>

05082a28 <__sprint_r>:
 5082a28:	30800217 	ldw	r2,8(r6)
 5082a2c:	defffe04 	addi	sp,sp,-8
 5082a30:	dc000015 	stw	r16,0(sp)
 5082a34:	dfc00115 	stw	ra,4(sp)
 5082a38:	3021883a 	mov	r16,r6
 5082a3c:	10000226 	beq	r2,zero,5082a48 <__sprint_r+0x20>
 5082a40:	5086bf80 	call	5086bf8 <__sfvwrite_r>
 5082a44:	80000215 	stw	zero,8(r16)
 5082a48:	80000115 	stw	zero,4(r16)
 5082a4c:	dfc00117 	ldw	ra,4(sp)
 5082a50:	dc000017 	ldw	r16,0(sp)
 5082a54:	dec00204 	addi	sp,sp,8
 5082a58:	f800283a 	ret

05082a5c <___vfprintf_internal_r>:
 5082a5c:	defeb904 	addi	sp,sp,-1308
 5082a60:	dc013d15 	stw	r16,1268(sp)
 5082a64:	d9013015 	stw	r4,1216(sp)
 5082a68:	dfc14615 	stw	ra,1304(sp)
 5082a6c:	df014515 	stw	fp,1300(sp)
 5082a70:	ddc14415 	stw	r23,1296(sp)
 5082a74:	dd814315 	stw	r22,1292(sp)
 5082a78:	dd414215 	stw	r21,1288(sp)
 5082a7c:	dd014115 	stw	r20,1284(sp)
 5082a80:	dcc14015 	stw	r19,1280(sp)
 5082a84:	dc813f15 	stw	r18,1276(sp)
 5082a88:	dc413e15 	stw	r17,1272(sp)
 5082a8c:	d9412915 	stw	r5,1188(sp)
 5082a90:	3021883a 	mov	r16,r6
 5082a94:	d9c12d15 	stw	r7,1204(sp)
 5082a98:	50872e40 	call	50872e4 <_localeconv_r>
 5082a9c:	10800017 	ldw	r2,0(r2)
 5082aa0:	d9013017 	ldw	r4,1216(sp)
 5082aa4:	d8013315 	stw	zero,1228(sp)
 5082aa8:	d8813715 	stw	r2,1244(sp)
 5082aac:	d8013415 	stw	zero,1232(sp)
 5082ab0:	20000226 	beq	r4,zero,5082abc <___vfprintf_internal_r+0x60>
 5082ab4:	20800e17 	ldw	r2,56(r4)
 5082ab8:	10019826 	beq	r2,zero,508311c <___vfprintf_internal_r+0x6c0>
 5082abc:	da012917 	ldw	r8,1188(sp)
 5082ac0:	4080030b 	ldhu	r2,12(r8)
 5082ac4:	10c0020c 	andi	r3,r2,8
 5082ac8:	18ffffcc 	andi	r3,r3,65535
 5082acc:	18e0001c 	xori	r3,r3,32768
 5082ad0:	18e00004 	addi	r3,r3,-32768
 5082ad4:	18013a26 	beq	r3,zero,5082fc0 <___vfprintf_internal_r+0x564>
 5082ad8:	40c00417 	ldw	r3,16(r8)
 5082adc:	18013826 	beq	r3,zero,5082fc0 <___vfprintf_internal_r+0x564>
 5082ae0:	1100068c 	andi	r4,r2,26
 5082ae4:	00c00284 	movi	r3,10
 5082ae8:	20c13e26 	beq	r4,r3,5082fe4 <___vfprintf_internal_r+0x588>
 5082aec:	da010dc4 	addi	r8,sp,1079
 5082af0:	d8800404 	addi	r2,sp,16
 5082af4:	da012615 	stw	r8,1176(sp)
 5082af8:	d8811b15 	stw	r2,1132(sp)
 5082afc:	1013883a 	mov	r9,r2
 5082b00:	d8812617 	ldw	r2,1176(sp)
 5082b04:	da010e04 	addi	r8,sp,1080
 5082b08:	dc413017 	ldw	r17,1216(sp)
 5082b0c:	da012715 	stw	r8,1180(sp)
 5082b10:	4091c83a 	sub	r8,r8,r2
 5082b14:	d8011d15 	stw	zero,1140(sp)
 5082b18:	d8011c15 	stw	zero,1136(sp)
 5082b1c:	802b883a 	mov	r21,r16
 5082b20:	d8013215 	stw	zero,1224(sp)
 5082b24:	d8013615 	stw	zero,1240(sp)
 5082b28:	d8013515 	stw	zero,1236(sp)
 5082b2c:	d8012c15 	stw	zero,1200(sp)
 5082b30:	da013915 	stw	r8,1252(sp)
 5082b34:	a8800007 	ldb	r2,0(r21)
 5082b38:	1002ec26 	beq	r2,zero,50836ec <___vfprintf_internal_r+0xc90>
 5082b3c:	00c00944 	movi	r3,37
 5082b40:	a825883a 	mov	r18,r21
 5082b44:	10c0021e 	bne	r2,r3,5082b50 <___vfprintf_internal_r+0xf4>
 5082b48:	00001406 	br	5082b9c <___vfprintf_internal_r+0x140>
 5082b4c:	10c00326 	beq	r2,r3,5082b5c <___vfprintf_internal_r+0x100>
 5082b50:	94800044 	addi	r18,r18,1
 5082b54:	90800007 	ldb	r2,0(r18)
 5082b58:	103ffc1e 	bne	r2,zero,5082b4c <___vfprintf_internal_r+0xf0>
 5082b5c:	9561c83a 	sub	r16,r18,r21
 5082b60:	80000e26 	beq	r16,zero,5082b9c <___vfprintf_internal_r+0x140>
 5082b64:	da011d17 	ldw	r8,1140(sp)
 5082b68:	d8c11c17 	ldw	r3,1136(sp)
 5082b6c:	4d400015 	stw	r21,0(r9)
 5082b70:	4c000115 	stw	r16,4(r9)
 5082b74:	4411883a 	add	r8,r8,r16
 5082b78:	18c00044 	addi	r3,r3,1
 5082b7c:	da011d15 	stw	r8,1140(sp)
 5082b80:	d8c11c15 	stw	r3,1136(sp)
 5082b84:	008001c4 	movi	r2,7
 5082b88:	10c15d16 	blt	r2,r3,5083100 <___vfprintf_internal_r+0x6a4>
 5082b8c:	4a400204 	addi	r9,r9,8
 5082b90:	d8812c17 	ldw	r2,1200(sp)
 5082b94:	1405883a 	add	r2,r2,r16
 5082b98:	d8812c15 	stw	r2,1200(sp)
 5082b9c:	90800007 	ldb	r2,0(r18)
 5082ba0:	10013b26 	beq	r2,zero,5083090 <___vfprintf_internal_r+0x634>
 5082ba4:	95400044 	addi	r21,r18,1
 5082ba8:	94800047 	ldb	r18,1(r18)
 5082bac:	d8012585 	stb	zero,1174(sp)
 5082bb0:	073fffc4 	movi	fp,-1
 5082bb4:	d8012e15 	stw	zero,1208(sp)
 5082bb8:	0021883a 	mov	r16,zero
 5082bbc:	00c01604 	movi	r3,88
 5082bc0:	01400244 	movi	r5,9
 5082bc4:	02800a84 	movi	r10,42
 5082bc8:	01c01b04 	movi	r7,108
 5082bcc:	01800ac4 	movi	r6,43
 5082bd0:	02c00804 	movi	r11,32
 5082bd4:	ad400044 	addi	r21,r21,1
 5082bd8:	90bff804 	addi	r2,r18,-32
 5082bdc:	1880092e 	bgeu	r3,r2,5082c04 <___vfprintf_internal_r+0x1a8>
 5082be0:	90012b26 	beq	r18,zero,5083090 <___vfprintf_internal_r+0x634>
 5082be4:	00c00044 	movi	r3,1
 5082be8:	d8c12815 	stw	r3,1184(sp)
 5082bec:	dc810405 	stb	r18,1040(sp)
 5082bf0:	d8012585 	stb	zero,1174(sp)
 5082bf4:	d8c12b15 	stw	r3,1196(sp)
 5082bf8:	dcc10404 	addi	r19,sp,1040
 5082bfc:	d8013115 	stw	zero,1220(sp)
 5082c00:	00008806 	br	5082e24 <___vfprintf_internal_r+0x3c8>
 5082c04:	1085883a 	add	r2,r2,r2
 5082c08:	1085883a 	add	r2,r2,r2
 5082c0c:	01014234 	movhi	r4,1288
 5082c10:	210b0804 	addi	r4,r4,11296
 5082c14:	1105883a 	add	r2,r2,r4
 5082c18:	10800017 	ldw	r2,0(r2)
 5082c1c:	1000683a 	jmp	r2
 5082c20:	050831d4 	movui	r20,8391
 5082c24:	05082be0 	cmpeqi	r20,zero,8367
 5082c28:	05082be0 	cmpeqi	r20,zero,8367
 5082c2c:	050831e8 	cmpgeui	r20,zero,8391
 5082c30:	05082be0 	cmpeqi	r20,zero,8367
 5082c34:	05082be0 	cmpeqi	r20,zero,8367
 5082c38:	05082be0 	cmpeqi	r20,zero,8367
 5082c3c:	05082be0 	cmpeqi	r20,zero,8367
 5082c40:	05082be0 	cmpeqi	r20,zero,8367
 5082c44:	05082be0 	cmpeqi	r20,zero,8367
 5082c48:	050832d0 	cmplti	r20,zero,8395
 5082c4c:	0508318c 	andi	r20,zero,8390
 5082c50:	05082be0 	cmpeqi	r20,zero,8367
 5082c54:	05082fb4 	movhi	r20,8382
 5082c58:	05083198 	cmpnei	r20,zero,8390
 5082c5c:	05082be0 	cmpeqi	r20,zero,8367
 5082c60:	050831f4 	movhi	r20,8391
 5082c64:	050832f4 	movhi	r20,8395
 5082c68:	050832f4 	movhi	r20,8395
 5082c6c:	050832f4 	movhi	r20,8395
 5082c70:	050832f4 	movhi	r20,8395
 5082c74:	050832f4 	movhi	r20,8395
 5082c78:	050832f4 	movhi	r20,8395
 5082c7c:	050832f4 	movhi	r20,8395
 5082c80:	050832f4 	movhi	r20,8395
 5082c84:	050832f4 	movhi	r20,8395
 5082c88:	05082be0 	cmpeqi	r20,zero,8367
 5082c8c:	05082be0 	cmpeqi	r20,zero,8367
 5082c90:	05082be0 	cmpeqi	r20,zero,8367
 5082c94:	05082be0 	cmpeqi	r20,zero,8367
 5082c98:	05082be0 	cmpeqi	r20,zero,8367
 5082c9c:	05082be0 	cmpeqi	r20,zero,8367
 5082ca0:	05082be0 	cmpeqi	r20,zero,8367
 5082ca4:	05082be0 	cmpeqi	r20,zero,8367
 5082ca8:	05082be0 	cmpeqi	r20,zero,8367
 5082cac:	05082be0 	cmpeqi	r20,zero,8367
 5082cb0:	05082f50 	cmplti	r20,zero,8381
 5082cb4:	0508331c 	xori	r20,zero,8396
 5082cb8:	05082be0 	cmpeqi	r20,zero,8367
 5082cbc:	0508331c 	xori	r20,zero,8396
 5082cc0:	05082be0 	cmpeqi	r20,zero,8367
 5082cc4:	05082be0 	cmpeqi	r20,zero,8367
 5082cc8:	05082be0 	cmpeqi	r20,zero,8367
 5082ccc:	05082be0 	cmpeqi	r20,zero,8367
 5082cd0:	0508348c 	andi	r20,zero,8402
 5082cd4:	05082be0 	cmpeqi	r20,zero,8367
 5082cd8:	05082be0 	cmpeqi	r20,zero,8367
 5082cdc:	05082f18 	cmpnei	r20,zero,8380
 5082ce0:	05082be0 	cmpeqi	r20,zero,8367
 5082ce4:	05082be0 	cmpeqi	r20,zero,8367
 5082ce8:	05082be0 	cmpeqi	r20,zero,8367
 5082cec:	05082be0 	cmpeqi	r20,zero,8367
 5082cf0:	05082be0 	cmpeqi	r20,zero,8367
 5082cf4:	05082d84 	movi	r20,8374
 5082cf8:	05082be0 	cmpeqi	r20,zero,8367
 5082cfc:	05082be0 	cmpeqi	r20,zero,8367
 5082d00:	05083200 	call	508320 <__alt_mem_sdram+0x508320>
 5082d04:	05082be0 	cmpeqi	r20,zero,8367
 5082d08:	05082be0 	cmpeqi	r20,zero,8367
 5082d0c:	05082be0 	cmpeqi	r20,zero,8367
 5082d10:	05082be0 	cmpeqi	r20,zero,8367
 5082d14:	05082be0 	cmpeqi	r20,zero,8367
 5082d18:	05082be0 	cmpeqi	r20,zero,8367
 5082d1c:	05082be0 	cmpeqi	r20,zero,8367
 5082d20:	05082be0 	cmpeqi	r20,zero,8367
 5082d24:	05082be0 	cmpeqi	r20,zero,8367
 5082d28:	05082be0 	cmpeqi	r20,zero,8367
 5082d2c:	05083274 	movhi	r20,8393
 5082d30:	05082f54 	movui	r20,8381
 5082d34:	0508331c 	xori	r20,zero,8396
 5082d38:	0508331c 	xori	r20,zero,8396
 5082d3c:	0508331c 	xori	r20,zero,8396
 5082d40:	05083254 	movui	r20,8393
 5082d44:	05082f54 	movui	r20,8381
 5082d48:	05082be0 	cmpeqi	r20,zero,8367
 5082d4c:	05082be0 	cmpeqi	r20,zero,8367
 5082d50:	05083260 	cmpeqi	r20,zero,8393
 5082d54:	05082be0 	cmpeqi	r20,zero,8367
 5082d58:	050832a4 	muli	r20,zero,8394
 5082d5c:	05082f1c 	xori	r20,zero,8380
 5082d60:	050833a4 	muli	r20,zero,8398
 5082d64:	050833f0 	cmpltui	r20,zero,8399
 5082d68:	05082be0 	cmpeqi	r20,zero,8367
 5082d6c:	050833fc 	xorhi	r20,zero,8399
 5082d70:	05082be0 	cmpeqi	r20,zero,8367
 5082d74:	05082d88 	cmpgei	r20,zero,8374
 5082d78:	05082be0 	cmpeqi	r20,zero,8367
 5082d7c:	05082be0 	cmpeqi	r20,zero,8367
 5082d80:	05083458 	cmpnei	r20,zero,8401
 5082d84:	84000414 	ori	r16,r16,16
 5082d88:	8080080c 	andi	r2,r16,32
 5082d8c:	1000f51e 	bne	r2,zero,5083164 <___vfprintf_internal_r+0x708>
 5082d90:	8080040c 	andi	r2,r16,16
 5082d94:	10042c26 	beq	r2,zero,5083e48 <___vfprintf_internal_r+0x13ec>
 5082d98:	da012d17 	ldw	r8,1204(sp)
 5082d9c:	002d883a 	mov	r22,zero
 5082da0:	00c00044 	movi	r3,1
 5082da4:	45c00017 	ldw	r23,0(r8)
 5082da8:	42000104 	addi	r8,r8,4
 5082dac:	da012d15 	stw	r8,1204(sp)
 5082db0:	b805883a 	mov	r2,r23
 5082db4:	d8012585 	stb	zero,1174(sp)
 5082db8:	e0000216 	blt	fp,zero,5082dc4 <___vfprintf_internal_r+0x368>
 5082dbc:	013fdfc4 	movi	r4,-129
 5082dc0:	8120703a 	and	r16,r16,r4
 5082dc4:	1002671e 	bne	r2,zero,5083764 <___vfprintf_internal_r+0xd08>
 5082dc8:	e002661e 	bne	fp,zero,5083764 <___vfprintf_internal_r+0xd08>
 5082dcc:	18c03fcc 	andi	r3,r3,255
 5082dd0:	1803561e 	bne	r3,zero,5083b2c <___vfprintf_internal_r+0x10d0>
 5082dd4:	8080004c 	andi	r2,r16,1
 5082dd8:	10035426 	beq	r2,zero,5083b2c <___vfprintf_internal_r+0x10d0>
 5082ddc:	da013917 	ldw	r8,1252(sp)
 5082de0:	00800c04 	movi	r2,48
 5082de4:	d8810dc5 	stb	r2,1079(sp)
 5082de8:	da012b15 	stw	r8,1196(sp)
 5082dec:	dcc10dc4 	addi	r19,sp,1079
 5082df0:	d8812b17 	ldw	r2,1196(sp)
 5082df4:	d8812815 	stw	r2,1184(sp)
 5082df8:	1700010e 	bge	r2,fp,5082e00 <___vfprintf_internal_r+0x3a4>
 5082dfc:	df012815 	stw	fp,1184(sp)
 5082e00:	d8812583 	ldbu	r2,1174(sp)
 5082e04:	df013115 	stw	fp,1220(sp)
 5082e08:	10803fcc 	andi	r2,r2,255
 5082e0c:	1080201c 	xori	r2,r2,128
 5082e10:	10bfe004 	addi	r2,r2,-128
 5082e14:	10000326 	beq	r2,zero,5082e24 <___vfprintf_internal_r+0x3c8>
 5082e18:	da012817 	ldw	r8,1184(sp)
 5082e1c:	42000044 	addi	r8,r8,1
 5082e20:	da012815 	stw	r8,1184(sp)
 5082e24:	80c0008c 	andi	r3,r16,2
 5082e28:	d8c12a15 	stw	r3,1192(sp)
 5082e2c:	18000326 	beq	r3,zero,5082e3c <___vfprintf_internal_r+0x3e0>
 5082e30:	da012817 	ldw	r8,1184(sp)
 5082e34:	42000084 	addi	r8,r8,2
 5082e38:	da012815 	stw	r8,1184(sp)
 5082e3c:	80c0210c 	andi	r3,r16,132
 5082e40:	d8c12f15 	stw	r3,1212(sp)
 5082e44:	1801941e 	bne	r3,zero,5083498 <___vfprintf_internal_r+0xa3c>
 5082e48:	da012e17 	ldw	r8,1208(sp)
 5082e4c:	d8c12817 	ldw	r3,1184(sp)
 5082e50:	40edc83a 	sub	r22,r8,r3
 5082e54:	0581900e 	bge	zero,r22,5083498 <___vfprintf_internal_r+0xa3c>
 5082e58:	02800404 	movi	r10,16
 5082e5c:	da011d17 	ldw	r8,1140(sp)
 5082e60:	d8c11c17 	ldw	r3,1136(sp)
 5082e64:	05c14274 	movhi	r23,1289
 5082e68:	bdfc4984 	addi	r23,r23,-3802
 5082e6c:	5580200e 	bge	r10,r22,5082ef0 <___vfprintf_internal_r+0x494>
 5082e70:	dc813815 	stw	r18,1248(sp)
 5082e74:	5039883a 	mov	fp,r10
 5082e78:	b825883a 	mov	r18,r23
 5082e7c:	050001c4 	movi	r20,7
 5082e80:	b02f883a 	mov	r23,r22
 5082e84:	802d883a 	mov	r22,r16
 5082e88:	dc012917 	ldw	r16,1188(sp)
 5082e8c:	00000306 	br	5082e9c <___vfprintf_internal_r+0x440>
 5082e90:	bdfffc04 	addi	r23,r23,-16
 5082e94:	4a400204 	addi	r9,r9,8
 5082e98:	e5c0110e 	bge	fp,r23,5082ee0 <___vfprintf_internal_r+0x484>
 5082e9c:	4c800015 	stw	r18,0(r9)
 5082ea0:	4f000115 	stw	fp,4(r9)
 5082ea4:	42000404 	addi	r8,r8,16
 5082ea8:	18c00044 	addi	r3,r3,1
 5082eac:	da011d15 	stw	r8,1140(sp)
 5082eb0:	d8c11c15 	stw	r3,1136(sp)
 5082eb4:	a0fff60e 	bge	r20,r3,5082e90 <___vfprintf_internal_r+0x434>
 5082eb8:	8809883a 	mov	r4,r17
 5082ebc:	800b883a 	mov	r5,r16
 5082ec0:	d9811b04 	addi	r6,sp,1132
 5082ec4:	5082a280 	call	5082a28 <__sprint_r>
 5082ec8:	1000771e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5082ecc:	bdfffc04 	addi	r23,r23,-16
 5082ed0:	da011d17 	ldw	r8,1140(sp)
 5082ed4:	d8c11c17 	ldw	r3,1136(sp)
 5082ed8:	da400404 	addi	r9,sp,16
 5082edc:	e5ffef16 	blt	fp,r23,5082e9c <___vfprintf_internal_r+0x440>
 5082ee0:	b021883a 	mov	r16,r22
 5082ee4:	b82d883a 	mov	r22,r23
 5082ee8:	902f883a 	mov	r23,r18
 5082eec:	dc813817 	ldw	r18,1248(sp)
 5082ef0:	4dc00015 	stw	r23,0(r9)
 5082ef4:	4d800115 	stw	r22,4(r9)
 5082ef8:	4591883a 	add	r8,r8,r22
 5082efc:	18c00044 	addi	r3,r3,1
 5082f00:	da011d15 	stw	r8,1140(sp)
 5082f04:	d8c11c15 	stw	r3,1136(sp)
 5082f08:	008001c4 	movi	r2,7
 5082f0c:	10c36d16 	blt	r2,r3,5083cc4 <___vfprintf_internal_r+0x1268>
 5082f10:	4a400204 	addi	r9,r9,8
 5082f14:	00016206 	br	50834a0 <___vfprintf_internal_r+0xa44>
 5082f18:	84000414 	ori	r16,r16,16
 5082f1c:	8080080c 	andi	r2,r16,32
 5082f20:	1000801e 	bne	r2,zero,5083124 <___vfprintf_internal_r+0x6c8>
 5082f24:	8080040c 	andi	r2,r16,16
 5082f28:	1003da26 	beq	r2,zero,5083e94 <___vfprintf_internal_r+0x1438>
 5082f2c:	d8c12d17 	ldw	r3,1204(sp)
 5082f30:	002d883a 	mov	r22,zero
 5082f34:	1dc00017 	ldw	r23,0(r3)
 5082f38:	18c00104 	addi	r3,r3,4
 5082f3c:	d8c12d15 	stw	r3,1204(sp)
 5082f40:	b805883a 	mov	r2,r23
 5082f44:	0007883a 	mov	r3,zero
 5082f48:	d8012585 	stb	zero,1174(sp)
 5082f4c:	003f9a06 	br	5082db8 <___vfprintf_internal_r+0x35c>
 5082f50:	84000414 	ori	r16,r16,16
 5082f54:	8080080c 	andi	r2,r16,32
 5082f58:	10007b1e 	bne	r2,zero,5083148 <___vfprintf_internal_r+0x6ec>
 5082f5c:	8080040c 	andi	r2,r16,16
 5082f60:	1003ed26 	beq	r2,zero,5083f18 <___vfprintf_internal_r+0x14bc>
 5082f64:	d9012d17 	ldw	r4,1204(sp)
 5082f68:	25c00017 	ldw	r23,0(r4)
 5082f6c:	21000104 	addi	r4,r4,4
 5082f70:	d9012d15 	stw	r4,1204(sp)
 5082f74:	b82dd7fa 	srai	r22,r23,31
 5082f78:	b005883a 	mov	r2,r22
 5082f7c:	1003230e 	bge	r2,zero,5083c0c <___vfprintf_internal_r+0x11b0>
 5082f80:	05efc83a 	sub	r23,zero,r23
 5082f84:	b804c03a 	cmpne	r2,r23,zero
 5082f88:	05adc83a 	sub	r22,zero,r22
 5082f8c:	b0adc83a 	sub	r22,r22,r2
 5082f90:	00800b44 	movi	r2,45
 5082f94:	d8812585 	stb	r2,1174(sp)
 5082f98:	00c00044 	movi	r3,1
 5082f9c:	bd84b03a 	or	r2,r23,r22
 5082fa0:	003f8506 	br	5082db8 <___vfprintf_internal_r+0x35c>
 5082fa4:	da012e17 	ldw	r8,1208(sp)
 5082fa8:	d8812d15 	stw	r2,1204(sp)
 5082fac:	0211c83a 	sub	r8,zero,r8
 5082fb0:	da012e15 	stw	r8,1208(sp)
 5082fb4:	84000114 	ori	r16,r16,4
 5082fb8:	ac800007 	ldb	r18,0(r21)
 5082fbc:	003f0506 	br	5082bd4 <___vfprintf_internal_r+0x178>
 5082fc0:	d9013017 	ldw	r4,1216(sp)
 5082fc4:	d9412917 	ldw	r5,1188(sp)
 5082fc8:	50849640 	call	5084964 <__swsetup_r>
 5082fcc:	10003d1e 	bne	r2,zero,50830c4 <___vfprintf_internal_r+0x668>
 5082fd0:	d8c12917 	ldw	r3,1188(sp)
 5082fd4:	1880030b 	ldhu	r2,12(r3)
 5082fd8:	00c00284 	movi	r3,10
 5082fdc:	1100068c 	andi	r4,r2,26
 5082fe0:	20fec21e 	bne	r4,r3,5082aec <___vfprintf_internal_r+0x90>
 5082fe4:	d9012917 	ldw	r4,1188(sp)
 5082fe8:	20c0038b 	ldhu	r3,14(r4)
 5082fec:	193fffcc 	andi	r4,r3,65535
 5082ff0:	2120001c 	xori	r4,r4,32768
 5082ff4:	21200004 	addi	r4,r4,-32768
 5082ff8:	203ebc16 	blt	r4,zero,5082aec <___vfprintf_internal_r+0x90>
 5082ffc:	da012917 	ldw	r8,1188(sp)
 5083000:	d9013017 	ldw	r4,1216(sp)
 5083004:	d9c12d17 	ldw	r7,1204(sp)
 5083008:	42800717 	ldw	r10,28(r8)
 508300c:	42400917 	ldw	r9,36(r8)
 5083010:	10bfff4c 	andi	r2,r2,65533
 5083014:	02010004 	movi	r8,1024
 5083018:	d881070d 	sth	r2,1052(sp)
 508301c:	d9410404 	addi	r5,sp,1040
 5083020:	d8800404 	addi	r2,sp,16
 5083024:	800d883a 	mov	r6,r16
 5083028:	d8c1078d 	sth	r3,1054(sp)
 508302c:	da810b15 	stw	r10,1068(sp)
 5083030:	da410d15 	stw	r9,1076(sp)
 5083034:	d8810415 	stw	r2,1040(sp)
 5083038:	d8810815 	stw	r2,1056(sp)
 508303c:	da010615 	stw	r8,1048(sp)
 5083040:	da010915 	stw	r8,1060(sp)
 5083044:	d8010a15 	stw	zero,1064(sp)
 5083048:	5082a5c0 	call	5082a5c <___vfprintf_internal_r>
 508304c:	d8812c15 	stw	r2,1200(sp)
 5083050:	10000416 	blt	r2,zero,5083064 <___vfprintf_internal_r+0x608>
 5083054:	d9013017 	ldw	r4,1216(sp)
 5083058:	d9410404 	addi	r5,sp,1040
 508305c:	50862fc0 	call	50862fc <_fflush_r>
 5083060:	1005d81e 	bne	r2,zero,50847c4 <___vfprintf_internal_r+0x1d68>
 5083064:	d881070b 	ldhu	r2,1052(sp)
 5083068:	1080100c 	andi	r2,r2,64
 508306c:	10bfffcc 	andi	r2,r2,65535
 5083070:	10a0001c 	xori	r2,r2,32768
 5083074:	10a00004 	addi	r2,r2,-32768
 5083078:	10001426 	beq	r2,zero,50830cc <___vfprintf_internal_r+0x670>
 508307c:	d8c12917 	ldw	r3,1188(sp)
 5083080:	1880030b 	ldhu	r2,12(r3)
 5083084:	10801014 	ori	r2,r2,64
 5083088:	1880030d 	sth	r2,12(r3)
 508308c:	00000f06 	br	50830cc <___vfprintf_internal_r+0x670>
 5083090:	d8811d17 	ldw	r2,1140(sp)
 5083094:	10000426 	beq	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083098:	d9013017 	ldw	r4,1216(sp)
 508309c:	d9412917 	ldw	r5,1188(sp)
 50830a0:	d9811b04 	addi	r6,sp,1132
 50830a4:	5082a280 	call	5082a28 <__sprint_r>
 50830a8:	d8c12917 	ldw	r3,1188(sp)
 50830ac:	1880030b 	ldhu	r2,12(r3)
 50830b0:	1080100c 	andi	r2,r2,64
 50830b4:	10bfffcc 	andi	r2,r2,65535
 50830b8:	10a0001c 	xori	r2,r2,32768
 50830bc:	10a00004 	addi	r2,r2,-32768
 50830c0:	10000226 	beq	r2,zero,50830cc <___vfprintf_internal_r+0x670>
 50830c4:	00bfffc4 	movi	r2,-1
 50830c8:	d8812c15 	stw	r2,1200(sp)
 50830cc:	d8812c17 	ldw	r2,1200(sp)
 50830d0:	dfc14617 	ldw	ra,1304(sp)
 50830d4:	df014517 	ldw	fp,1300(sp)
 50830d8:	ddc14417 	ldw	r23,1296(sp)
 50830dc:	dd814317 	ldw	r22,1292(sp)
 50830e0:	dd414217 	ldw	r21,1288(sp)
 50830e4:	dd014117 	ldw	r20,1284(sp)
 50830e8:	dcc14017 	ldw	r19,1280(sp)
 50830ec:	dc813f17 	ldw	r18,1276(sp)
 50830f0:	dc413e17 	ldw	r17,1272(sp)
 50830f4:	dc013d17 	ldw	r16,1268(sp)
 50830f8:	dec14704 	addi	sp,sp,1308
 50830fc:	f800283a 	ret
 5083100:	d9412917 	ldw	r5,1188(sp)
 5083104:	8809883a 	mov	r4,r17
 5083108:	d9811b04 	addi	r6,sp,1132
 508310c:	5082a280 	call	5082a28 <__sprint_r>
 5083110:	103fe51e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083114:	da400404 	addi	r9,sp,16
 5083118:	003e9d06 	br	5082b90 <___vfprintf_internal_r+0x134>
 508311c:	50865a40 	call	50865a4 <__sinit>
 5083120:	003e6606 	br	5082abc <___vfprintf_internal_r+0x60>
 5083124:	d8812d17 	ldw	r2,1204(sp)
 5083128:	0007883a 	mov	r3,zero
 508312c:	15c00017 	ldw	r23,0(r2)
 5083130:	15800117 	ldw	r22,4(r2)
 5083134:	10800204 	addi	r2,r2,8
 5083138:	d8812d15 	stw	r2,1204(sp)
 508313c:	d8012585 	stb	zero,1174(sp)
 5083140:	bd84b03a 	or	r2,r23,r22
 5083144:	003f1c06 	br	5082db8 <___vfprintf_internal_r+0x35c>
 5083148:	d8c12d17 	ldw	r3,1204(sp)
 508314c:	18800117 	ldw	r2,4(r3)
 5083150:	1dc00017 	ldw	r23,0(r3)
 5083154:	18c00204 	addi	r3,r3,8
 5083158:	d8c12d15 	stw	r3,1204(sp)
 508315c:	102d883a 	mov	r22,r2
 5083160:	003f8606 	br	5082f7c <___vfprintf_internal_r+0x520>
 5083164:	d8c12d17 	ldw	r3,1204(sp)
 5083168:	d9012d17 	ldw	r4,1204(sp)
 508316c:	1dc00017 	ldw	r23,0(r3)
 5083170:	1d800117 	ldw	r22,4(r3)
 5083174:	21000204 	addi	r4,r4,8
 5083178:	00c00044 	movi	r3,1
 508317c:	d9012d15 	stw	r4,1204(sp)
 5083180:	bd84b03a 	or	r2,r23,r22
 5083184:	d8012585 	stb	zero,1174(sp)
 5083188:	003f0b06 	br	5082db8 <___vfprintf_internal_r+0x35c>
 508318c:	d9812585 	stb	r6,1174(sp)
 5083190:	ac800007 	ldb	r18,0(r21)
 5083194:	003e8f06 	br	5082bd4 <___vfprintf_internal_r+0x178>
 5083198:	ac800007 	ldb	r18,0(r21)
 508319c:	a9000044 	addi	r4,r21,1
 50831a0:	92857d26 	beq	r18,r10,5084798 <___vfprintf_internal_r+0x1d3c>
 50831a4:	90bff404 	addi	r2,r18,-48
 50831a8:	0039883a 	mov	fp,zero
 50831ac:	28800736 	bltu	r5,r2,50831cc <___vfprintf_internal_r+0x770>
 50831b0:	24800007 	ldb	r18,0(r4)
 50831b4:	e70002a4 	muli	fp,fp,10
 50831b8:	21000044 	addi	r4,r4,1
 50831bc:	1739883a 	add	fp,r2,fp
 50831c0:	90bff404 	addi	r2,r18,-48
 50831c4:	28bffa2e 	bgeu	r5,r2,50831b0 <___vfprintf_internal_r+0x754>
 50831c8:	e0044216 	blt	fp,zero,50842d4 <___vfprintf_internal_r+0x1878>
 50831cc:	202b883a 	mov	r21,r4
 50831d0:	003e8106 	br	5082bd8 <___vfprintf_internal_r+0x17c>
 50831d4:	d8812587 	ldb	r2,1174(sp)
 50831d8:	1003581e 	bne	r2,zero,5083f3c <___vfprintf_internal_r+0x14e0>
 50831dc:	dac12585 	stb	r11,1174(sp)
 50831e0:	ac800007 	ldb	r18,0(r21)
 50831e4:	003e7b06 	br	5082bd4 <___vfprintf_internal_r+0x178>
 50831e8:	84000054 	ori	r16,r16,1
 50831ec:	ac800007 	ldb	r18,0(r21)
 50831f0:	003e7806 	br	5082bd4 <___vfprintf_internal_r+0x178>
 50831f4:	84002014 	ori	r16,r16,128
 50831f8:	ac800007 	ldb	r18,0(r21)
 50831fc:	003e7506 	br	5082bd4 <___vfprintf_internal_r+0x178>
 5083200:	02014274 	movhi	r8,1289
 5083204:	423c3d04 	addi	r8,r8,-3852
 5083208:	da013615 	stw	r8,1240(sp)
 508320c:	8080080c 	andi	r2,r16,32
 5083210:	10009626 	beq	r2,zero,508346c <___vfprintf_internal_r+0xa10>
 5083214:	d8812d17 	ldw	r2,1204(sp)
 5083218:	15c00017 	ldw	r23,0(r2)
 508321c:	15800117 	ldw	r22,4(r2)
 5083220:	10800204 	addi	r2,r2,8
 5083224:	d8812d15 	stw	r2,1204(sp)
 5083228:	8080004c 	andi	r2,r16,1
 508322c:	1002ae26 	beq	r2,zero,5083ce8 <___vfprintf_internal_r+0x128c>
 5083230:	bd84b03a 	or	r2,r23,r22
 5083234:	10032a26 	beq	r2,zero,5083ee0 <___vfprintf_internal_r+0x1484>
 5083238:	00c00c04 	movi	r3,48
 508323c:	d8c12505 	stb	r3,1172(sp)
 5083240:	dc812545 	stb	r18,1173(sp)
 5083244:	84000094 	ori	r16,r16,2
 5083248:	00c00084 	movi	r3,2
 508324c:	d8012585 	stb	zero,1174(sp)
 5083250:	003ed906 	br	5082db8 <___vfprintf_internal_r+0x35c>
 5083254:	84001014 	ori	r16,r16,64
 5083258:	ac800007 	ldb	r18,0(r21)
 508325c:	003e5d06 	br	5082bd4 <___vfprintf_internal_r+0x178>
 5083260:	ac800007 	ldb	r18,0(r21)
 5083264:	a805883a 	mov	r2,r21
 5083268:	91c43226 	beq	r18,r7,5084334 <___vfprintf_internal_r+0x18d8>
 508326c:	84000414 	ori	r16,r16,16
 5083270:	003e5806 	br	5082bd4 <___vfprintf_internal_r+0x178>
 5083274:	d8c12d17 	ldw	r3,1204(sp)
 5083278:	02000044 	movi	r8,1
 508327c:	da012815 	stw	r8,1184(sp)
 5083280:	18800017 	ldw	r2,0(r3)
 5083284:	18c00104 	addi	r3,r3,4
 5083288:	d8012585 	stb	zero,1174(sp)
 508328c:	d8810405 	stb	r2,1040(sp)
 5083290:	d8c12d15 	stw	r3,1204(sp)
 5083294:	da012b15 	stw	r8,1196(sp)
 5083298:	dcc10404 	addi	r19,sp,1040
 508329c:	d8013115 	stw	zero,1220(sp)
 50832a0:	003ee006 	br	5082e24 <___vfprintf_internal_r+0x3c8>
 50832a4:	8080080c 	andi	r2,r16,32
 50832a8:	10031026 	beq	r2,zero,5083eec <___vfprintf_internal_r+0x1490>
 50832ac:	d9012d17 	ldw	r4,1204(sp)
 50832b0:	da012c17 	ldw	r8,1200(sp)
 50832b4:	20800017 	ldw	r2,0(r4)
 50832b8:	4007d7fa 	srai	r3,r8,31
 50832bc:	21000104 	addi	r4,r4,4
 50832c0:	d9012d15 	stw	r4,1204(sp)
 50832c4:	12000015 	stw	r8,0(r2)
 50832c8:	10c00115 	stw	r3,4(r2)
 50832cc:	003e1906 	br	5082b34 <___vfprintf_internal_r+0xd8>
 50832d0:	da012d17 	ldw	r8,1204(sp)
 50832d4:	d9012d17 	ldw	r4,1204(sp)
 50832d8:	42000017 	ldw	r8,0(r8)
 50832dc:	20800104 	addi	r2,r4,4
 50832e0:	da012e15 	stw	r8,1208(sp)
 50832e4:	403f2f16 	blt	r8,zero,5082fa4 <___vfprintf_internal_r+0x548>
 50832e8:	d8812d15 	stw	r2,1204(sp)
 50832ec:	ac800007 	ldb	r18,0(r21)
 50832f0:	003e3806 	br	5082bd4 <___vfprintf_internal_r+0x178>
 50832f4:	0009883a 	mov	r4,zero
 50832f8:	90bff404 	addi	r2,r18,-48
 50832fc:	ac800007 	ldb	r18,0(r21)
 5083300:	210002a4 	muli	r4,r4,10
 5083304:	ad400044 	addi	r21,r21,1
 5083308:	2089883a 	add	r4,r4,r2
 508330c:	90bff404 	addi	r2,r18,-48
 5083310:	28bffa2e 	bgeu	r5,r2,50832fc <___vfprintf_internal_r+0x8a0>
 5083314:	d9012e15 	stw	r4,1208(sp)
 5083318:	003e2f06 	br	5082bd8 <___vfprintf_internal_r+0x17c>
 508331c:	8080020c 	andi	r2,r16,8
 5083320:	1002d426 	beq	r2,zero,5083e74 <___vfprintf_internal_r+0x1418>
 5083324:	d8c12d17 	ldw	r3,1204(sp)
 5083328:	1d800017 	ldw	r22,0(r3)
 508332c:	1d000117 	ldw	r20,4(r3)
 5083330:	18c00204 	addi	r3,r3,8
 5083334:	d8c12d15 	stw	r3,1204(sp)
 5083338:	dd813315 	stw	r22,1228(sp)
 508333c:	dd013415 	stw	r20,1232(sp)
 5083340:	b009883a 	mov	r4,r22
 5083344:	a00b883a 	mov	r5,r20
 5083348:	da413c15 	stw	r9,1264(sp)
 508334c:	50895dc0 	call	50895dc <__isinfd>
 5083350:	da413c17 	ldw	r9,1264(sp)
 5083354:	b009883a 	mov	r4,r22
 5083358:	a00b883a 	mov	r5,r20
 508335c:	10035726 	beq	r2,zero,50840bc <___vfprintf_internal_r+0x1660>
 5083360:	000d883a 	mov	r6,zero
 5083364:	000f883a 	mov	r7,zero
 5083368:	508b27c0 	call	508b27c <__ltdf2>
 508336c:	da413c17 	ldw	r9,1264(sp)
 5083370:	10041b16 	blt	r2,zero,50843e0 <___vfprintf_internal_r+0x1984>
 5083374:	d8812583 	ldbu	r2,1174(sp)
 5083378:	00c011c4 	movi	r3,71
 508337c:	1c830b16 	blt	r3,r18,5083fac <___vfprintf_internal_r+0x1550>
 5083380:	04c14274 	movhi	r19,1289
 5083384:	9cfc3904 	addi	r19,r19,-3868
 5083388:	020000c4 	movi	r8,3
 508338c:	00ffdfc4 	movi	r3,-129
 5083390:	da012815 	stw	r8,1184(sp)
 5083394:	80e0703a 	and	r16,r16,r3
 5083398:	da012b15 	stw	r8,1196(sp)
 508339c:	d8013115 	stw	zero,1220(sp)
 50833a0:	003e9906 	br	5082e08 <___vfprintf_internal_r+0x3ac>
 50833a4:	d8812d17 	ldw	r2,1204(sp)
 50833a8:	d8c12d17 	ldw	r3,1204(sp)
 50833ac:	02014274 	movhi	r8,1289
 50833b0:	423c4204 	addi	r8,r8,-3832
 50833b4:	15c00017 	ldw	r23,0(r2)
 50833b8:	00800c04 	movi	r2,48
 50833bc:	18c00104 	addi	r3,r3,4
 50833c0:	d8812505 	stb	r2,1172(sp)
 50833c4:	00801e04 	movi	r2,120
 50833c8:	d8812545 	stb	r2,1173(sp)
 50833cc:	d8c12d15 	stw	r3,1204(sp)
 50833d0:	002d883a 	mov	r22,zero
 50833d4:	84000094 	ori	r16,r16,2
 50833d8:	da013615 	stw	r8,1240(sp)
 50833dc:	00c00084 	movi	r3,2
 50833e0:	04801e04 	movi	r18,120
 50833e4:	b805883a 	mov	r2,r23
 50833e8:	d8012585 	stb	zero,1174(sp)
 50833ec:	003e7206 	br	5082db8 <___vfprintf_internal_r+0x35c>
 50833f0:	84000814 	ori	r16,r16,32
 50833f4:	ac800007 	ldb	r18,0(r21)
 50833f8:	003df606 	br	5082bd4 <___vfprintf_internal_r+0x178>
 50833fc:	d8812d17 	ldw	r2,1204(sp)
 5083400:	d8012585 	stb	zero,1174(sp)
 5083404:	14c00017 	ldw	r19,0(r2)
 5083408:	15c00104 	addi	r23,r2,4
 508340c:	98040126 	beq	r19,zero,5084414 <___vfprintf_internal_r+0x19b8>
 5083410:	9809883a 	mov	r4,r19
 5083414:	e003dd16 	blt	fp,zero,508438c <___vfprintf_internal_r+0x1930>
 5083418:	000b883a 	mov	r5,zero
 508341c:	e00d883a 	mov	r6,fp
 5083420:	da413c15 	stw	r9,1264(sp)
 5083424:	5087c440 	call	5087c44 <memchr>
 5083428:	da413c17 	ldw	r9,1264(sp)
 508342c:	10042e26 	beq	r2,zero,50844e8 <___vfprintf_internal_r+0x1a8c>
 5083430:	14c5c83a 	sub	r2,r2,r19
 5083434:	d8812b15 	stw	r2,1196(sp)
 5083438:	e083790e 	bge	fp,r2,5084220 <___vfprintf_internal_r+0x17c4>
 508343c:	df012815 	stw	fp,1184(sp)
 5083440:	e0049516 	blt	fp,zero,5084698 <___vfprintf_internal_r+0x1c3c>
 5083444:	d8812583 	ldbu	r2,1174(sp)
 5083448:	df012b15 	stw	fp,1196(sp)
 508344c:	ddc12d15 	stw	r23,1204(sp)
 5083450:	d8013115 	stw	zero,1220(sp)
 5083454:	003e6c06 	br	5082e08 <___vfprintf_internal_r+0x3ac>
 5083458:	02014274 	movhi	r8,1289
 508345c:	423c4204 	addi	r8,r8,-3832
 5083460:	da013615 	stw	r8,1240(sp)
 5083464:	8080080c 	andi	r2,r16,32
 5083468:	103f6a1e 	bne	r2,zero,5083214 <___vfprintf_internal_r+0x7b8>
 508346c:	8080040c 	andi	r2,r16,16
 5083470:	10029326 	beq	r2,zero,5083ec0 <___vfprintf_internal_r+0x1464>
 5083474:	d8c12d17 	ldw	r3,1204(sp)
 5083478:	002d883a 	mov	r22,zero
 508347c:	1dc00017 	ldw	r23,0(r3)
 5083480:	18c00104 	addi	r3,r3,4
 5083484:	d8c12d15 	stw	r3,1204(sp)
 5083488:	003f6706 	br	5083228 <___vfprintf_internal_r+0x7cc>
 508348c:	84000214 	ori	r16,r16,8
 5083490:	ac800007 	ldb	r18,0(r21)
 5083494:	003dcf06 	br	5082bd4 <___vfprintf_internal_r+0x178>
 5083498:	da011d17 	ldw	r8,1140(sp)
 508349c:	d8c11c17 	ldw	r3,1136(sp)
 50834a0:	d8812587 	ldb	r2,1174(sp)
 50834a4:	10000b26 	beq	r2,zero,50834d4 <___vfprintf_internal_r+0xa78>
 50834a8:	d8812584 	addi	r2,sp,1174
 50834ac:	48800015 	stw	r2,0(r9)
 50834b0:	00800044 	movi	r2,1
 50834b4:	48800115 	stw	r2,4(r9)
 50834b8:	4091883a 	add	r8,r8,r2
 50834bc:	1887883a 	add	r3,r3,r2
 50834c0:	da011d15 	stw	r8,1140(sp)
 50834c4:	d8c11c15 	stw	r3,1136(sp)
 50834c8:	008001c4 	movi	r2,7
 50834cc:	10c18516 	blt	r2,r3,5083ae4 <___vfprintf_internal_r+0x1088>
 50834d0:	4a400204 	addi	r9,r9,8
 50834d4:	d9012a17 	ldw	r4,1192(sp)
 50834d8:	20000b26 	beq	r4,zero,5083508 <___vfprintf_internal_r+0xaac>
 50834dc:	d8812504 	addi	r2,sp,1172
 50834e0:	48800015 	stw	r2,0(r9)
 50834e4:	00800084 	movi	r2,2
 50834e8:	48800115 	stw	r2,4(r9)
 50834ec:	4091883a 	add	r8,r8,r2
 50834f0:	18c00044 	addi	r3,r3,1
 50834f4:	da011d15 	stw	r8,1140(sp)
 50834f8:	d8c11c15 	stw	r3,1136(sp)
 50834fc:	008001c4 	movi	r2,7
 5083500:	10c18116 	blt	r2,r3,5083b08 <___vfprintf_internal_r+0x10ac>
 5083504:	4a400204 	addi	r9,r9,8
 5083508:	d9012f17 	ldw	r4,1212(sp)
 508350c:	00802004 	movi	r2,128
 5083510:	2080fc26 	beq	r4,r2,5083904 <___vfprintf_internal_r+0xea8>
 5083514:	d8813117 	ldw	r2,1220(sp)
 5083518:	d9012b17 	ldw	r4,1196(sp)
 508351c:	112fc83a 	sub	r23,r2,r4
 5083520:	05c02a0e 	bge	zero,r23,50835cc <___vfprintf_internal_r+0xb70>
 5083524:	07000404 	movi	fp,16
 5083528:	05014274 	movhi	r20,1289
 508352c:	a53c4d84 	addi	r20,r20,-3786
 5083530:	e5c01d0e 	bge	fp,r23,50835a8 <___vfprintf_internal_r+0xb4c>
 5083534:	dc812a15 	stw	r18,1192(sp)
 5083538:	058001c4 	movi	r22,7
 508353c:	a025883a 	mov	r18,r20
 5083540:	8029883a 	mov	r20,r16
 5083544:	dc012917 	ldw	r16,1188(sp)
 5083548:	00000306 	br	5083558 <___vfprintf_internal_r+0xafc>
 508354c:	bdfffc04 	addi	r23,r23,-16
 5083550:	4a400204 	addi	r9,r9,8
 5083554:	e5c0110e 	bge	fp,r23,508359c <___vfprintf_internal_r+0xb40>
 5083558:	4c800015 	stw	r18,0(r9)
 508355c:	4f000115 	stw	fp,4(r9)
 5083560:	42000404 	addi	r8,r8,16
 5083564:	18c00044 	addi	r3,r3,1
 5083568:	da011d15 	stw	r8,1140(sp)
 508356c:	d8c11c15 	stw	r3,1136(sp)
 5083570:	b0fff60e 	bge	r22,r3,508354c <___vfprintf_internal_r+0xaf0>
 5083574:	8809883a 	mov	r4,r17
 5083578:	800b883a 	mov	r5,r16
 508357c:	d9811b04 	addi	r6,sp,1132
 5083580:	5082a280 	call	5082a28 <__sprint_r>
 5083584:	103ec81e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083588:	bdfffc04 	addi	r23,r23,-16
 508358c:	da011d17 	ldw	r8,1140(sp)
 5083590:	d8c11c17 	ldw	r3,1136(sp)
 5083594:	da400404 	addi	r9,sp,16
 5083598:	e5ffef16 	blt	fp,r23,5083558 <___vfprintf_internal_r+0xafc>
 508359c:	a021883a 	mov	r16,r20
 50835a0:	9029883a 	mov	r20,r18
 50835a4:	dc812a17 	ldw	r18,1192(sp)
 50835a8:	4d000015 	stw	r20,0(r9)
 50835ac:	4dc00115 	stw	r23,4(r9)
 50835b0:	45d1883a 	add	r8,r8,r23
 50835b4:	18c00044 	addi	r3,r3,1
 50835b8:	da011d15 	stw	r8,1140(sp)
 50835bc:	d8c11c15 	stw	r3,1136(sp)
 50835c0:	008001c4 	movi	r2,7
 50835c4:	10c13e16 	blt	r2,r3,5083ac0 <___vfprintf_internal_r+0x1064>
 50835c8:	4a400204 	addi	r9,r9,8
 50835cc:	8080400c 	andi	r2,r16,256
 50835d0:	1000831e 	bne	r2,zero,50837e0 <___vfprintf_internal_r+0xd84>
 50835d4:	d8812b17 	ldw	r2,1196(sp)
 50835d8:	4cc00015 	stw	r19,0(r9)
 50835dc:	48800115 	stw	r2,4(r9)
 50835e0:	4091883a 	add	r8,r8,r2
 50835e4:	18c00044 	addi	r3,r3,1
 50835e8:	da011d15 	stw	r8,1140(sp)
 50835ec:	d8c11c15 	stw	r3,1136(sp)
 50835f0:	008001c4 	movi	r2,7
 50835f4:	10c05316 	blt	r2,r3,5083744 <___vfprintf_internal_r+0xce8>
 50835f8:	4a400204 	addi	r9,r9,8
 50835fc:	8400010c 	andi	r16,r16,4
 5083600:	80002e26 	beq	r16,zero,50836bc <___vfprintf_internal_r+0xc60>
 5083604:	d8812e17 	ldw	r2,1208(sp)
 5083608:	d8c12817 	ldw	r3,1184(sp)
 508360c:	10e1c83a 	sub	r16,r2,r3
 5083610:	04002a0e 	bge	zero,r16,50836bc <___vfprintf_internal_r+0xc60>
 5083614:	04800404 	movi	r18,16
 5083618:	d8c11c17 	ldw	r3,1136(sp)
 508361c:	05c14274 	movhi	r23,1289
 5083620:	bdfc4984 	addi	r23,r23,-3802
 5083624:	9400170e 	bge	r18,r16,5083684 <___vfprintf_internal_r+0xc28>
 5083628:	04c001c4 	movi	r19,7
 508362c:	dd012917 	ldw	r20,1188(sp)
 5083630:	00000306 	br	5083640 <___vfprintf_internal_r+0xbe4>
 5083634:	843ffc04 	addi	r16,r16,-16
 5083638:	4a400204 	addi	r9,r9,8
 508363c:	9400110e 	bge	r18,r16,5083684 <___vfprintf_internal_r+0xc28>
 5083640:	4dc00015 	stw	r23,0(r9)
 5083644:	4c800115 	stw	r18,4(r9)
 5083648:	42000404 	addi	r8,r8,16
 508364c:	18c00044 	addi	r3,r3,1
 5083650:	da011d15 	stw	r8,1140(sp)
 5083654:	d8c11c15 	stw	r3,1136(sp)
 5083658:	98fff60e 	bge	r19,r3,5083634 <___vfprintf_internal_r+0xbd8>
 508365c:	8809883a 	mov	r4,r17
 5083660:	a00b883a 	mov	r5,r20
 5083664:	d9811b04 	addi	r6,sp,1132
 5083668:	5082a280 	call	5082a28 <__sprint_r>
 508366c:	103e8e1e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083670:	843ffc04 	addi	r16,r16,-16
 5083674:	da011d17 	ldw	r8,1140(sp)
 5083678:	d8c11c17 	ldw	r3,1136(sp)
 508367c:	da400404 	addi	r9,sp,16
 5083680:	943fef16 	blt	r18,r16,5083640 <___vfprintf_internal_r+0xbe4>
 5083684:	4dc00015 	stw	r23,0(r9)
 5083688:	4c000115 	stw	r16,4(r9)
 508368c:	8211883a 	add	r8,r16,r8
 5083690:	18c00044 	addi	r3,r3,1
 5083694:	da011d15 	stw	r8,1140(sp)
 5083698:	d8c11c15 	stw	r3,1136(sp)
 508369c:	008001c4 	movi	r2,7
 50836a0:	10c0060e 	bge	r2,r3,50836bc <___vfprintf_internal_r+0xc60>
 50836a4:	d9412917 	ldw	r5,1188(sp)
 50836a8:	8809883a 	mov	r4,r17
 50836ac:	d9811b04 	addi	r6,sp,1132
 50836b0:	5082a280 	call	5082a28 <__sprint_r>
 50836b4:	103e7c1e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 50836b8:	da011d17 	ldw	r8,1140(sp)
 50836bc:	dd012817 	ldw	r20,1184(sp)
 50836c0:	d9012e17 	ldw	r4,1208(sp)
 50836c4:	a100010e 	bge	r20,r4,50836cc <___vfprintf_internal_r+0xc70>
 50836c8:	2029883a 	mov	r20,r4
 50836cc:	d8812c17 	ldw	r2,1200(sp)
 50836d0:	1505883a 	add	r2,r2,r20
 50836d4:	d8812c15 	stw	r2,1200(sp)
 50836d8:	4000b91e 	bne	r8,zero,50839c0 <___vfprintf_internal_r+0xf64>
 50836dc:	d8011c15 	stw	zero,1136(sp)
 50836e0:	a8800007 	ldb	r2,0(r21)
 50836e4:	da400404 	addi	r9,sp,16
 50836e8:	103d141e 	bne	r2,zero,5082b3c <___vfprintf_internal_r+0xe0>
 50836ec:	a825883a 	mov	r18,r21
 50836f0:	003d2a06 	br	5082b9c <___vfprintf_internal_r+0x140>
 50836f4:	d9412917 	ldw	r5,1188(sp)
 50836f8:	8809883a 	mov	r4,r17
 50836fc:	d9811b04 	addi	r6,sp,1132
 5083700:	5082a280 	call	5082a28 <__sprint_r>
 5083704:	103e681e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083708:	da011d17 	ldw	r8,1140(sp)
 508370c:	da400404 	addi	r9,sp,16
 5083710:	8080004c 	andi	r2,r16,1
 5083714:	103fb926 	beq	r2,zero,50835fc <___vfprintf_internal_r+0xba0>
 5083718:	d8c11c17 	ldw	r3,1136(sp)
 508371c:	d9013717 	ldw	r4,1244(sp)
 5083720:	00800044 	movi	r2,1
 5083724:	48800115 	stw	r2,4(r9)
 5083728:	49000015 	stw	r4,0(r9)
 508372c:	4091883a 	add	r8,r8,r2
 5083730:	1887883a 	add	r3,r3,r2
 5083734:	da011d15 	stw	r8,1140(sp)
 5083738:	d8c11c15 	stw	r3,1136(sp)
 508373c:	008001c4 	movi	r2,7
 5083740:	10ffad0e 	bge	r2,r3,50835f8 <___vfprintf_internal_r+0xb9c>
 5083744:	d9412917 	ldw	r5,1188(sp)
 5083748:	8809883a 	mov	r4,r17
 508374c:	d9811b04 	addi	r6,sp,1132
 5083750:	5082a280 	call	5082a28 <__sprint_r>
 5083754:	103e541e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083758:	da400404 	addi	r9,sp,16
 508375c:	da011d17 	ldw	r8,1140(sp)
 5083760:	003fa606 	br	50835fc <___vfprintf_internal_r+0xba0>
 5083764:	18803fcc 	andi	r2,r3,255
 5083768:	00c00044 	movi	r3,1
 508376c:	10c10126 	beq	r2,r3,5083b74 <___vfprintf_internal_r+0x1118>
 5083770:	00c00084 	movi	r3,2
 5083774:	10c0f026 	beq	r2,r3,5083b38 <___vfprintf_internal_r+0x10dc>
 5083778:	d8c10dc4 	addi	r3,sp,1079
 508377c:	b808d0fa 	srli	r4,r23,3
 5083780:	b00a977a 	slli	r5,r22,29
 5083784:	b02cd0fa 	srli	r22,r22,3
 5083788:	bdc001cc 	andi	r23,r23,7
 508378c:	b8800c04 	addi	r2,r23,48
 5083790:	292eb03a 	or	r23,r5,r4
 5083794:	18800005 	stb	r2,0(r3)
 5083798:	bd88b03a 	or	r4,r23,r22
 508379c:	1827883a 	mov	r19,r3
 50837a0:	18ffffc4 	addi	r3,r3,-1
 50837a4:	203ff51e 	bne	r4,zero,508377c <___vfprintf_internal_r+0xd20>
 50837a8:	8100004c 	andi	r4,r16,1
 50837ac:	980b883a 	mov	r5,r19
 50837b0:	20000726 	beq	r4,zero,50837d0 <___vfprintf_internal_r+0xd74>
 50837b4:	10803fcc 	andi	r2,r2,255
 50837b8:	1080201c 	xori	r2,r2,128
 50837bc:	10bfe004 	addi	r2,r2,-128
 50837c0:	01000c04 	movi	r4,48
 50837c4:	11000226 	beq	r2,r4,50837d0 <___vfprintf_internal_r+0xd74>
 50837c8:	1827883a 	mov	r19,r3
 50837cc:	293fffc5 	stb	r4,-1(r5)
 50837d0:	d8812717 	ldw	r2,1180(sp)
 50837d4:	14c5c83a 	sub	r2,r2,r19
 50837d8:	d8812b15 	stw	r2,1196(sp)
 50837dc:	003d8406 	br	5082df0 <___vfprintf_internal_r+0x394>
 50837e0:	00801944 	movi	r2,101
 50837e4:	14807c0e 	bge	r2,r18,50839d8 <___vfprintf_internal_r+0xf7c>
 50837e8:	d9013317 	ldw	r4,1228(sp)
 50837ec:	d9413417 	ldw	r5,1232(sp)
 50837f0:	000d883a 	mov	r6,zero
 50837f4:	000f883a 	mov	r7,zero
 50837f8:	d8c13b15 	stw	r3,1260(sp)
 50837fc:	da013a15 	stw	r8,1256(sp)
 5083800:	da413c15 	stw	r9,1264(sp)
 5083804:	508b0fc0 	call	508b0fc <__eqdf2>
 5083808:	d8c13b17 	ldw	r3,1260(sp)
 508380c:	da013a17 	ldw	r8,1256(sp)
 5083810:	da413c17 	ldw	r9,1264(sp)
 5083814:	1001001e 	bne	r2,zero,5083c18 <___vfprintf_internal_r+0x11bc>
 5083818:	00814274 	movhi	r2,1289
 508381c:	10bc4904 	addi	r2,r2,-3804
 5083820:	48800015 	stw	r2,0(r9)
 5083824:	00800044 	movi	r2,1
 5083828:	48800115 	stw	r2,4(r9)
 508382c:	4091883a 	add	r8,r8,r2
 5083830:	1887883a 	add	r3,r3,r2
 5083834:	da011d15 	stw	r8,1140(sp)
 5083838:	d8c11c15 	stw	r3,1136(sp)
 508383c:	008001c4 	movi	r2,7
 5083840:	10c1dd16 	blt	r2,r3,5083fb8 <___vfprintf_internal_r+0x155c>
 5083844:	4a400204 	addi	r9,r9,8
 5083848:	d8812417 	ldw	r2,1168(sp)
 508384c:	d8c13217 	ldw	r3,1224(sp)
 5083850:	10c00216 	blt	r2,r3,508385c <___vfprintf_internal_r+0xe00>
 5083854:	8080004c 	andi	r2,r16,1
 5083858:	103f6826 	beq	r2,zero,50835fc <___vfprintf_internal_r+0xba0>
 508385c:	d8c11c17 	ldw	r3,1136(sp)
 5083860:	d9013717 	ldw	r4,1244(sp)
 5083864:	00800044 	movi	r2,1
 5083868:	48800115 	stw	r2,4(r9)
 508386c:	49000015 	stw	r4,0(r9)
 5083870:	4091883a 	add	r8,r8,r2
 5083874:	1887883a 	add	r3,r3,r2
 5083878:	da011d15 	stw	r8,1140(sp)
 508387c:	d8c11c15 	stw	r3,1136(sp)
 5083880:	008001c4 	movi	r2,7
 5083884:	10c2af16 	blt	r2,r3,5084344 <___vfprintf_internal_r+0x18e8>
 5083888:	4a400204 	addi	r9,r9,8
 508388c:	d8813217 	ldw	r2,1224(sp)
 5083890:	14bfffc4 	addi	r18,r2,-1
 5083894:	04bf590e 	bge	zero,r18,50835fc <___vfprintf_internal_r+0xba0>
 5083898:	04c00404 	movi	r19,16
 508389c:	d8c11c17 	ldw	r3,1136(sp)
 50838a0:	05014274 	movhi	r20,1289
 50838a4:	a53c4d84 	addi	r20,r20,-3786
 50838a8:	9c81630e 	bge	r19,r18,5083e38 <___vfprintf_internal_r+0x13dc>
 50838ac:	058001c4 	movi	r22,7
 50838b0:	ddc12917 	ldw	r23,1188(sp)
 50838b4:	00000306 	br	50838c4 <___vfprintf_internal_r+0xe68>
 50838b8:	4a400204 	addi	r9,r9,8
 50838bc:	94bffc04 	addi	r18,r18,-16
 50838c0:	9c815d0e 	bge	r19,r18,5083e38 <___vfprintf_internal_r+0x13dc>
 50838c4:	4d000015 	stw	r20,0(r9)
 50838c8:	4cc00115 	stw	r19,4(r9)
 50838cc:	42000404 	addi	r8,r8,16
 50838d0:	18c00044 	addi	r3,r3,1
 50838d4:	da011d15 	stw	r8,1140(sp)
 50838d8:	d8c11c15 	stw	r3,1136(sp)
 50838dc:	b0fff60e 	bge	r22,r3,50838b8 <___vfprintf_internal_r+0xe5c>
 50838e0:	8809883a 	mov	r4,r17
 50838e4:	b80b883a 	mov	r5,r23
 50838e8:	d9811b04 	addi	r6,sp,1132
 50838ec:	5082a280 	call	5082a28 <__sprint_r>
 50838f0:	103ded1e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 50838f4:	da011d17 	ldw	r8,1140(sp)
 50838f8:	d8c11c17 	ldw	r3,1136(sp)
 50838fc:	da400404 	addi	r9,sp,16
 5083900:	003fee06 	br	50838bc <___vfprintf_internal_r+0xe60>
 5083904:	d8812e17 	ldw	r2,1208(sp)
 5083908:	d9012817 	ldw	r4,1184(sp)
 508390c:	112fc83a 	sub	r23,r2,r4
 5083910:	05ff000e 	bge	zero,r23,5083514 <___vfprintf_internal_r+0xab8>
 5083914:	07000404 	movi	fp,16
 5083918:	05014274 	movhi	r20,1289
 508391c:	a53c4d84 	addi	r20,r20,-3786
 5083920:	e5c01d0e 	bge	fp,r23,5083998 <___vfprintf_internal_r+0xf3c>
 5083924:	dc812a15 	stw	r18,1192(sp)
 5083928:	058001c4 	movi	r22,7
 508392c:	a025883a 	mov	r18,r20
 5083930:	8029883a 	mov	r20,r16
 5083934:	dc012917 	ldw	r16,1188(sp)
 5083938:	00000306 	br	5083948 <___vfprintf_internal_r+0xeec>
 508393c:	bdfffc04 	addi	r23,r23,-16
 5083940:	4a400204 	addi	r9,r9,8
 5083944:	e5c0110e 	bge	fp,r23,508398c <___vfprintf_internal_r+0xf30>
 5083948:	4c800015 	stw	r18,0(r9)
 508394c:	4f000115 	stw	fp,4(r9)
 5083950:	42000404 	addi	r8,r8,16
 5083954:	18c00044 	addi	r3,r3,1
 5083958:	da011d15 	stw	r8,1140(sp)
 508395c:	d8c11c15 	stw	r3,1136(sp)
 5083960:	b0fff60e 	bge	r22,r3,508393c <___vfprintf_internal_r+0xee0>
 5083964:	8809883a 	mov	r4,r17
 5083968:	800b883a 	mov	r5,r16
 508396c:	d9811b04 	addi	r6,sp,1132
 5083970:	5082a280 	call	5082a28 <__sprint_r>
 5083974:	103dcc1e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083978:	bdfffc04 	addi	r23,r23,-16
 508397c:	da011d17 	ldw	r8,1140(sp)
 5083980:	d8c11c17 	ldw	r3,1136(sp)
 5083984:	da400404 	addi	r9,sp,16
 5083988:	e5ffef16 	blt	fp,r23,5083948 <___vfprintf_internal_r+0xeec>
 508398c:	a021883a 	mov	r16,r20
 5083990:	9029883a 	mov	r20,r18
 5083994:	dc812a17 	ldw	r18,1192(sp)
 5083998:	4d000015 	stw	r20,0(r9)
 508399c:	4dc00115 	stw	r23,4(r9)
 50839a0:	45d1883a 	add	r8,r8,r23
 50839a4:	18c00044 	addi	r3,r3,1
 50839a8:	da011d15 	stw	r8,1140(sp)
 50839ac:	d8c11c15 	stw	r3,1136(sp)
 50839b0:	008001c4 	movi	r2,7
 50839b4:	10c11716 	blt	r2,r3,5083e14 <___vfprintf_internal_r+0x13b8>
 50839b8:	4a400204 	addi	r9,r9,8
 50839bc:	003ed506 	br	5083514 <___vfprintf_internal_r+0xab8>
 50839c0:	d9412917 	ldw	r5,1188(sp)
 50839c4:	8809883a 	mov	r4,r17
 50839c8:	d9811b04 	addi	r6,sp,1132
 50839cc:	5082a280 	call	5082a28 <__sprint_r>
 50839d0:	103f4226 	beq	r2,zero,50836dc <___vfprintf_internal_r+0xc80>
 50839d4:	003db406 	br	50830a8 <___vfprintf_internal_r+0x64c>
 50839d8:	d9013217 	ldw	r4,1224(sp)
 50839dc:	00800044 	movi	r2,1
 50839e0:	4cc00015 	stw	r19,0(r9)
 50839e4:	1100e10e 	bge	r2,r4,5083d6c <___vfprintf_internal_r+0x1310>
 50839e8:	00800044 	movi	r2,1
 50839ec:	48800115 	stw	r2,4(r9)
 50839f0:	4091883a 	add	r8,r8,r2
 50839f4:	1887883a 	add	r3,r3,r2
 50839f8:	da011d15 	stw	r8,1140(sp)
 50839fc:	d8c11c15 	stw	r3,1136(sp)
 5083a00:	008001c4 	movi	r2,7
 5083a04:	10c0ed16 	blt	r2,r3,5083dbc <___vfprintf_internal_r+0x1360>
 5083a08:	4a400204 	addi	r9,r9,8
 5083a0c:	d8813717 	ldw	r2,1244(sp)
 5083a10:	48800015 	stw	r2,0(r9)
 5083a14:	00800044 	movi	r2,1
 5083a18:	48800115 	stw	r2,4(r9)
 5083a1c:	4091883a 	add	r8,r8,r2
 5083a20:	1887883a 	add	r3,r3,r2
 5083a24:	da011d15 	stw	r8,1140(sp)
 5083a28:	d8c11c15 	stw	r3,1136(sp)
 5083a2c:	008001c4 	movi	r2,7
 5083a30:	10c0eb16 	blt	r2,r3,5083de0 <___vfprintf_internal_r+0x1384>
 5083a34:	4c800204 	addi	r18,r9,8
 5083a38:	d9013317 	ldw	r4,1228(sp)
 5083a3c:	d9413417 	ldw	r5,1232(sp)
 5083a40:	000d883a 	mov	r6,zero
 5083a44:	000f883a 	mov	r7,zero
 5083a48:	d8c13b15 	stw	r3,1260(sp)
 5083a4c:	da013a15 	stw	r8,1256(sp)
 5083a50:	508b1580 	call	508b158 <__nedf2>
 5083a54:	d8c13b17 	ldw	r3,1260(sp)
 5083a58:	da013a17 	ldw	r8,1256(sp)
 5083a5c:	1000a626 	beq	r2,zero,5083cf8 <___vfprintf_internal_r+0x129c>
 5083a60:	d9013217 	ldw	r4,1224(sp)
 5083a64:	9cc00044 	addi	r19,r19,1
 5083a68:	94c00015 	stw	r19,0(r18)
 5083a6c:	20bfffc4 	addi	r2,r4,-1
 5083a70:	90800115 	stw	r2,4(r18)
 5083a74:	4091883a 	add	r8,r8,r2
 5083a78:	18c00044 	addi	r3,r3,1
 5083a7c:	da011d15 	stw	r8,1140(sp)
 5083a80:	d8c11c15 	stw	r3,1136(sp)
 5083a84:	008001c4 	movi	r2,7
 5083a88:	10c0c316 	blt	r2,r3,5083d98 <___vfprintf_internal_r+0x133c>
 5083a8c:	94800204 	addi	r18,r18,8
 5083a90:	d9013517 	ldw	r4,1236(sp)
 5083a94:	d8811fc4 	addi	r2,sp,1151
 5083a98:	90800015 	stw	r2,0(r18)
 5083a9c:	91000115 	stw	r4,4(r18)
 5083aa0:	4111883a 	add	r8,r8,r4
 5083aa4:	18c00044 	addi	r3,r3,1
 5083aa8:	da011d15 	stw	r8,1140(sp)
 5083aac:	d8c11c15 	stw	r3,1136(sp)
 5083ab0:	008001c4 	movi	r2,7
 5083ab4:	10ff2316 	blt	r2,r3,5083744 <___vfprintf_internal_r+0xce8>
 5083ab8:	92400204 	addi	r9,r18,8
 5083abc:	003ecf06 	br	50835fc <___vfprintf_internal_r+0xba0>
 5083ac0:	d9412917 	ldw	r5,1188(sp)
 5083ac4:	8809883a 	mov	r4,r17
 5083ac8:	d9811b04 	addi	r6,sp,1132
 5083acc:	5082a280 	call	5082a28 <__sprint_r>
 5083ad0:	103d751e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083ad4:	da011d17 	ldw	r8,1140(sp)
 5083ad8:	d8c11c17 	ldw	r3,1136(sp)
 5083adc:	da400404 	addi	r9,sp,16
 5083ae0:	003eba06 	br	50835cc <___vfprintf_internal_r+0xb70>
 5083ae4:	d9412917 	ldw	r5,1188(sp)
 5083ae8:	8809883a 	mov	r4,r17
 5083aec:	d9811b04 	addi	r6,sp,1132
 5083af0:	5082a280 	call	5082a28 <__sprint_r>
 5083af4:	103d6c1e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083af8:	da011d17 	ldw	r8,1140(sp)
 5083afc:	d8c11c17 	ldw	r3,1136(sp)
 5083b00:	da400404 	addi	r9,sp,16
 5083b04:	003e7306 	br	50834d4 <___vfprintf_internal_r+0xa78>
 5083b08:	d9412917 	ldw	r5,1188(sp)
 5083b0c:	8809883a 	mov	r4,r17
 5083b10:	d9811b04 	addi	r6,sp,1132
 5083b14:	5082a280 	call	5082a28 <__sprint_r>
 5083b18:	103d631e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083b1c:	da011d17 	ldw	r8,1140(sp)
 5083b20:	d8c11c17 	ldw	r3,1136(sp)
 5083b24:	da400404 	addi	r9,sp,16
 5083b28:	003e7706 	br	5083508 <___vfprintf_internal_r+0xaac>
 5083b2c:	d8012b15 	stw	zero,1196(sp)
 5083b30:	dcc10e04 	addi	r19,sp,1080
 5083b34:	003cae06 	br	5082df0 <___vfprintf_internal_r+0x394>
 5083b38:	d9413617 	ldw	r5,1240(sp)
 5083b3c:	d8810dc4 	addi	r2,sp,1079
 5083b40:	b8c003cc 	andi	r3,r23,15
 5083b44:	b008973a 	slli	r4,r22,28
 5083b48:	28c7883a 	add	r3,r5,r3
 5083b4c:	b82ed13a 	srli	r23,r23,4
 5083b50:	18c00003 	ldbu	r3,0(r3)
 5083b54:	b02cd13a 	srli	r22,r22,4
 5083b58:	25eeb03a 	or	r23,r4,r23
 5083b5c:	10c00005 	stb	r3,0(r2)
 5083b60:	bd86b03a 	or	r3,r23,r22
 5083b64:	1027883a 	mov	r19,r2
 5083b68:	10bfffc4 	addi	r2,r2,-1
 5083b6c:	183ff41e 	bne	r3,zero,5083b40 <___vfprintf_internal_r+0x10e4>
 5083b70:	003f1706 	br	50837d0 <___vfprintf_internal_r+0xd74>
 5083b74:	b0025826 	beq	r22,zero,50844d8 <___vfprintf_internal_r+0x1a7c>
 5083b78:	b807883a 	mov	r3,r23
 5083b7c:	d8810dc4 	addi	r2,sp,1079
 5083b80:	882f883a 	mov	r23,r17
 5083b84:	04c00244 	movi	r19,9
 5083b88:	8023883a 	mov	r17,r16
 5083b8c:	da412815 	stw	r9,1184(sp)
 5083b90:	1821883a 	mov	r16,r3
 5083b94:	8009883a 	mov	r4,r16
 5083b98:	b00b883a 	mov	r5,r22
 5083b9c:	01800284 	movi	r6,10
 5083ba0:	000f883a 	mov	r7,zero
 5083ba4:	1029883a 	mov	r20,r2
 5083ba8:	508a2d00 	call	508a2d0 <__umoddi3>
 5083bac:	10800c04 	addi	r2,r2,48
 5083bb0:	8009883a 	mov	r4,r16
 5083bb4:	b00b883a 	mov	r5,r22
 5083bb8:	a0800005 	stb	r2,0(r20)
 5083bbc:	01800284 	movi	r6,10
 5083bc0:	000f883a 	mov	r7,zero
 5083bc4:	5089d080 	call	5089d08 <__udivdi3>
 5083bc8:	1021883a 	mov	r16,r2
 5083bcc:	182d883a 	mov	r22,r3
 5083bd0:	a0bfffc4 	addi	r2,r20,-1
 5083bd4:	183fef1e 	bne	r3,zero,5083b94 <___vfprintf_internal_r+0x1138>
 5083bd8:	9c3fee36 	bltu	r19,r16,5083b94 <___vfprintf_internal_r+0x1138>
 5083bdc:	da412817 	ldw	r9,1184(sp)
 5083be0:	8005883a 	mov	r2,r16
 5083be4:	8821883a 	mov	r16,r17
 5083be8:	b823883a 	mov	r17,r23
 5083bec:	102f883a 	mov	r23,r2
 5083bf0:	d8812717 	ldw	r2,1180(sp)
 5083bf4:	a4ffffc4 	addi	r19,r20,-1
 5083bf8:	bdc00c04 	addi	r23,r23,48
 5083bfc:	14c5c83a 	sub	r2,r2,r19
 5083c00:	a5ffffc5 	stb	r23,-1(r20)
 5083c04:	d8812b15 	stw	r2,1196(sp)
 5083c08:	003c7906 	br	5082df0 <___vfprintf_internal_r+0x394>
 5083c0c:	00c00044 	movi	r3,1
 5083c10:	bd84b03a 	or	r2,r23,r22
 5083c14:	003c6806 	br	5082db8 <___vfprintf_internal_r+0x35c>
 5083c18:	dc812417 	ldw	r18,1168(sp)
 5083c1c:	0480ee0e 	bge	zero,r18,5083fd8 <___vfprintf_internal_r+0x157c>
 5083c20:	d9013217 	ldw	r4,1224(sp)
 5083c24:	4cc00015 	stw	r19,0(r9)
 5083c28:	9100c616 	blt	r18,r4,5083f44 <___vfprintf_internal_r+0x14e8>
 5083c2c:	49000115 	stw	r4,4(r9)
 5083c30:	4111883a 	add	r8,r8,r4
 5083c34:	18c00044 	addi	r3,r3,1
 5083c38:	da011d15 	stw	r8,1140(sp)
 5083c3c:	d8c11c15 	stw	r3,1136(sp)
 5083c40:	008001c4 	movi	r2,7
 5083c44:	10c20916 	blt	r2,r3,508446c <___vfprintf_internal_r+0x1a10>
 5083c48:	4a400204 	addi	r9,r9,8
 5083c4c:	d8813217 	ldw	r2,1224(sp)
 5083c50:	90a5c83a 	sub	r18,r18,r2
 5083c54:	04beae0e 	bge	zero,r18,5083710 <___vfprintf_internal_r+0xcb4>
 5083c58:	04c00404 	movi	r19,16
 5083c5c:	d8c11c17 	ldw	r3,1136(sp)
 5083c60:	05014274 	movhi	r20,1289
 5083c64:	a53c4d84 	addi	r20,r20,-3786
 5083c68:	9c81be0e 	bge	r19,r18,5084364 <___vfprintf_internal_r+0x1908>
 5083c6c:	058001c4 	movi	r22,7
 5083c70:	ddc12917 	ldw	r23,1188(sp)
 5083c74:	00000306 	br	5083c84 <___vfprintf_internal_r+0x1228>
 5083c78:	4a400204 	addi	r9,r9,8
 5083c7c:	94bffc04 	addi	r18,r18,-16
 5083c80:	9c81b80e 	bge	r19,r18,5084364 <___vfprintf_internal_r+0x1908>
 5083c84:	4d000015 	stw	r20,0(r9)
 5083c88:	4cc00115 	stw	r19,4(r9)
 5083c8c:	42000404 	addi	r8,r8,16
 5083c90:	18c00044 	addi	r3,r3,1
 5083c94:	da011d15 	stw	r8,1140(sp)
 5083c98:	d8c11c15 	stw	r3,1136(sp)
 5083c9c:	b0fff60e 	bge	r22,r3,5083c78 <___vfprintf_internal_r+0x121c>
 5083ca0:	8809883a 	mov	r4,r17
 5083ca4:	b80b883a 	mov	r5,r23
 5083ca8:	d9811b04 	addi	r6,sp,1132
 5083cac:	5082a280 	call	5082a28 <__sprint_r>
 5083cb0:	103cfd1e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083cb4:	da011d17 	ldw	r8,1140(sp)
 5083cb8:	d8c11c17 	ldw	r3,1136(sp)
 5083cbc:	da400404 	addi	r9,sp,16
 5083cc0:	003fee06 	br	5083c7c <___vfprintf_internal_r+0x1220>
 5083cc4:	d9412917 	ldw	r5,1188(sp)
 5083cc8:	8809883a 	mov	r4,r17
 5083ccc:	d9811b04 	addi	r6,sp,1132
 5083cd0:	5082a280 	call	5082a28 <__sprint_r>
 5083cd4:	103cf41e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083cd8:	da011d17 	ldw	r8,1140(sp)
 5083cdc:	d8c11c17 	ldw	r3,1136(sp)
 5083ce0:	da400404 	addi	r9,sp,16
 5083ce4:	003dee06 	br	50834a0 <___vfprintf_internal_r+0xa44>
 5083ce8:	00c00084 	movi	r3,2
 5083cec:	bd84b03a 	or	r2,r23,r22
 5083cf0:	d8012585 	stb	zero,1174(sp)
 5083cf4:	003c3006 	br	5082db8 <___vfprintf_internal_r+0x35c>
 5083cf8:	d8813217 	ldw	r2,1224(sp)
 5083cfc:	14ffffc4 	addi	r19,r2,-1
 5083d00:	04ff630e 	bge	zero,r19,5083a90 <___vfprintf_internal_r+0x1034>
 5083d04:	05800404 	movi	r22,16
 5083d08:	05014274 	movhi	r20,1289
 5083d0c:	a53c4d84 	addi	r20,r20,-3786
 5083d10:	b4c03c0e 	bge	r22,r19,5083e04 <___vfprintf_internal_r+0x13a8>
 5083d14:	05c001c4 	movi	r23,7
 5083d18:	df012917 	ldw	fp,1188(sp)
 5083d1c:	00000306 	br	5083d2c <___vfprintf_internal_r+0x12d0>
 5083d20:	94800204 	addi	r18,r18,8
 5083d24:	9cfffc04 	addi	r19,r19,-16
 5083d28:	b4c0360e 	bge	r22,r19,5083e04 <___vfprintf_internal_r+0x13a8>
 5083d2c:	95000015 	stw	r20,0(r18)
 5083d30:	95800115 	stw	r22,4(r18)
 5083d34:	42000404 	addi	r8,r8,16
 5083d38:	18c00044 	addi	r3,r3,1
 5083d3c:	da011d15 	stw	r8,1140(sp)
 5083d40:	d8c11c15 	stw	r3,1136(sp)
 5083d44:	b8fff60e 	bge	r23,r3,5083d20 <___vfprintf_internal_r+0x12c4>
 5083d48:	8809883a 	mov	r4,r17
 5083d4c:	e00b883a 	mov	r5,fp
 5083d50:	d9811b04 	addi	r6,sp,1132
 5083d54:	5082a280 	call	5082a28 <__sprint_r>
 5083d58:	103cd31e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083d5c:	da011d17 	ldw	r8,1140(sp)
 5083d60:	d8c11c17 	ldw	r3,1136(sp)
 5083d64:	dc800404 	addi	r18,sp,16
 5083d68:	003fee06 	br	5083d24 <___vfprintf_internal_r+0x12c8>
 5083d6c:	8088703a 	and	r4,r16,r2
 5083d70:	203f1d1e 	bne	r4,zero,50839e8 <___vfprintf_internal_r+0xf8c>
 5083d74:	48800115 	stw	r2,4(r9)
 5083d78:	42000044 	addi	r8,r8,1
 5083d7c:	18c00044 	addi	r3,r3,1
 5083d80:	da011d15 	stw	r8,1140(sp)
 5083d84:	d8c11c15 	stw	r3,1136(sp)
 5083d88:	008001c4 	movi	r2,7
 5083d8c:	10c00216 	blt	r2,r3,5083d98 <___vfprintf_internal_r+0x133c>
 5083d90:	4c800204 	addi	r18,r9,8
 5083d94:	003f3e06 	br	5083a90 <___vfprintf_internal_r+0x1034>
 5083d98:	d9412917 	ldw	r5,1188(sp)
 5083d9c:	8809883a 	mov	r4,r17
 5083da0:	d9811b04 	addi	r6,sp,1132
 5083da4:	5082a280 	call	5082a28 <__sprint_r>
 5083da8:	103cbf1e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083dac:	dc800404 	addi	r18,sp,16
 5083db0:	da011d17 	ldw	r8,1140(sp)
 5083db4:	d8c11c17 	ldw	r3,1136(sp)
 5083db8:	003f3506 	br	5083a90 <___vfprintf_internal_r+0x1034>
 5083dbc:	d9412917 	ldw	r5,1188(sp)
 5083dc0:	8809883a 	mov	r4,r17
 5083dc4:	d9811b04 	addi	r6,sp,1132
 5083dc8:	5082a280 	call	5082a28 <__sprint_r>
 5083dcc:	103cb61e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083dd0:	da011d17 	ldw	r8,1140(sp)
 5083dd4:	d8c11c17 	ldw	r3,1136(sp)
 5083dd8:	da400404 	addi	r9,sp,16
 5083ddc:	003f0b06 	br	5083a0c <___vfprintf_internal_r+0xfb0>
 5083de0:	d9412917 	ldw	r5,1188(sp)
 5083de4:	8809883a 	mov	r4,r17
 5083de8:	d9811b04 	addi	r6,sp,1132
 5083dec:	5082a280 	call	5082a28 <__sprint_r>
 5083df0:	103cad1e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083df4:	da011d17 	ldw	r8,1140(sp)
 5083df8:	d8c11c17 	ldw	r3,1136(sp)
 5083dfc:	dc800404 	addi	r18,sp,16
 5083e00:	003f0d06 	br	5083a38 <___vfprintf_internal_r+0xfdc>
 5083e04:	95000015 	stw	r20,0(r18)
 5083e08:	94c00115 	stw	r19,4(r18)
 5083e0c:	44d1883a 	add	r8,r8,r19
 5083e10:	003f1906 	br	5083a78 <___vfprintf_internal_r+0x101c>
 5083e14:	d9412917 	ldw	r5,1188(sp)
 5083e18:	8809883a 	mov	r4,r17
 5083e1c:	d9811b04 	addi	r6,sp,1132
 5083e20:	5082a280 	call	5082a28 <__sprint_r>
 5083e24:	103ca01e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083e28:	da011d17 	ldw	r8,1140(sp)
 5083e2c:	d8c11c17 	ldw	r3,1136(sp)
 5083e30:	da400404 	addi	r9,sp,16
 5083e34:	003db706 	br	5083514 <___vfprintf_internal_r+0xab8>
 5083e38:	4d000015 	stw	r20,0(r9)
 5083e3c:	4c800115 	stw	r18,4(r9)
 5083e40:	4491883a 	add	r8,r8,r18
 5083e44:	003de706 	br	50835e4 <___vfprintf_internal_r+0xb88>
 5083e48:	8080100c 	andi	r2,r16,64
 5083e4c:	10010226 	beq	r2,zero,5084258 <___vfprintf_internal_r+0x17fc>
 5083e50:	d8812d17 	ldw	r2,1204(sp)
 5083e54:	002d883a 	mov	r22,zero
 5083e58:	00c00044 	movi	r3,1
 5083e5c:	15c0000b 	ldhu	r23,0(r2)
 5083e60:	10800104 	addi	r2,r2,4
 5083e64:	d8812d15 	stw	r2,1204(sp)
 5083e68:	d8012585 	stb	zero,1174(sp)
 5083e6c:	b805883a 	mov	r2,r23
 5083e70:	003bd106 	br	5082db8 <___vfprintf_internal_r+0x35c>
 5083e74:	d9012d17 	ldw	r4,1204(sp)
 5083e78:	25800017 	ldw	r22,0(r4)
 5083e7c:	25000117 	ldw	r20,4(r4)
 5083e80:	21000204 	addi	r4,r4,8
 5083e84:	d9012d15 	stw	r4,1204(sp)
 5083e88:	dd813315 	stw	r22,1228(sp)
 5083e8c:	dd013415 	stw	r20,1232(sp)
 5083e90:	003d2b06 	br	5083340 <___vfprintf_internal_r+0x8e4>
 5083e94:	8080100c 	andi	r2,r16,64
 5083e98:	1000fe26 	beq	r2,zero,5084294 <___vfprintf_internal_r+0x1838>
 5083e9c:	d9012d17 	ldw	r4,1204(sp)
 5083ea0:	002d883a 	mov	r22,zero
 5083ea4:	0007883a 	mov	r3,zero
 5083ea8:	25c0000b 	ldhu	r23,0(r4)
 5083eac:	21000104 	addi	r4,r4,4
 5083eb0:	d9012d15 	stw	r4,1204(sp)
 5083eb4:	b805883a 	mov	r2,r23
 5083eb8:	d8012585 	stb	zero,1174(sp)
 5083ebc:	003bbe06 	br	5082db8 <___vfprintf_internal_r+0x35c>
 5083ec0:	8080100c 	andi	r2,r16,64
 5083ec4:	1000ed26 	beq	r2,zero,508427c <___vfprintf_internal_r+0x1820>
 5083ec8:	d9012d17 	ldw	r4,1204(sp)
 5083ecc:	002d883a 	mov	r22,zero
 5083ed0:	25c0000b 	ldhu	r23,0(r4)
 5083ed4:	21000104 	addi	r4,r4,4
 5083ed8:	d9012d15 	stw	r4,1204(sp)
 5083edc:	003cd206 	br	5083228 <___vfprintf_internal_r+0x7cc>
 5083ee0:	00c00084 	movi	r3,2
 5083ee4:	d8012585 	stb	zero,1174(sp)
 5083ee8:	003bb306 	br	5082db8 <___vfprintf_internal_r+0x35c>
 5083eec:	8080040c 	andi	r2,r16,16
 5083ef0:	1000f11e 	bne	r2,zero,50842b8 <___vfprintf_internal_r+0x185c>
 5083ef4:	8400100c 	andi	r16,r16,64
 5083ef8:	80015526 	beq	r16,zero,5084450 <___vfprintf_internal_r+0x19f4>
 5083efc:	da012d17 	ldw	r8,1204(sp)
 5083f00:	d8c12c17 	ldw	r3,1200(sp)
 5083f04:	40800017 	ldw	r2,0(r8)
 5083f08:	42000104 	addi	r8,r8,4
 5083f0c:	da012d15 	stw	r8,1204(sp)
 5083f10:	10c0000d 	sth	r3,0(r2)
 5083f14:	003b0706 	br	5082b34 <___vfprintf_internal_r+0xd8>
 5083f18:	8080100c 	andi	r2,r16,64
 5083f1c:	1000c726 	beq	r2,zero,508423c <___vfprintf_internal_r+0x17e0>
 5083f20:	da012d17 	ldw	r8,1204(sp)
 5083f24:	45c0000f 	ldh	r23,0(r8)
 5083f28:	42000104 	addi	r8,r8,4
 5083f2c:	da012d15 	stw	r8,1204(sp)
 5083f30:	b82dd7fa 	srai	r22,r23,31
 5083f34:	b005883a 	mov	r2,r22
 5083f38:	003c1006 	br	5082f7c <___vfprintf_internal_r+0x520>
 5083f3c:	ac800007 	ldb	r18,0(r21)
 5083f40:	003b2406 	br	5082bd4 <___vfprintf_internal_r+0x178>
 5083f44:	4c800115 	stw	r18,4(r9)
 5083f48:	9211883a 	add	r8,r18,r8
 5083f4c:	18c00044 	addi	r3,r3,1
 5083f50:	da011d15 	stw	r8,1140(sp)
 5083f54:	d8c11c15 	stw	r3,1136(sp)
 5083f58:	008001c4 	movi	r2,7
 5083f5c:	10c15416 	blt	r2,r3,50844b0 <___vfprintf_internal_r+0x1a54>
 5083f60:	4a400204 	addi	r9,r9,8
 5083f64:	d8813717 	ldw	r2,1244(sp)
 5083f68:	9ca7883a 	add	r19,r19,r18
 5083f6c:	48800015 	stw	r2,0(r9)
 5083f70:	00800044 	movi	r2,1
 5083f74:	48800115 	stw	r2,4(r9)
 5083f78:	4091883a 	add	r8,r8,r2
 5083f7c:	1887883a 	add	r3,r3,r2
 5083f80:	da011d15 	stw	r8,1140(sp)
 5083f84:	d8c11c15 	stw	r3,1136(sp)
 5083f88:	008001c4 	movi	r2,7
 5083f8c:	10c14016 	blt	r2,r3,5084490 <___vfprintf_internal_r+0x1a34>
 5083f90:	4a400204 	addi	r9,r9,8
 5083f94:	d9013217 	ldw	r4,1224(sp)
 5083f98:	da011d17 	ldw	r8,1140(sp)
 5083f9c:	d8c11c17 	ldw	r3,1136(sp)
 5083fa0:	24a5c83a 	sub	r18,r4,r18
 5083fa4:	4cc00015 	stw	r19,0(r9)
 5083fa8:	003fa406 	br	5083e3c <___vfprintf_internal_r+0x13e0>
 5083fac:	04c14274 	movhi	r19,1289
 5083fb0:	9cfc3a04 	addi	r19,r19,-3864
 5083fb4:	003cf406 	br	5083388 <___vfprintf_internal_r+0x92c>
 5083fb8:	d9412917 	ldw	r5,1188(sp)
 5083fbc:	8809883a 	mov	r4,r17
 5083fc0:	d9811b04 	addi	r6,sp,1132
 5083fc4:	5082a280 	call	5082a28 <__sprint_r>
 5083fc8:	103c371e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5083fcc:	da011d17 	ldw	r8,1140(sp)
 5083fd0:	da400404 	addi	r9,sp,16
 5083fd4:	003e1c06 	br	5083848 <___vfprintf_internal_r+0xdec>
 5083fd8:	00814274 	movhi	r2,1289
 5083fdc:	10bc4904 	addi	r2,r2,-3804
 5083fe0:	48800015 	stw	r2,0(r9)
 5083fe4:	00800044 	movi	r2,1
 5083fe8:	48800115 	stw	r2,4(r9)
 5083fec:	4091883a 	add	r8,r8,r2
 5083ff0:	1887883a 	add	r3,r3,r2
 5083ff4:	da011d15 	stw	r8,1140(sp)
 5083ff8:	d8c11c15 	stw	r3,1136(sp)
 5083ffc:	008001c4 	movi	r2,7
 5084000:	10c0c316 	blt	r2,r3,5084310 <___vfprintf_internal_r+0x18b4>
 5084004:	4a400204 	addi	r9,r9,8
 5084008:	9000041e 	bne	r18,zero,508401c <___vfprintf_internal_r+0x15c0>
 508400c:	d8c13217 	ldw	r3,1224(sp)
 5084010:	1800021e 	bne	r3,zero,508401c <___vfprintf_internal_r+0x15c0>
 5084014:	8080004c 	andi	r2,r16,1
 5084018:	103d7826 	beq	r2,zero,50835fc <___vfprintf_internal_r+0xba0>
 508401c:	d8c11c17 	ldw	r3,1136(sp)
 5084020:	d9013717 	ldw	r4,1244(sp)
 5084024:	00800044 	movi	r2,1
 5084028:	48800115 	stw	r2,4(r9)
 508402c:	49000015 	stw	r4,0(r9)
 5084030:	4091883a 	add	r8,r8,r2
 5084034:	1887883a 	add	r3,r3,r2
 5084038:	da011d15 	stw	r8,1140(sp)
 508403c:	d8c11c15 	stw	r3,1136(sp)
 5084040:	008001c4 	movi	r2,7
 5084044:	10c12e16 	blt	r2,r3,5084500 <___vfprintf_internal_r+0x1aa4>
 5084048:	4a400204 	addi	r9,r9,8
 508404c:	04a5c83a 	sub	r18,zero,r18
 5084050:	0480de0e 	bge	zero,r18,50843cc <___vfprintf_internal_r+0x1970>
 5084054:	05800404 	movi	r22,16
 5084058:	05014274 	movhi	r20,1289
 508405c:	a53c4d84 	addi	r20,r20,-3786
 5084060:	b480e20e 	bge	r22,r18,50843ec <___vfprintf_internal_r+0x1990>
 5084064:	05c001c4 	movi	r23,7
 5084068:	df012917 	ldw	fp,1188(sp)
 508406c:	00000306 	br	508407c <___vfprintf_internal_r+0x1620>
 5084070:	4a400204 	addi	r9,r9,8
 5084074:	94bffc04 	addi	r18,r18,-16
 5084078:	b480dc0e 	bge	r22,r18,50843ec <___vfprintf_internal_r+0x1990>
 508407c:	4d000015 	stw	r20,0(r9)
 5084080:	4d800115 	stw	r22,4(r9)
 5084084:	42000404 	addi	r8,r8,16
 5084088:	18c00044 	addi	r3,r3,1
 508408c:	da011d15 	stw	r8,1140(sp)
 5084090:	d8c11c15 	stw	r3,1136(sp)
 5084094:	b8fff60e 	bge	r23,r3,5084070 <___vfprintf_internal_r+0x1614>
 5084098:	8809883a 	mov	r4,r17
 508409c:	e00b883a 	mov	r5,fp
 50840a0:	d9811b04 	addi	r6,sp,1132
 50840a4:	5082a280 	call	5082a28 <__sprint_r>
 50840a8:	103bff1e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 50840ac:	da011d17 	ldw	r8,1140(sp)
 50840b0:	d8c11c17 	ldw	r3,1136(sp)
 50840b4:	da400404 	addi	r9,sp,16
 50840b8:	003fee06 	br	5084074 <___vfprintf_internal_r+0x1618>
 50840bc:	da413c15 	stw	r9,1264(sp)
 50840c0:	50896140 	call	5089614 <__isnand>
 50840c4:	da413c17 	ldw	r9,1264(sp)
 50840c8:	1000851e 	bne	r2,zero,50842e0 <___vfprintf_internal_r+0x1884>
 50840cc:	00bfffc4 	movi	r2,-1
 50840d0:	e0817626 	beq	fp,r2,50846ac <___vfprintf_internal_r+0x1c50>
 50840d4:	008019c4 	movi	r2,103
 50840d8:	90817126 	beq	r18,r2,50846a0 <___vfprintf_internal_r+0x1c44>
 50840dc:	008011c4 	movi	r2,71
 50840e0:	90816f26 	beq	r18,r2,50846a0 <___vfprintf_internal_r+0x1c44>
 50840e4:	82004014 	ori	r8,r16,256
 50840e8:	da012a15 	stw	r8,1192(sp)
 50840ec:	a0017116 	blt	r20,zero,50846b4 <___vfprintf_internal_r+0x1c58>
 50840f0:	d8012f05 	stb	zero,1212(sp)
 50840f4:	00801984 	movi	r2,102
 50840f8:	90811226 	beq	r18,r2,5084544 <___vfprintf_internal_r+0x1ae8>
 50840fc:	00801184 	movi	r2,70
 5084100:	90811026 	beq	r18,r2,5084544 <___vfprintf_internal_r+0x1ae8>
 5084104:	00801944 	movi	r2,101
 5084108:	90819b26 	beq	r18,r2,5084778 <___vfprintf_internal_r+0x1d1c>
 508410c:	00801144 	movi	r2,69
 5084110:	90819926 	beq	r18,r2,5084778 <___vfprintf_internal_r+0x1d1c>
 5084114:	e02f883a 	mov	r23,fp
 5084118:	d8812404 	addi	r2,sp,1168
 508411c:	d8800115 	stw	r2,4(sp)
 5084120:	d8812304 	addi	r2,sp,1164
 5084124:	d8800215 	stw	r2,8(sp)
 5084128:	d8812204 	addi	r2,sp,1160
 508412c:	ddc00015 	stw	r23,0(sp)
 5084130:	d8800315 	stw	r2,12(sp)
 5084134:	8809883a 	mov	r4,r17
 5084138:	b00b883a 	mov	r5,r22
 508413c:	a00d883a 	mov	r6,r20
 5084140:	01c00084 	movi	r7,2
 5084144:	da413c15 	stw	r9,1264(sp)
 5084148:	5084ce00 	call	5084ce0 <_dtoa_r>
 508414c:	1027883a 	mov	r19,r2
 5084150:	008019c4 	movi	r2,103
 5084154:	da413c17 	ldw	r9,1264(sp)
 5084158:	90818c1e 	bne	r18,r2,508478c <___vfprintf_internal_r+0x1d30>
 508415c:	8080004c 	andi	r2,r16,1
 5084160:	10017926 	beq	r2,zero,5084748 <___vfprintf_internal_r+0x1cec>
 5084164:	00801184 	movi	r2,70
 5084168:	9dc7883a 	add	r3,r19,r23
 508416c:	90810626 	beq	r18,r2,5084588 <___vfprintf_internal_r+0x1b2c>
 5084170:	b009883a 	mov	r4,r22
 5084174:	a00b883a 	mov	r5,r20
 5084178:	000d883a 	mov	r6,zero
 508417c:	000f883a 	mov	r7,zero
 5084180:	d8c13b15 	stw	r3,1260(sp)
 5084184:	da413c15 	stw	r9,1264(sp)
 5084188:	508b0fc0 	call	508b0fc <__eqdf2>
 508418c:	d8c13b17 	ldw	r3,1260(sp)
 5084190:	da413c17 	ldw	r9,1264(sp)
 5084194:	10000726 	beq	r2,zero,50841b4 <___vfprintf_internal_r+0x1758>
 5084198:	d8812217 	ldw	r2,1160(sp)
 508419c:	10c1962e 	bgeu	r2,r3,50847f8 <___vfprintf_internal_r+0x1d9c>
 50841a0:	01000c04 	movi	r4,48
 50841a4:	11000005 	stb	r4,0(r2)
 50841a8:	10800044 	addi	r2,r2,1
 50841ac:	d8812215 	stw	r2,1160(sp)
 50841b0:	10fffc1e 	bne	r2,r3,50841a4 <___vfprintf_internal_r+0x1748>
 50841b4:	1cc7c83a 	sub	r3,r3,r19
 50841b8:	d8c13215 	stw	r3,1224(sp)
 50841bc:	008019c4 	movi	r2,103
 50841c0:	90810626 	beq	r18,r2,50845dc <___vfprintf_internal_r+0x1b80>
 50841c4:	008011c4 	movi	r2,71
 50841c8:	90810426 	beq	r18,r2,50845dc <___vfprintf_internal_r+0x1b80>
 50841cc:	00801984 	movi	r2,102
 50841d0:	90819a1e 	bne	r18,r2,508483c <___vfprintf_internal_r+0x1de0>
 50841d4:	d8812417 	ldw	r2,1168(sp)
 50841d8:	d8812b15 	stw	r2,1196(sp)
 50841dc:	0081880e 	bge	zero,r2,5084800 <___vfprintf_internal_r+0x1da4>
 50841e0:	e000021e 	bne	fp,zero,50841ec <___vfprintf_internal_r+0x1790>
 50841e4:	8400004c 	andi	r16,r16,1
 50841e8:	80000426 	beq	r16,zero,50841fc <___vfprintf_internal_r+0x17a0>
 50841ec:	d8812b17 	ldw	r2,1196(sp)
 50841f0:	e2000044 	addi	r8,fp,1
 50841f4:	1205883a 	add	r2,r2,r8
 50841f8:	d8812b15 	stw	r2,1196(sp)
 50841fc:	d8812815 	stw	r2,1184(sp)
 5084200:	10011716 	blt	r2,zero,5084660 <___vfprintf_internal_r+0x1c04>
 5084204:	ddc12f07 	ldb	r23,1212(sp)
 5084208:	b800ca26 	beq	r23,zero,5084534 <___vfprintf_internal_r+0x1ad8>
 508420c:	00800b44 	movi	r2,45
 5084210:	d8812585 	stb	r2,1174(sp)
 5084214:	dc012a17 	ldw	r16,1192(sp)
 5084218:	d8013115 	stw	zero,1220(sp)
 508421c:	003afe06 	br	5082e18 <___vfprintf_internal_r+0x3bc>
 5084220:	d8812b17 	ldw	r2,1196(sp)
 5084224:	d8812815 	stw	r2,1184(sp)
 5084228:	10005e16 	blt	r2,zero,50843a4 <___vfprintf_internal_r+0x1948>
 508422c:	d8812583 	ldbu	r2,1174(sp)
 5084230:	ddc12d15 	stw	r23,1204(sp)
 5084234:	d8013115 	stw	zero,1220(sp)
 5084238:	003af306 	br	5082e08 <___vfprintf_internal_r+0x3ac>
 508423c:	d8812d17 	ldw	r2,1204(sp)
 5084240:	15c00017 	ldw	r23,0(r2)
 5084244:	10800104 	addi	r2,r2,4
 5084248:	d8812d15 	stw	r2,1204(sp)
 508424c:	b82dd7fa 	srai	r22,r23,31
 5084250:	b005883a 	mov	r2,r22
 5084254:	003b4906 	br	5082f7c <___vfprintf_internal_r+0x520>
 5084258:	d8c12d17 	ldw	r3,1204(sp)
 508425c:	002d883a 	mov	r22,zero
 5084260:	1dc00017 	ldw	r23,0(r3)
 5084264:	18c00104 	addi	r3,r3,4
 5084268:	d8c12d15 	stw	r3,1204(sp)
 508426c:	b805883a 	mov	r2,r23
 5084270:	00c00044 	movi	r3,1
 5084274:	d8012585 	stb	zero,1174(sp)
 5084278:	003acf06 	br	5082db8 <___vfprintf_internal_r+0x35c>
 508427c:	da012d17 	ldw	r8,1204(sp)
 5084280:	002d883a 	mov	r22,zero
 5084284:	45c00017 	ldw	r23,0(r8)
 5084288:	42000104 	addi	r8,r8,4
 508428c:	da012d15 	stw	r8,1204(sp)
 5084290:	003be506 	br	5083228 <___vfprintf_internal_r+0x7cc>
 5084294:	da012d17 	ldw	r8,1204(sp)
 5084298:	002d883a 	mov	r22,zero
 508429c:	0007883a 	mov	r3,zero
 50842a0:	45c00017 	ldw	r23,0(r8)
 50842a4:	42000104 	addi	r8,r8,4
 50842a8:	da012d15 	stw	r8,1204(sp)
 50842ac:	b805883a 	mov	r2,r23
 50842b0:	d8012585 	stb	zero,1174(sp)
 50842b4:	003ac006 	br	5082db8 <___vfprintf_internal_r+0x35c>
 50842b8:	d8c12d17 	ldw	r3,1204(sp)
 50842bc:	d9012c17 	ldw	r4,1200(sp)
 50842c0:	18800017 	ldw	r2,0(r3)
 50842c4:	18c00104 	addi	r3,r3,4
 50842c8:	d8c12d15 	stw	r3,1204(sp)
 50842cc:	11000015 	stw	r4,0(r2)
 50842d0:	003a1806 	br	5082b34 <___vfprintf_internal_r+0xd8>
 50842d4:	073fffc4 	movi	fp,-1
 50842d8:	202b883a 	mov	r21,r4
 50842dc:	003a3e06 	br	5082bd8 <___vfprintf_internal_r+0x17c>
 50842e0:	008011c4 	movi	r2,71
 50842e4:	14809016 	blt	r2,r18,5084528 <___vfprintf_internal_r+0x1acc>
 50842e8:	04c14274 	movhi	r19,1289
 50842ec:	9cfc3b04 	addi	r19,r19,-3860
 50842f0:	00c000c4 	movi	r3,3
 50842f4:	00bfdfc4 	movi	r2,-129
 50842f8:	80a0703a 	and	r16,r16,r2
 50842fc:	d8c12815 	stw	r3,1184(sp)
 5084300:	d8812583 	ldbu	r2,1174(sp)
 5084304:	d8c12b15 	stw	r3,1196(sp)
 5084308:	d8013115 	stw	zero,1220(sp)
 508430c:	003abe06 	br	5082e08 <___vfprintf_internal_r+0x3ac>
 5084310:	d9412917 	ldw	r5,1188(sp)
 5084314:	8809883a 	mov	r4,r17
 5084318:	d9811b04 	addi	r6,sp,1132
 508431c:	5082a280 	call	5082a28 <__sprint_r>
 5084320:	103b611e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5084324:	dc812417 	ldw	r18,1168(sp)
 5084328:	da011d17 	ldw	r8,1140(sp)
 508432c:	da400404 	addi	r9,sp,16
 5084330:	003f3506 	br	5084008 <___vfprintf_internal_r+0x15ac>
 5084334:	ad400044 	addi	r21,r21,1
 5084338:	84000814 	ori	r16,r16,32
 508433c:	14800047 	ldb	r18,1(r2)
 5084340:	003a2406 	br	5082bd4 <___vfprintf_internal_r+0x178>
 5084344:	d9412917 	ldw	r5,1188(sp)
 5084348:	8809883a 	mov	r4,r17
 508434c:	d9811b04 	addi	r6,sp,1132
 5084350:	5082a280 	call	5082a28 <__sprint_r>
 5084354:	103b541e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5084358:	da011d17 	ldw	r8,1140(sp)
 508435c:	da400404 	addi	r9,sp,16
 5084360:	003d4a06 	br	508388c <___vfprintf_internal_r+0xe30>
 5084364:	4d000015 	stw	r20,0(r9)
 5084368:	4c800115 	stw	r18,4(r9)
 508436c:	4491883a 	add	r8,r8,r18
 5084370:	18c00044 	addi	r3,r3,1
 5084374:	da011d15 	stw	r8,1140(sp)
 5084378:	d8c11c15 	stw	r3,1136(sp)
 508437c:	008001c4 	movi	r2,7
 5084380:	10fcdc16 	blt	r2,r3,50836f4 <___vfprintf_internal_r+0xc98>
 5084384:	4a400204 	addi	r9,r9,8
 5084388:	003ce106 	br	5083710 <___vfprintf_internal_r+0xcb4>
 508438c:	da413c15 	stw	r9,1264(sp)
 5084390:	508299c0 	call	508299c <strlen>
 5084394:	d8812b15 	stw	r2,1196(sp)
 5084398:	d8812815 	stw	r2,1184(sp)
 508439c:	da413c17 	ldw	r9,1264(sp)
 50843a0:	103fa20e 	bge	r2,zero,508422c <___vfprintf_internal_r+0x17d0>
 50843a4:	d8012815 	stw	zero,1184(sp)
 50843a8:	003fa006 	br	508422c <___vfprintf_internal_r+0x17d0>
 50843ac:	d9412917 	ldw	r5,1188(sp)
 50843b0:	8809883a 	mov	r4,r17
 50843b4:	d9811b04 	addi	r6,sp,1132
 50843b8:	5082a280 	call	5082a28 <__sprint_r>
 50843bc:	103b3a1e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 50843c0:	da011d17 	ldw	r8,1140(sp)
 50843c4:	d8c11c17 	ldw	r3,1136(sp)
 50843c8:	da400404 	addi	r9,sp,16
 50843cc:	d8813217 	ldw	r2,1224(sp)
 50843d0:	4cc00015 	stw	r19,0(r9)
 50843d4:	48800115 	stw	r2,4(r9)
 50843d8:	4091883a 	add	r8,r8,r2
 50843dc:	003c8106 	br	50835e4 <___vfprintf_internal_r+0xb88>
 50843e0:	00800b44 	movi	r2,45
 50843e4:	d8812585 	stb	r2,1174(sp)
 50843e8:	003be306 	br	5083378 <___vfprintf_internal_r+0x91c>
 50843ec:	4d000015 	stw	r20,0(r9)
 50843f0:	4c800115 	stw	r18,4(r9)
 50843f4:	4491883a 	add	r8,r8,r18
 50843f8:	18c00044 	addi	r3,r3,1
 50843fc:	da011d15 	stw	r8,1140(sp)
 5084400:	d8c11c15 	stw	r3,1136(sp)
 5084404:	008001c4 	movi	r2,7
 5084408:	10ffe816 	blt	r2,r3,50843ac <___vfprintf_internal_r+0x1950>
 508440c:	4a400204 	addi	r9,r9,8
 5084410:	003fee06 	br	50843cc <___vfprintf_internal_r+0x1970>
 5084414:	df012b15 	stw	fp,1196(sp)
 5084418:	00800184 	movi	r2,6
 508441c:	1700072e 	bgeu	r2,fp,508443c <___vfprintf_internal_r+0x19e0>
 5084420:	d8812b15 	stw	r2,1196(sp)
 5084424:	d8812815 	stw	r2,1184(sp)
 5084428:	ddc12d15 	stw	r23,1204(sp)
 508442c:	04c14274 	movhi	r19,1289
 5084430:	9cfc4704 	addi	r19,r19,-3812
 5084434:	d8013115 	stw	zero,1220(sp)
 5084438:	003a7a06 	br	5082e24 <___vfprintf_internal_r+0x3c8>
 508443c:	d8812b17 	ldw	r2,1196(sp)
 5084440:	d8812815 	stw	r2,1184(sp)
 5084444:	103ff80e 	bge	r2,zero,5084428 <___vfprintf_internal_r+0x19cc>
 5084448:	d8012815 	stw	zero,1184(sp)
 508444c:	003ff606 	br	5084428 <___vfprintf_internal_r+0x19cc>
 5084450:	d9012d17 	ldw	r4,1204(sp)
 5084454:	da012c17 	ldw	r8,1200(sp)
 5084458:	20800017 	ldw	r2,0(r4)
 508445c:	21000104 	addi	r4,r4,4
 5084460:	d9012d15 	stw	r4,1204(sp)
 5084464:	12000015 	stw	r8,0(r2)
 5084468:	0039b206 	br	5082b34 <___vfprintf_internal_r+0xd8>
 508446c:	d9412917 	ldw	r5,1188(sp)
 5084470:	8809883a 	mov	r4,r17
 5084474:	d9811b04 	addi	r6,sp,1132
 5084478:	5082a280 	call	5082a28 <__sprint_r>
 508447c:	103b0a1e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5084480:	dc812417 	ldw	r18,1168(sp)
 5084484:	da011d17 	ldw	r8,1140(sp)
 5084488:	da400404 	addi	r9,sp,16
 508448c:	003def06 	br	5083c4c <___vfprintf_internal_r+0x11f0>
 5084490:	d9412917 	ldw	r5,1188(sp)
 5084494:	8809883a 	mov	r4,r17
 5084498:	d9811b04 	addi	r6,sp,1132
 508449c:	5082a280 	call	5082a28 <__sprint_r>
 50844a0:	103b011e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 50844a4:	dc812417 	ldw	r18,1168(sp)
 50844a8:	da400404 	addi	r9,sp,16
 50844ac:	003eb906 	br	5083f94 <___vfprintf_internal_r+0x1538>
 50844b0:	d9412917 	ldw	r5,1188(sp)
 50844b4:	8809883a 	mov	r4,r17
 50844b8:	d9811b04 	addi	r6,sp,1132
 50844bc:	5082a280 	call	5082a28 <__sprint_r>
 50844c0:	103af91e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 50844c4:	dc812417 	ldw	r18,1168(sp)
 50844c8:	da011d17 	ldw	r8,1140(sp)
 50844cc:	d8c11c17 	ldw	r3,1136(sp)
 50844d0:	da400404 	addi	r9,sp,16
 50844d4:	003ea306 	br	5083f64 <___vfprintf_internal_r+0x1508>
 50844d8:	00800244 	movi	r2,9
 50844dc:	15fda636 	bltu	r2,r23,5083b78 <___vfprintf_internal_r+0x111c>
 50844e0:	dd010e04 	addi	r20,sp,1080
 50844e4:	003dc206 	br	5083bf0 <___vfprintf_internal_r+0x1194>
 50844e8:	df012815 	stw	fp,1184(sp)
 50844ec:	d8812583 	ldbu	r2,1174(sp)
 50844f0:	df012b15 	stw	fp,1196(sp)
 50844f4:	ddc12d15 	stw	r23,1204(sp)
 50844f8:	d8013115 	stw	zero,1220(sp)
 50844fc:	003a4206 	br	5082e08 <___vfprintf_internal_r+0x3ac>
 5084500:	d9412917 	ldw	r5,1188(sp)
 5084504:	8809883a 	mov	r4,r17
 5084508:	d9811b04 	addi	r6,sp,1132
 508450c:	5082a280 	call	5082a28 <__sprint_r>
 5084510:	103ae51e 	bne	r2,zero,50830a8 <___vfprintf_internal_r+0x64c>
 5084514:	dc812417 	ldw	r18,1168(sp)
 5084518:	da011d17 	ldw	r8,1140(sp)
 508451c:	d8c11c17 	ldw	r3,1136(sp)
 5084520:	da400404 	addi	r9,sp,16
 5084524:	003ec906 	br	508404c <___vfprintf_internal_r+0x15f0>
 5084528:	04c14274 	movhi	r19,1289
 508452c:	9cfc3c04 	addi	r19,r19,-3856
 5084530:	003f6f06 	br	50842f0 <___vfprintf_internal_r+0x1894>
 5084534:	d8812583 	ldbu	r2,1174(sp)
 5084538:	dc012a17 	ldw	r16,1192(sp)
 508453c:	d8013115 	stw	zero,1220(sp)
 5084540:	003a3106 	br	5082e08 <___vfprintf_internal_r+0x3ac>
 5084544:	d8812404 	addi	r2,sp,1168
 5084548:	d8800115 	stw	r2,4(sp)
 508454c:	d8812304 	addi	r2,sp,1164
 5084550:	d8800215 	stw	r2,8(sp)
 5084554:	d8812204 	addi	r2,sp,1160
 5084558:	df000015 	stw	fp,0(sp)
 508455c:	d8800315 	stw	r2,12(sp)
 5084560:	8809883a 	mov	r4,r17
 5084564:	b00b883a 	mov	r5,r22
 5084568:	a00d883a 	mov	r6,r20
 508456c:	01c000c4 	movi	r7,3
 5084570:	da413c15 	stw	r9,1264(sp)
 5084574:	5084ce00 	call	5084ce0 <_dtoa_r>
 5084578:	da413c17 	ldw	r9,1264(sp)
 508457c:	1027883a 	mov	r19,r2
 5084580:	1707883a 	add	r3,r2,fp
 5084584:	e02f883a 	mov	r23,fp
 5084588:	99000007 	ldb	r4,0(r19)
 508458c:	00800c04 	movi	r2,48
 5084590:	20800326 	beq	r4,r2,50845a0 <___vfprintf_internal_r+0x1b44>
 5084594:	da812417 	ldw	r10,1168(sp)
 5084598:	1a87883a 	add	r3,r3,r10
 508459c:	003ef406 	br	5084170 <___vfprintf_internal_r+0x1714>
 50845a0:	b009883a 	mov	r4,r22
 50845a4:	a00b883a 	mov	r5,r20
 50845a8:	000d883a 	mov	r6,zero
 50845ac:	000f883a 	mov	r7,zero
 50845b0:	d8c13b15 	stw	r3,1260(sp)
 50845b4:	da413c15 	stw	r9,1264(sp)
 50845b8:	508b1580 	call	508b158 <__nedf2>
 50845bc:	d8c13b17 	ldw	r3,1260(sp)
 50845c0:	da413c17 	ldw	r9,1264(sp)
 50845c4:	103ff326 	beq	r2,zero,5084594 <___vfprintf_internal_r+0x1b38>
 50845c8:	00800044 	movi	r2,1
 50845cc:	15d5c83a 	sub	r10,r2,r23
 50845d0:	da812415 	stw	r10,1168(sp)
 50845d4:	1a87883a 	add	r3,r3,r10
 50845d8:	003ee506 	br	5084170 <___vfprintf_internal_r+0x1714>
 50845dc:	d8812417 	ldw	r2,1168(sp)
 50845e0:	d8812b15 	stw	r2,1196(sp)
 50845e4:	1029883a 	mov	r20,r2
 50845e8:	00bfff44 	movi	r2,-3
 50845ec:	a0800116 	blt	r20,r2,50845f4 <___vfprintf_internal_r+0x1b98>
 50845f0:	e5001d0e 	bge	fp,r20,5084668 <___vfprintf_internal_r+0x1c0c>
 50845f4:	94bfff84 	addi	r18,r18,-2
 50845f8:	a53fffc4 	addi	r20,r20,-1
 50845fc:	dd012415 	stw	r20,1168(sp)
 5084600:	dc811fc5 	stb	r18,1151(sp)
 5084604:	a0007816 	blt	r20,zero,50847e8 <___vfprintf_internal_r+0x1d8c>
 5084608:	00800ac4 	movi	r2,43
 508460c:	d8812005 	stb	r2,1152(sp)
 5084610:	00800244 	movi	r2,9
 5084614:	15002b16 	blt	r2,r20,50846c4 <___vfprintf_internal_r+0x1c68>
 5084618:	00800c04 	movi	r2,48
 508461c:	a5000c04 	addi	r20,r20,48
 5084620:	d8812045 	stb	r2,1153(sp)
 5084624:	dd012085 	stb	r20,1154(sp)
 5084628:	d8c120c4 	addi	r3,sp,1155
 508462c:	d8811fc4 	addi	r2,sp,1151
 5084630:	da013217 	ldw	r8,1224(sp)
 5084634:	1885c83a 	sub	r2,r3,r2
 5084638:	d8813515 	stw	r2,1236(sp)
 508463c:	4085883a 	add	r2,r8,r2
 5084640:	d8812b15 	stw	r2,1196(sp)
 5084644:	00800044 	movi	r2,1
 5084648:	1200610e 	bge	r2,r8,50847d0 <___vfprintf_internal_r+0x1d74>
 508464c:	d8812b17 	ldw	r2,1196(sp)
 5084650:	10800044 	addi	r2,r2,1
 5084654:	d8812b15 	stw	r2,1196(sp)
 5084658:	d8812815 	stw	r2,1184(sp)
 508465c:	103ee90e 	bge	r2,zero,5084204 <___vfprintf_internal_r+0x17a8>
 5084660:	d8012815 	stw	zero,1184(sp)
 5084664:	003ee706 	br	5084204 <___vfprintf_internal_r+0x17a8>
 5084668:	d8812b17 	ldw	r2,1196(sp)
 508466c:	da013217 	ldw	r8,1224(sp)
 5084670:	12003716 	blt	r2,r8,5084750 <___vfprintf_internal_r+0x1cf4>
 5084674:	8400004c 	andi	r16,r16,1
 5084678:	80000326 	beq	r16,zero,5084688 <___vfprintf_internal_r+0x1c2c>
 508467c:	d8812b17 	ldw	r2,1196(sp)
 5084680:	10800044 	addi	r2,r2,1
 5084684:	d8812b15 	stw	r2,1196(sp)
 5084688:	d8812815 	stw	r2,1184(sp)
 508468c:	10003716 	blt	r2,zero,508476c <___vfprintf_internal_r+0x1d10>
 5084690:	048019c4 	movi	r18,103
 5084694:	003edb06 	br	5084204 <___vfprintf_internal_r+0x17a8>
 5084698:	d8012815 	stw	zero,1184(sp)
 508469c:	003b6906 	br	5083444 <___vfprintf_internal_r+0x9e8>
 50846a0:	e03e901e 	bne	fp,zero,50840e4 <___vfprintf_internal_r+0x1688>
 50846a4:	07000044 	movi	fp,1
 50846a8:	003e8e06 	br	50840e4 <___vfprintf_internal_r+0x1688>
 50846ac:	07000184 	movi	fp,6
 50846b0:	003e8c06 	br	50840e4 <___vfprintf_internal_r+0x1688>
 50846b4:	00c00b44 	movi	r3,45
 50846b8:	a520003c 	xorhi	r20,r20,32768
 50846bc:	d8c12f05 	stb	r3,1212(sp)
 50846c0:	003e8c06 	br	50840f4 <___vfprintf_internal_r+0x1698>
 50846c4:	d8c11f84 	addi	r3,sp,1150
 50846c8:	102f883a 	mov	r23,r2
 50846cc:	4839883a 	mov	fp,r9
 50846d0:	a009883a 	mov	r4,r20
 50846d4:	01400284 	movi	r5,10
 50846d8:	182d883a 	mov	r22,r3
 50846dc:	508276c0 	call	508276c <__modsi3>
 50846e0:	10800c04 	addi	r2,r2,48
 50846e4:	a009883a 	mov	r4,r20
 50846e8:	b0800005 	stb	r2,0(r22)
 50846ec:	01400284 	movi	r5,10
 50846f0:	508271c0 	call	508271c <__divsi3>
 50846f4:	1029883a 	mov	r20,r2
 50846f8:	b0ffffc4 	addi	r3,r22,-1
 50846fc:	b8bff416 	blt	r23,r2,50846d0 <___vfprintf_internal_r+0x1c74>
 5084700:	11400c04 	addi	r5,r2,48
 5084704:	b17fffc5 	stb	r5,-1(r22)
 5084708:	d8811fc4 	addi	r2,sp,1151
 508470c:	e013883a 	mov	r9,fp
 5084710:	1880482e 	bgeu	r3,r2,5084834 <___vfprintf_internal_r+0x1dd8>
 5084714:	b007883a 	mov	r3,r22
 5084718:	d9012044 	addi	r4,sp,1153
 508471c:	00000206 	br	5084728 <___vfprintf_internal_r+0x1ccc>
 5084720:	19400003 	ldbu	r5,0(r3)
 5084724:	18c00044 	addi	r3,r3,1
 5084728:	21400005 	stb	r5,0(r4)
 508472c:	21000044 	addi	r4,r4,1
 5084730:	10fffb1e 	bne	r2,r3,5084720 <___vfprintf_internal_r+0x1cc4>
 5084734:	d8c12004 	addi	r3,sp,1152
 5084738:	1d87c83a 	sub	r3,r3,r22
 508473c:	d9012044 	addi	r4,sp,1153
 5084740:	20c7883a 	add	r3,r4,r3
 5084744:	003fba06 	br	5084630 <___vfprintf_internal_r+0x1bd4>
 5084748:	d8c12217 	ldw	r3,1160(sp)
 508474c:	003e9906 	br	50841b4 <___vfprintf_internal_r+0x1758>
 5084750:	05000b0e 	bge	zero,r20,5084780 <___vfprintf_internal_r+0x1d24>
 5084754:	05000044 	movi	r20,1
 5084758:	da013217 	ldw	r8,1224(sp)
 508475c:	a229883a 	add	r20,r20,r8
 5084760:	dd012b15 	stw	r20,1196(sp)
 5084764:	dd012815 	stw	r20,1184(sp)
 5084768:	a03fc90e 	bge	r20,zero,5084690 <___vfprintf_internal_r+0x1c34>
 508476c:	d8012815 	stw	zero,1184(sp)
 5084770:	048019c4 	movi	r18,103
 5084774:	003ea306 	br	5084204 <___vfprintf_internal_r+0x17a8>
 5084778:	e5c00044 	addi	r23,fp,1
 508477c:	003e6606 	br	5084118 <___vfprintf_internal_r+0x16bc>
 5084780:	00800084 	movi	r2,2
 5084784:	1529c83a 	sub	r20,r2,r20
 5084788:	003ff306 	br	5084758 <___vfprintf_internal_r+0x1cfc>
 508478c:	008011c4 	movi	r2,71
 5084790:	90be7226 	beq	r18,r2,508415c <___vfprintf_internal_r+0x1700>
 5084794:	003e7306 	br	5084164 <___vfprintf_internal_r+0x1708>
 5084798:	d8812d17 	ldw	r2,1204(sp)
 508479c:	ac800043 	ldbu	r18,1(r21)
 50847a0:	202b883a 	mov	r21,r4
 50847a4:	17000017 	ldw	fp,0(r2)
 50847a8:	10800104 	addi	r2,r2,4
 50847ac:	d8812d15 	stw	r2,1204(sp)
 50847b0:	e0001b16 	blt	fp,zero,5084820 <___vfprintf_internal_r+0x1dc4>
 50847b4:	94803fcc 	andi	r18,r18,255
 50847b8:	9480201c 	xori	r18,r18,128
 50847bc:	94bfe004 	addi	r18,r18,-128
 50847c0:	00390406 	br	5082bd4 <___vfprintf_internal_r+0x178>
 50847c4:	00bfffc4 	movi	r2,-1
 50847c8:	d8812c15 	stw	r2,1200(sp)
 50847cc:	003a2506 	br	5083064 <___vfprintf_internal_r+0x608>
 50847d0:	80a0703a 	and	r16,r16,r2
 50847d4:	803f9d1e 	bne	r16,zero,508464c <___vfprintf_internal_r+0x1bf0>
 50847d8:	d8812b17 	ldw	r2,1196(sp)
 50847dc:	d8812815 	stw	r2,1184(sp)
 50847e0:	103e880e 	bge	r2,zero,5084204 <___vfprintf_internal_r+0x17a8>
 50847e4:	003f9e06 	br	5084660 <___vfprintf_internal_r+0x1c04>
 50847e8:	00800b44 	movi	r2,45
 50847ec:	0529c83a 	sub	r20,zero,r20
 50847f0:	d8812005 	stb	r2,1152(sp)
 50847f4:	003f8606 	br	5084610 <___vfprintf_internal_r+0x1bb4>
 50847f8:	1007883a 	mov	r3,r2
 50847fc:	003e6d06 	br	50841b4 <___vfprintf_internal_r+0x1758>
 5084800:	e000021e 	bne	fp,zero,508480c <___vfprintf_internal_r+0x1db0>
 5084804:	8400004c 	andi	r16,r16,1
 5084808:	80000e26 	beq	r16,zero,5084844 <___vfprintf_internal_r+0x1de8>
 508480c:	e7000084 	addi	fp,fp,2
 5084810:	df012b15 	stw	fp,1196(sp)
 5084814:	df012815 	stw	fp,1184(sp)
 5084818:	e03e7a0e 	bge	fp,zero,5084204 <___vfprintf_internal_r+0x17a8>
 508481c:	003f9006 	br	5084660 <___vfprintf_internal_r+0x1c04>
 5084820:	94803fcc 	andi	r18,r18,255
 5084824:	9480201c 	xori	r18,r18,128
 5084828:	073fffc4 	movi	fp,-1
 508482c:	94bfe004 	addi	r18,r18,-128
 5084830:	0038e806 	br	5082bd4 <___vfprintf_internal_r+0x178>
 5084834:	d8c12044 	addi	r3,sp,1153
 5084838:	003f7d06 	br	5084630 <___vfprintf_internal_r+0x1bd4>
 508483c:	dd012417 	ldw	r20,1168(sp)
 5084840:	003f6d06 	br	50845f8 <___vfprintf_internal_r+0x1b9c>
 5084844:	00c00044 	movi	r3,1
 5084848:	d8c12815 	stw	r3,1184(sp)
 508484c:	d8c12b15 	stw	r3,1196(sp)
 5084850:	003e6c06 	br	5084204 <___vfprintf_internal_r+0x17a8>

05084854 <__vfprintf_internal>:
 5084854:	00814274 	movhi	r2,1289
 5084858:	10838c04 	addi	r2,r2,3632
 508485c:	2007883a 	mov	r3,r4
 5084860:	11000017 	ldw	r4,0(r2)
 5084864:	2805883a 	mov	r2,r5
 5084868:	300f883a 	mov	r7,r6
 508486c:	180b883a 	mov	r5,r3
 5084870:	100d883a 	mov	r6,r2
 5084874:	5082a5c1 	jmpi	5082a5c <___vfprintf_internal_r>

05084878 <_vsnprintf_r>:
 5084878:	deffe604 	addi	sp,sp,-104
 508487c:	dc401815 	stw	r17,96(sp)
 5084880:	dc001715 	stw	r16,92(sp)
 5084884:	dfc01915 	stw	ra,100(sp)
 5084888:	3021883a 	mov	r16,r6
 508488c:	2023883a 	mov	r17,r4
 5084890:	30002016 	blt	r6,zero,5084914 <_vsnprintf_r+0x9c>
 5084894:	00808204 	movi	r2,520
 5084898:	d880030d 	sth	r2,12(sp)
 508489c:	d9400015 	stw	r5,0(sp)
 50848a0:	d9400415 	stw	r5,16(sp)
 50848a4:	3000161e 	bne	r6,zero,5084900 <_vsnprintf_r+0x88>
 50848a8:	0005883a 	mov	r2,zero
 50848ac:	00c14274 	movhi	r3,1289
 50848b0:	18c38c04 	addi	r3,r3,3632
 50848b4:	19000017 	ldw	r4,0(r3)
 50848b8:	380d883a 	mov	r6,r7
 50848bc:	d9c01a17 	ldw	r7,104(sp)
 50848c0:	d8800215 	stw	r2,8(sp)
 50848c4:	d8800515 	stw	r2,20(sp)
 50848c8:	d80b883a 	mov	r5,sp
 50848cc:	00bfffc4 	movi	r2,-1
 50848d0:	d880038d 	sth	r2,14(sp)
 50848d4:	5082a5c0 	call	5082a5c <___vfprintf_internal_r>
 50848d8:	00ffffc4 	movi	r3,-1
 50848dc:	10c00a16 	blt	r2,r3,5084908 <_vsnprintf_r+0x90>
 50848e0:	80000226 	beq	r16,zero,50848ec <_vsnprintf_r+0x74>
 50848e4:	d8c00017 	ldw	r3,0(sp)
 50848e8:	18000005 	stb	zero,0(r3)
 50848ec:	dfc01917 	ldw	ra,100(sp)
 50848f0:	dc401817 	ldw	r17,96(sp)
 50848f4:	dc001717 	ldw	r16,92(sp)
 50848f8:	dec01a04 	addi	sp,sp,104
 50848fc:	f800283a 	ret
 5084900:	30bfffc4 	addi	r2,r6,-1
 5084904:	003fe906 	br	50848ac <_vsnprintf_r+0x34>
 5084908:	00c022c4 	movi	r3,139
 508490c:	88c00015 	stw	r3,0(r17)
 5084910:	003ff306 	br	50848e0 <_vsnprintf_r+0x68>
 5084914:	008022c4 	movi	r2,139
 5084918:	20800015 	stw	r2,0(r4)
 508491c:	00bfffc4 	movi	r2,-1
 5084920:	003ff206 	br	50848ec <_vsnprintf_r+0x74>

05084924 <vsnprintf>:
 5084924:	00814274 	movhi	r2,1289
 5084928:	10838c04 	addi	r2,r2,3632
 508492c:	2011883a 	mov	r8,r4
 5084930:	11000017 	ldw	r4,0(r2)
 5084934:	defffe04 	addi	sp,sp,-8
 5084938:	2807883a 	mov	r3,r5
 508493c:	3005883a 	mov	r2,r6
 5084940:	d9c00015 	stw	r7,0(sp)
 5084944:	400b883a 	mov	r5,r8
 5084948:	180d883a 	mov	r6,r3
 508494c:	100f883a 	mov	r7,r2
 5084950:	dfc00115 	stw	ra,4(sp)
 5084954:	50848780 	call	5084878 <_vsnprintf_r>
 5084958:	dfc00117 	ldw	ra,4(sp)
 508495c:	dec00204 	addi	sp,sp,8
 5084960:	f800283a 	ret

05084964 <__swsetup_r>:
 5084964:	00814274 	movhi	r2,1289
 5084968:	10838c04 	addi	r2,r2,3632
 508496c:	10800017 	ldw	r2,0(r2)
 5084970:	defffd04 	addi	sp,sp,-12
 5084974:	dc400115 	stw	r17,4(sp)
 5084978:	dc000015 	stw	r16,0(sp)
 508497c:	dfc00215 	stw	ra,8(sp)
 5084980:	2023883a 	mov	r17,r4
 5084984:	2821883a 	mov	r16,r5
 5084988:	10000226 	beq	r2,zero,5084994 <__swsetup_r+0x30>
 508498c:	10c00e17 	ldw	r3,56(r2)
 5084990:	18003d26 	beq	r3,zero,5084a88 <__swsetup_r+0x124>
 5084994:	8080030b 	ldhu	r2,12(r16)
 5084998:	10c0020c 	andi	r3,r2,8
 508499c:	18ffffcc 	andi	r3,r3,65535
 50849a0:	18e0001c 	xori	r3,r3,32768
 50849a4:	18e00004 	addi	r3,r3,-32768
 50849a8:	18001226 	beq	r3,zero,50849f4 <__swsetup_r+0x90>
 50849ac:	80c00417 	ldw	r3,16(r16)
 50849b0:	18001f26 	beq	r3,zero,5084a30 <__swsetup_r+0xcc>
 50849b4:	1100004c 	andi	r4,r2,1
 50849b8:	2000261e 	bne	r4,zero,5084a54 <__swsetup_r+0xf0>
 50849bc:	1080008c 	andi	r2,r2,2
 50849c0:	10bfffcc 	andi	r2,r2,65535
 50849c4:	10a0001c 	xori	r2,r2,32768
 50849c8:	10a00004 	addi	r2,r2,-32768
 50849cc:	1000311e 	bne	r2,zero,5084a94 <__swsetup_r+0x130>
 50849d0:	80800517 	ldw	r2,20(r16)
 50849d4:	80800215 	stw	r2,8(r16)
 50849d8:	18002326 	beq	r3,zero,5084a68 <__swsetup_r+0x104>
 50849dc:	0005883a 	mov	r2,zero
 50849e0:	dfc00217 	ldw	ra,8(sp)
 50849e4:	dc400117 	ldw	r17,4(sp)
 50849e8:	dc000017 	ldw	r16,0(sp)
 50849ec:	dec00304 	addi	sp,sp,12
 50849f0:	f800283a 	ret
 50849f4:	10c0040c 	andi	r3,r2,16
 50849f8:	18ffffcc 	andi	r3,r3,65535
 50849fc:	18e0001c 	xori	r3,r3,32768
 5084a00:	18e00004 	addi	r3,r3,-32768
 5084a04:	18001e26 	beq	r3,zero,5084a80 <__swsetup_r+0x11c>
 5084a08:	10c0010c 	andi	r3,r2,4
 5084a0c:	18ffffcc 	andi	r3,r3,65535
 5084a10:	18e0001c 	xori	r3,r3,32768
 5084a14:	18e00004 	addi	r3,r3,-32768
 5084a18:	1800211e 	bne	r3,zero,5084aa0 <__swsetup_r+0x13c>
 5084a1c:	80c00417 	ldw	r3,16(r16)
 5084a20:	11400214 	ori	r5,r2,8
 5084a24:	8140030d 	sth	r5,12(r16)
 5084a28:	2805883a 	mov	r2,r5
 5084a2c:	183fe11e 	bne	r3,zero,50849b4 <__swsetup_r+0x50>
 5084a30:	1140a00c 	andi	r5,r2,640
 5084a34:	01008004 	movi	r4,512
 5084a38:	293fde26 	beq	r5,r4,50849b4 <__swsetup_r+0x50>
 5084a3c:	8809883a 	mov	r4,r17
 5084a40:	800b883a 	mov	r5,r16
 5084a44:	50873180 	call	5087318 <__smakebuf_r>
 5084a48:	8080030b 	ldhu	r2,12(r16)
 5084a4c:	80c00417 	ldw	r3,16(r16)
 5084a50:	003fd806 	br	50849b4 <__swsetup_r+0x50>
 5084a54:	80800517 	ldw	r2,20(r16)
 5084a58:	80000215 	stw	zero,8(r16)
 5084a5c:	0085c83a 	sub	r2,zero,r2
 5084a60:	80800615 	stw	r2,24(r16)
 5084a64:	183fdd1e 	bne	r3,zero,50849dc <__swsetup_r+0x78>
 5084a68:	8080030b 	ldhu	r2,12(r16)
 5084a6c:	1080200c 	andi	r2,r2,128
 5084a70:	10bfffcc 	andi	r2,r2,65535
 5084a74:	10a0001c 	xori	r2,r2,32768
 5084a78:	10a00004 	addi	r2,r2,-32768
 5084a7c:	103fd826 	beq	r2,zero,50849e0 <__swsetup_r+0x7c>
 5084a80:	00bfffc4 	movi	r2,-1
 5084a84:	003fd606 	br	50849e0 <__swsetup_r+0x7c>
 5084a88:	1009883a 	mov	r4,r2
 5084a8c:	50865a40 	call	50865a4 <__sinit>
 5084a90:	003fc006 	br	5084994 <__swsetup_r+0x30>
 5084a94:	0005883a 	mov	r2,zero
 5084a98:	80800215 	stw	r2,8(r16)
 5084a9c:	003fce06 	br	50849d8 <__swsetup_r+0x74>
 5084aa0:	81400c17 	ldw	r5,48(r16)
 5084aa4:	28000626 	beq	r5,zero,5084ac0 <__swsetup_r+0x15c>
 5084aa8:	80c01004 	addi	r3,r16,64
 5084aac:	28c00326 	beq	r5,r3,5084abc <__swsetup_r+0x158>
 5084ab0:	8809883a 	mov	r4,r17
 5084ab4:	50869280 	call	5086928 <_free_r>
 5084ab8:	8080030b 	ldhu	r2,12(r16)
 5084abc:	80000c15 	stw	zero,48(r16)
 5084ac0:	80c00417 	ldw	r3,16(r16)
 5084ac4:	013ff6c4 	movi	r4,-37
 5084ac8:	2084703a 	and	r2,r4,r2
 5084acc:	80000115 	stw	zero,4(r16)
 5084ad0:	80c00015 	stw	r3,0(r16)
 5084ad4:	003fd206 	br	5084a20 <__swsetup_r+0xbc>

05084ad8 <quorem>:
 5084ad8:	defff704 	addi	sp,sp,-36
 5084adc:	dc400115 	stw	r17,4(sp)
 5084ae0:	20800417 	ldw	r2,16(r4)
 5084ae4:	2c400417 	ldw	r17,16(r5)
 5084ae8:	dd800615 	stw	r22,24(sp)
 5084aec:	dd400515 	stw	r21,20(sp)
 5084af0:	dfc00815 	stw	ra,32(sp)
 5084af4:	ddc00715 	stw	r23,28(sp)
 5084af8:	dd000415 	stw	r20,16(sp)
 5084afc:	dcc00315 	stw	r19,12(sp)
 5084b00:	dc800215 	stw	r18,8(sp)
 5084b04:	dc000015 	stw	r16,0(sp)
 5084b08:	202b883a 	mov	r21,r4
 5084b0c:	282d883a 	mov	r22,r5
 5084b10:	14407116 	blt	r2,r17,5084cd8 <quorem+0x200>
 5084b14:	88800104 	addi	r2,r17,4
 5084b18:	1085883a 	add	r2,r2,r2
 5084b1c:	1085883a 	add	r2,r2,r2
 5084b20:	28a7883a 	add	r19,r5,r2
 5084b24:	2085883a 	add	r2,r4,r2
 5084b28:	15c00017 	ldw	r23,0(r2)
 5084b2c:	99400017 	ldw	r5,0(r19)
 5084b30:	8c7fffc4 	addi	r17,r17,-1
 5084b34:	b809883a 	mov	r4,r23
 5084b38:	29400044 	addi	r5,r5,1
 5084b3c:	50827c80 	call	50827c8 <__udivsi3>
 5084b40:	1025883a 	mov	r18,r2
 5084b44:	b4000504 	addi	r16,r22,20
 5084b48:	ad000504 	addi	r20,r21,20
 5084b4c:	10002d26 	beq	r2,zero,5084c04 <quorem+0x12c>
 5084b50:	800d883a 	mov	r6,r16
 5084b54:	a007883a 	mov	r3,r20
 5084b58:	000f883a 	mov	r7,zero
 5084b5c:	0005883a 	mov	r2,zero
 5084b60:	32c00017 	ldw	r11,0(r6)
 5084b64:	1a400017 	ldw	r9,0(r3)
 5084b68:	31800104 	addi	r6,r6,4
 5084b6c:	5abfffcc 	andi	r10,r11,65535
 5084b70:	5495383a 	mul	r10,r10,r18
 5084b74:	5816d43a 	srli	r11,r11,16
 5084b78:	4a3fffcc 	andi	r8,r9,65535
 5084b7c:	3a95883a 	add	r10,r7,r10
 5084b80:	500ed43a 	srli	r7,r10,16
 5084b84:	5c97383a 	mul	r11,r11,r18
 5084b88:	4085883a 	add	r2,r8,r2
 5084b8c:	52bfffcc 	andi	r10,r10,65535
 5084b90:	1291c83a 	sub	r8,r2,r10
 5084b94:	4804d43a 	srli	r2,r9,16
 5084b98:	3acf883a 	add	r7,r7,r11
 5084b9c:	4015d43a 	srai	r10,r8,16
 5084ba0:	393fffcc 	andi	r4,r7,65535
 5084ba4:	1105c83a 	sub	r2,r2,r4
 5084ba8:	1285883a 	add	r2,r2,r10
 5084bac:	1880008d 	sth	r2,2(r3)
 5084bb0:	1a00000d 	sth	r8,0(r3)
 5084bb4:	380ed43a 	srli	r7,r7,16
 5084bb8:	1005d43a 	srai	r2,r2,16
 5084bbc:	18c00104 	addi	r3,r3,4
 5084bc0:	99bfe72e 	bgeu	r19,r6,5084b60 <quorem+0x88>
 5084bc4:	b8000f1e 	bne	r23,zero,5084c04 <quorem+0x12c>
 5084bc8:	88800144 	addi	r2,r17,5
 5084bcc:	1085883a 	add	r2,r2,r2
 5084bd0:	1085883a 	add	r2,r2,r2
 5084bd4:	a887883a 	add	r3,r21,r2
 5084bd8:	18bfff04 	addi	r2,r3,-4
 5084bdc:	a080082e 	bgeu	r20,r2,5084c00 <quorem+0x128>
 5084be0:	18ffff17 	ldw	r3,-4(r3)
 5084be4:	18000326 	beq	r3,zero,5084bf4 <quorem+0x11c>
 5084be8:	00000506 	br	5084c00 <quorem+0x128>
 5084bec:	10c00017 	ldw	r3,0(r2)
 5084bf0:	1800031e 	bne	r3,zero,5084c00 <quorem+0x128>
 5084bf4:	10bfff04 	addi	r2,r2,-4
 5084bf8:	8c7fffc4 	addi	r17,r17,-1
 5084bfc:	a0bffb36 	bltu	r20,r2,5084bec <quorem+0x114>
 5084c00:	ac400415 	stw	r17,16(r21)
 5084c04:	a809883a 	mov	r4,r21
 5084c08:	b00b883a 	mov	r5,r22
 5084c0c:	50888dc0 	call	50888dc <__mcmp>
 5084c10:	10002516 	blt	r2,zero,5084ca8 <quorem+0x1d0>
 5084c14:	94800044 	addi	r18,r18,1
 5084c18:	a007883a 	mov	r3,r20
 5084c1c:	000b883a 	mov	r5,zero
 5084c20:	1a000017 	ldw	r8,0(r3)
 5084c24:	81c00017 	ldw	r7,0(r16)
 5084c28:	84000104 	addi	r16,r16,4
 5084c2c:	41bfffcc 	andi	r6,r8,65535
 5084c30:	38bfffcc 	andi	r2,r7,65535
 5084c34:	314b883a 	add	r5,r6,r5
 5084c38:	288dc83a 	sub	r6,r5,r2
 5084c3c:	380ed43a 	srli	r7,r7,16
 5084c40:	400ad43a 	srli	r5,r8,16
 5084c44:	3005d43a 	srai	r2,r6,16
 5084c48:	1980000d 	sth	r6,0(r3)
 5084c4c:	29cbc83a 	sub	r5,r5,r7
 5084c50:	288b883a 	add	r5,r5,r2
 5084c54:	1940008d 	sth	r5,2(r3)
 5084c58:	280bd43a 	srai	r5,r5,16
 5084c5c:	18c00104 	addi	r3,r3,4
 5084c60:	9c3fef2e 	bgeu	r19,r16,5084c20 <quorem+0x148>
 5084c64:	88800144 	addi	r2,r17,5
 5084c68:	1085883a 	add	r2,r2,r2
 5084c6c:	1085883a 	add	r2,r2,r2
 5084c70:	a885883a 	add	r2,r21,r2
 5084c74:	10c00017 	ldw	r3,0(r2)
 5084c78:	18000b1e 	bne	r3,zero,5084ca8 <quorem+0x1d0>
 5084c7c:	10ffff04 	addi	r3,r2,-4
 5084c80:	a0c0082e 	bgeu	r20,r3,5084ca4 <quorem+0x1cc>
 5084c84:	10bfff17 	ldw	r2,-4(r2)
 5084c88:	10000326 	beq	r2,zero,5084c98 <quorem+0x1c0>
 5084c8c:	00000506 	br	5084ca4 <quorem+0x1cc>
 5084c90:	18800017 	ldw	r2,0(r3)
 5084c94:	1000031e 	bne	r2,zero,5084ca4 <quorem+0x1cc>
 5084c98:	18ffff04 	addi	r3,r3,-4
 5084c9c:	8c7fffc4 	addi	r17,r17,-1
 5084ca0:	a0fffb36 	bltu	r20,r3,5084c90 <quorem+0x1b8>
 5084ca4:	ac400415 	stw	r17,16(r21)
 5084ca8:	9005883a 	mov	r2,r18
 5084cac:	dfc00817 	ldw	ra,32(sp)
 5084cb0:	ddc00717 	ldw	r23,28(sp)
 5084cb4:	dd800617 	ldw	r22,24(sp)
 5084cb8:	dd400517 	ldw	r21,20(sp)
 5084cbc:	dd000417 	ldw	r20,16(sp)
 5084cc0:	dcc00317 	ldw	r19,12(sp)
 5084cc4:	dc800217 	ldw	r18,8(sp)
 5084cc8:	dc400117 	ldw	r17,4(sp)
 5084ccc:	dc000017 	ldw	r16,0(sp)
 5084cd0:	dec00904 	addi	sp,sp,36
 5084cd4:	f800283a 	ret
 5084cd8:	0005883a 	mov	r2,zero
 5084cdc:	003ff306 	br	5084cac <quorem+0x1d4>

05084ce0 <_dtoa_r>:
 5084ce0:	20801017 	ldw	r2,64(r4)
 5084ce4:	deffdf04 	addi	sp,sp,-132
 5084ce8:	dcc01a15 	stw	r19,104(sp)
 5084cec:	dc801915 	stw	r18,100(sp)
 5084cf0:	dc401815 	stw	r17,96(sp)
 5084cf4:	dc001715 	stw	r16,92(sp)
 5084cf8:	dfc02015 	stw	ra,128(sp)
 5084cfc:	df001f15 	stw	fp,124(sp)
 5084d00:	ddc01e15 	stw	r23,120(sp)
 5084d04:	dd801d15 	stw	r22,116(sp)
 5084d08:	dd401c15 	stw	r21,112(sp)
 5084d0c:	dd001b15 	stw	r20,108(sp)
 5084d10:	d9400315 	stw	r5,12(sp)
 5084d14:	d9c00415 	stw	r7,16(sp)
 5084d18:	2021883a 	mov	r16,r4
 5084d1c:	3025883a 	mov	r18,r6
 5084d20:	dcc02317 	ldw	r19,140(sp)
 5084d24:	3023883a 	mov	r17,r6
 5084d28:	10000826 	beq	r2,zero,5084d4c <_dtoa_r+0x6c>
 5084d2c:	20c01117 	ldw	r3,68(r4)
 5084d30:	01800044 	movi	r6,1
 5084d34:	100b883a 	mov	r5,r2
 5084d38:	30cc983a 	sll	r6,r6,r3
 5084d3c:	10c00115 	stw	r3,4(r2)
 5084d40:	11800215 	stw	r6,8(r2)
 5084d44:	50880e00 	call	50880e0 <_Bfree>
 5084d48:	80001015 	stw	zero,64(r16)
 5084d4c:	90002f16 	blt	r18,zero,5084e0c <_dtoa_r+0x12c>
 5084d50:	98000015 	stw	zero,0(r19)
 5084d54:	90dffc2c 	andhi	r3,r18,32752
 5084d58:	009ffc34 	movhi	r2,32752
 5084d5c:	18801c26 	beq	r3,r2,5084dd0 <_dtoa_r+0xf0>
 5084d60:	d9000317 	ldw	r4,12(sp)
 5084d64:	880b883a 	mov	r5,r17
 5084d68:	000d883a 	mov	r6,zero
 5084d6c:	000f883a 	mov	r7,zero
 5084d70:	508b0fc0 	call	508b0fc <__eqdf2>
 5084d74:	10002c1e 	bne	r2,zero,5084e28 <_dtoa_r+0x148>
 5084d78:	d9002217 	ldw	r4,136(sp)
 5084d7c:	d9c02417 	ldw	r7,144(sp)
 5084d80:	00800044 	movi	r2,1
 5084d84:	20800015 	stw	r2,0(r4)
 5084d88:	38019426 	beq	r7,zero,50853dc <_dtoa_r+0x6fc>
 5084d8c:	00814274 	movhi	r2,1289
 5084d90:	10bc4944 	addi	r2,r2,-3803
 5084d94:	38800015 	stw	r2,0(r7)
 5084d98:	15ffffc4 	addi	r23,r2,-1
 5084d9c:	b805883a 	mov	r2,r23
 5084da0:	dfc02017 	ldw	ra,128(sp)
 5084da4:	df001f17 	ldw	fp,124(sp)
 5084da8:	ddc01e17 	ldw	r23,120(sp)
 5084dac:	dd801d17 	ldw	r22,116(sp)
 5084db0:	dd401c17 	ldw	r21,112(sp)
 5084db4:	dd001b17 	ldw	r20,108(sp)
 5084db8:	dcc01a17 	ldw	r19,104(sp)
 5084dbc:	dc801917 	ldw	r18,100(sp)
 5084dc0:	dc401817 	ldw	r17,96(sp)
 5084dc4:	dc001717 	ldw	r16,92(sp)
 5084dc8:	dec02104 	addi	sp,sp,132
 5084dcc:	f800283a 	ret
 5084dd0:	d8c02217 	ldw	r3,136(sp)
 5084dd4:	d9000317 	ldw	r4,12(sp)
 5084dd8:	0089c3c4 	movi	r2,9999
 5084ddc:	18800015 	stw	r2,0(r3)
 5084de0:	20016c26 	beq	r4,zero,5085394 <_dtoa_r+0x6b4>
 5084de4:	05c14274 	movhi	r23,1289
 5084de8:	bdfc5504 	addi	r23,r23,-3756
 5084dec:	d9c02417 	ldw	r7,144(sp)
 5084df0:	383fea26 	beq	r7,zero,5084d9c <_dtoa_r+0xbc>
 5084df4:	b88000c7 	ldb	r2,3(r23)
 5084df8:	10016d1e 	bne	r2,zero,50853b0 <_dtoa_r+0x6d0>
 5084dfc:	b88000c4 	addi	r2,r23,3
 5084e00:	d8c02417 	ldw	r3,144(sp)
 5084e04:	18800015 	stw	r2,0(r3)
 5084e08:	003fe406 	br	5084d9c <_dtoa_r+0xbc>
 5084e0c:	04600034 	movhi	r17,32768
 5084e10:	8c7fffc4 	addi	r17,r17,-1
 5084e14:	9462703a 	and	r17,r18,r17
 5084e18:	00800044 	movi	r2,1
 5084e1c:	98800015 	stw	r2,0(r19)
 5084e20:	8825883a 	mov	r18,r17
 5084e24:	003fcb06 	br	5084d54 <_dtoa_r+0x74>
 5084e28:	d9400317 	ldw	r5,12(sp)
 5084e2c:	9028d53a 	srli	r20,r18,20
 5084e30:	d8800204 	addi	r2,sp,8
 5084e34:	d8800015 	stw	r2,0(sp)
 5084e38:	8009883a 	mov	r4,r16
 5084e3c:	880d883a 	mov	r6,r17
 5084e40:	d9c00104 	addi	r7,sp,4
 5084e44:	5088c840 	call	5088c84 <__d2b>
 5084e48:	a501ffcc 	andi	r20,r20,2047
 5084e4c:	1039883a 	mov	fp,r2
 5084e50:	a001591e 	bne	r20,zero,50853b8 <_dtoa_r+0x6d8>
 5084e54:	dd400217 	ldw	r21,8(sp)
 5084e58:	dd000117 	ldw	r20,4(sp)
 5084e5c:	00befbc4 	movi	r2,-1041
 5084e60:	ad29883a 	add	r20,r21,r20
 5084e64:	a082d216 	blt	r20,r2,50859b0 <_dtoa_r+0xcd0>
 5084e68:	d8c00317 	ldw	r3,12(sp)
 5084e6c:	013f0384 	movi	r4,-1010
 5084e70:	2509c83a 	sub	r4,r4,r20
 5084e74:	a0810484 	addi	r2,r20,1042
 5084e78:	9124983a 	sll	r18,r18,r4
 5084e7c:	1884d83a 	srl	r2,r3,r2
 5084e80:	9088b03a 	or	r4,r18,r2
 5084e84:	508b4800 	call	508b480 <__floatunsidf>
 5084e88:	1009883a 	mov	r4,r2
 5084e8c:	017f8434 	movhi	r5,65040
 5084e90:	00800044 	movi	r2,1
 5084e94:	194b883a 	add	r5,r3,r5
 5084e98:	a53fffc4 	addi	r20,r20,-1
 5084e9c:	d8800f15 	stw	r2,60(sp)
 5084ea0:	000d883a 	mov	r6,zero
 5084ea4:	01cffe34 	movhi	r7,16376
 5084ea8:	508ac040 	call	508ac04 <__subdf3>
 5084eac:	1009883a 	mov	r4,r2
 5084eb0:	180b883a 	mov	r5,r3
 5084eb4:	0198dbf4 	movhi	r6,25455
 5084eb8:	3190d844 	addi	r6,r6,17249
 5084ebc:	01cff4f4 	movhi	r7,16339
 5084ec0:	39e1e9c4 	addi	r7,r7,-30809
 5084ec4:	508ac640 	call	508ac64 <__muldf3>
 5084ec8:	180b883a 	mov	r5,r3
 5084ecc:	01a2d874 	movhi	r6,35681
 5084ed0:	31b22cc4 	addi	r6,r6,-14157
 5084ed4:	01cff1f4 	movhi	r7,16327
 5084ed8:	39e28a04 	addi	r7,r7,-30168
 5084edc:	1009883a 	mov	r4,r2
 5084ee0:	508abb00 	call	508abb0 <__adddf3>
 5084ee4:	a009883a 	mov	r4,r20
 5084ee8:	1027883a 	mov	r19,r2
 5084eec:	1825883a 	mov	r18,r3
 5084ef0:	508b2d80 	call	508b2d8 <__floatsidf>
 5084ef4:	1009883a 	mov	r4,r2
 5084ef8:	180b883a 	mov	r5,r3
 5084efc:	019427f4 	movhi	r6,20639
 5084f00:	319e7ec4 	addi	r6,r6,31227
 5084f04:	01cff4f4 	movhi	r7,16339
 5084f08:	39d104c4 	addi	r7,r7,17427
 5084f0c:	508ac640 	call	508ac64 <__muldf3>
 5084f10:	9809883a 	mov	r4,r19
 5084f14:	900b883a 	mov	r5,r18
 5084f18:	100d883a 	mov	r6,r2
 5084f1c:	180f883a 	mov	r7,r3
 5084f20:	508abb00 	call	508abb0 <__adddf3>
 5084f24:	1009883a 	mov	r4,r2
 5084f28:	180b883a 	mov	r5,r3
 5084f2c:	1027883a 	mov	r19,r2
 5084f30:	1825883a 	mov	r18,r3
 5084f34:	508b3ac0 	call	508b3ac <__fixdfsi>
 5084f38:	9809883a 	mov	r4,r19
 5084f3c:	900b883a 	mov	r5,r18
 5084f40:	000d883a 	mov	r6,zero
 5084f44:	000f883a 	mov	r7,zero
 5084f48:	d8800615 	stw	r2,24(sp)
 5084f4c:	508b27c0 	call	508b27c <__ltdf2>
 5084f50:	10027e16 	blt	r2,zero,508594c <_dtoa_r+0xc6c>
 5084f54:	d8c00617 	ldw	r3,24(sp)
 5084f58:	00800584 	movi	r2,22
 5084f5c:	10c26c36 	bltu	r2,r3,5085910 <_dtoa_r+0xc30>
 5084f60:	180490fa 	slli	r2,r3,3
 5084f64:	00c14274 	movhi	r3,1289
 5084f68:	18fc7b04 	addi	r3,r3,-3604
 5084f6c:	d9800317 	ldw	r6,12(sp)
 5084f70:	1885883a 	add	r2,r3,r2
 5084f74:	11000017 	ldw	r4,0(r2)
 5084f78:	11400117 	ldw	r5,4(r2)
 5084f7c:	880f883a 	mov	r7,r17
 5084f80:	508b1b40 	call	508b1b4 <__gtdf2>
 5084f84:	00828f0e 	bge	zero,r2,50859c4 <_dtoa_r+0xce4>
 5084f88:	d8800617 	ldw	r2,24(sp)
 5084f8c:	d8000d15 	stw	zero,52(sp)
 5084f90:	10bfffc4 	addi	r2,r2,-1
 5084f94:	d8800615 	stw	r2,24(sp)
 5084f98:	ad29c83a 	sub	r20,r21,r20
 5084f9c:	a53fffc4 	addi	r20,r20,-1
 5084fa0:	a0026616 	blt	r20,zero,508593c <_dtoa_r+0xc5c>
 5084fa4:	dd000715 	stw	r20,28(sp)
 5084fa8:	d8000815 	stw	zero,32(sp)
 5084fac:	d8800617 	ldw	r2,24(sp)
 5084fb0:	10025a16 	blt	r2,zero,508591c <_dtoa_r+0xc3c>
 5084fb4:	d8c00717 	ldw	r3,28(sp)
 5084fb8:	d8800b15 	stw	r2,44(sp)
 5084fbc:	d8000a15 	stw	zero,40(sp)
 5084fc0:	1887883a 	add	r3,r3,r2
 5084fc4:	d8c00715 	stw	r3,28(sp)
 5084fc8:	d9c00417 	ldw	r7,16(sp)
 5084fcc:	00800244 	movi	r2,9
 5084fd0:	11c10536 	bltu	r2,r7,50853e8 <_dtoa_r+0x708>
 5084fd4:	00800144 	movi	r2,5
 5084fd8:	11c4c60e 	bge	r2,r7,50862f4 <_dtoa_r+0x1614>
 5084fdc:	39ffff04 	addi	r7,r7,-4
 5084fe0:	d9c00415 	stw	r7,16(sp)
 5084fe4:	0027883a 	mov	r19,zero
 5084fe8:	d9c00417 	ldw	r7,16(sp)
 5084fec:	008000c4 	movi	r2,3
 5084ff0:	3883a226 	beq	r7,r2,5085e7c <_dtoa_r+0x119c>
 5084ff4:	11c2bc16 	blt	r2,r7,5085ae8 <_dtoa_r+0xe08>
 5084ff8:	00800084 	movi	r2,2
 5084ffc:	3880fb1e 	bne	r7,r2,50853ec <_dtoa_r+0x70c>
 5085000:	d8000c15 	stw	zero,48(sp)
 5085004:	d9002117 	ldw	r4,132(sp)
 5085008:	0103ae0e 	bge	zero,r4,5085ec4 <_dtoa_r+0x11e4>
 508500c:	2025883a 	mov	r18,r4
 5085010:	d9000e15 	stw	r4,56(sp)
 5085014:	d9000915 	stw	r4,36(sp)
 5085018:	80001115 	stw	zero,68(r16)
 508501c:	008005c4 	movi	r2,23
 5085020:	1484b22e 	bgeu	r2,r18,50862ec <_dtoa_r+0x160c>
 5085024:	00c00044 	movi	r3,1
 5085028:	00800104 	movi	r2,4
 508502c:	1085883a 	add	r2,r2,r2
 5085030:	11000504 	addi	r4,r2,20
 5085034:	180b883a 	mov	r5,r3
 5085038:	18c00044 	addi	r3,r3,1
 508503c:	913ffb2e 	bgeu	r18,r4,508502c <_dtoa_r+0x34c>
 5085040:	81401115 	stw	r5,68(r16)
 5085044:	8009883a 	mov	r4,r16
 5085048:	50880380 	call	5088038 <_Balloc>
 508504c:	102f883a 	mov	r23,r2
 5085050:	80801015 	stw	r2,64(r16)
 5085054:	00800384 	movi	r2,14
 5085058:	1480f036 	bltu	r2,r18,508541c <_dtoa_r+0x73c>
 508505c:	9800ef26 	beq	r19,zero,508541c <_dtoa_r+0x73c>
 5085060:	d8800617 	ldw	r2,24(sp)
 5085064:	00839c0e 	bge	zero,r2,5085ed8 <_dtoa_r+0x11f8>
 5085068:	d8c00617 	ldw	r3,24(sp)
 508506c:	108003cc 	andi	r2,r2,15
 5085070:	100490fa 	slli	r2,r2,3
 5085074:	182bd13a 	srai	r21,r3,4
 5085078:	00c14274 	movhi	r3,1289
 508507c:	18fc7b04 	addi	r3,r3,-3604
 5085080:	1885883a 	add	r2,r3,r2
 5085084:	a8c0040c 	andi	r3,r21,16
 5085088:	12800017 	ldw	r10,0(r2)
 508508c:	15800117 	ldw	r22,4(r2)
 5085090:	18038726 	beq	r3,zero,5085eb0 <_dtoa_r+0x11d0>
 5085094:	00814274 	movhi	r2,1289
 5085098:	10bc7104 	addi	r2,r2,-3644
 508509c:	11800817 	ldw	r6,32(r2)
 50850a0:	11c00917 	ldw	r7,36(r2)
 50850a4:	d9000317 	ldw	r4,12(sp)
 50850a8:	880b883a 	mov	r5,r17
 50850ac:	da801515 	stw	r10,84(sp)
 50850b0:	508af480 	call	508af48 <__divdf3>
 50850b4:	da801517 	ldw	r10,84(sp)
 50850b8:	d8801015 	stw	r2,64(sp)
 50850bc:	1829883a 	mov	r20,r3
 50850c0:	ad4003cc 	andi	r21,r21,15
 50850c4:	048000c4 	movi	r18,3
 50850c8:	a8001126 	beq	r21,zero,5085110 <_dtoa_r+0x430>
 50850cc:	04c14274 	movhi	r19,1289
 50850d0:	9cfc7104 	addi	r19,r19,-3644
 50850d4:	5005883a 	mov	r2,r10
 50850d8:	b007883a 	mov	r3,r22
 50850dc:	a980004c 	andi	r6,r21,1
 50850e0:	1009883a 	mov	r4,r2
 50850e4:	a82bd07a 	srai	r21,r21,1
 50850e8:	180b883a 	mov	r5,r3
 50850ec:	30000426 	beq	r6,zero,5085100 <_dtoa_r+0x420>
 50850f0:	99800017 	ldw	r6,0(r19)
 50850f4:	99c00117 	ldw	r7,4(r19)
 50850f8:	94800044 	addi	r18,r18,1
 50850fc:	508ac640 	call	508ac64 <__muldf3>
 5085100:	9cc00204 	addi	r19,r19,8
 5085104:	a83ff51e 	bne	r21,zero,50850dc <_dtoa_r+0x3fc>
 5085108:	1015883a 	mov	r10,r2
 508510c:	182d883a 	mov	r22,r3
 5085110:	d9001017 	ldw	r4,64(sp)
 5085114:	a00b883a 	mov	r5,r20
 5085118:	500d883a 	mov	r6,r10
 508511c:	b00f883a 	mov	r7,r22
 5085120:	508af480 	call	508af48 <__divdf3>
 5085124:	1027883a 	mov	r19,r2
 5085128:	1829883a 	mov	r20,r3
 508512c:	d8c00d17 	ldw	r3,52(sp)
 5085130:	18000626 	beq	r3,zero,508514c <_dtoa_r+0x46c>
 5085134:	9809883a 	mov	r4,r19
 5085138:	a00b883a 	mov	r5,r20
 508513c:	000d883a 	mov	r6,zero
 5085140:	01cffc34 	movhi	r7,16368
 5085144:	508b27c0 	call	508b27c <__ltdf2>
 5085148:	10040e16 	blt	r2,zero,5086184 <_dtoa_r+0x14a4>
 508514c:	9009883a 	mov	r4,r18
 5085150:	508b2d80 	call	508b2d8 <__floatsidf>
 5085154:	1009883a 	mov	r4,r2
 5085158:	180b883a 	mov	r5,r3
 508515c:	980d883a 	mov	r6,r19
 5085160:	a00f883a 	mov	r7,r20
 5085164:	508ac640 	call	508ac64 <__muldf3>
 5085168:	1009883a 	mov	r4,r2
 508516c:	180b883a 	mov	r5,r3
 5085170:	000d883a 	mov	r6,zero
 5085174:	01d00734 	movhi	r7,16412
 5085178:	508abb00 	call	508abb0 <__adddf3>
 508517c:	057f3034 	movhi	r21,64704
 5085180:	1d6b883a 	add	r21,r3,r21
 5085184:	d8c00917 	ldw	r3,36(sp)
 5085188:	1025883a 	mov	r18,r2
 508518c:	18031f26 	beq	r3,zero,5085e0c <_dtoa_r+0x112c>
 5085190:	d8800617 	ldw	r2,24(sp)
 5085194:	dac00917 	ldw	r11,36(sp)
 5085198:	d8801315 	stw	r2,76(sp)
 508519c:	d8c00c17 	ldw	r3,48(sp)
 50851a0:	18039026 	beq	r3,zero,5085fe4 <_dtoa_r+0x1304>
 50851a4:	58bfffc4 	addi	r2,r11,-1
 50851a8:	100490fa 	slli	r2,r2,3
 50851ac:	00c14274 	movhi	r3,1289
 50851b0:	18fc7b04 	addi	r3,r3,-3604
 50851b4:	0009883a 	mov	r4,zero
 50851b8:	1885883a 	add	r2,r3,r2
 50851bc:	11800017 	ldw	r6,0(r2)
 50851c0:	11c00117 	ldw	r7,4(r2)
 50851c4:	014ff834 	movhi	r5,16352
 50851c8:	dac01615 	stw	r11,88(sp)
 50851cc:	508af480 	call	508af48 <__divdf3>
 50851d0:	900d883a 	mov	r6,r18
 50851d4:	a80f883a 	mov	r7,r21
 50851d8:	1009883a 	mov	r4,r2
 50851dc:	180b883a 	mov	r5,r3
 50851e0:	508ac040 	call	508ac04 <__subdf3>
 50851e4:	a00b883a 	mov	r5,r20
 50851e8:	9809883a 	mov	r4,r19
 50851ec:	182b883a 	mov	r21,r3
 50851f0:	d8801015 	stw	r2,64(sp)
 50851f4:	508b3ac0 	call	508b3ac <__fixdfsi>
 50851f8:	1009883a 	mov	r4,r2
 50851fc:	d8801515 	stw	r2,84(sp)
 5085200:	508b2d80 	call	508b2d8 <__floatsidf>
 5085204:	9809883a 	mov	r4,r19
 5085208:	a00b883a 	mov	r5,r20
 508520c:	100d883a 	mov	r6,r2
 5085210:	180f883a 	mov	r7,r3
 5085214:	508ac040 	call	508ac04 <__subdf3>
 5085218:	da401517 	ldw	r9,84(sp)
 508521c:	d9001017 	ldw	r4,64(sp)
 5085220:	a80b883a 	mov	r5,r21
 5085224:	4d000c04 	addi	r20,r9,48
 5085228:	bd000005 	stb	r20,0(r23)
 508522c:	100d883a 	mov	r6,r2
 5085230:	180f883a 	mov	r7,r3
 5085234:	bd800044 	addi	r22,r23,1
 5085238:	1025883a 	mov	r18,r2
 508523c:	1827883a 	mov	r19,r3
 5085240:	508b1b40 	call	508b1b4 <__gtdf2>
 5085244:	00842216 	blt	zero,r2,50862d0 <_dtoa_r+0x15f0>
 5085248:	0009883a 	mov	r4,zero
 508524c:	014ffc34 	movhi	r5,16368
 5085250:	900d883a 	mov	r6,r18
 5085254:	980f883a 	mov	r7,r19
 5085258:	508ac040 	call	508ac04 <__subdf3>
 508525c:	d9001017 	ldw	r4,64(sp)
 5085260:	a80b883a 	mov	r5,r21
 5085264:	100d883a 	mov	r6,r2
 5085268:	180f883a 	mov	r7,r3
 508526c:	508b1b40 	call	508b1b4 <__gtdf2>
 5085270:	dac01617 	ldw	r11,88(sp)
 5085274:	00841316 	blt	zero,r2,50862c4 <_dtoa_r+0x15e4>
 5085278:	00800044 	movi	r2,1
 508527c:	12c0670e 	bge	r2,r11,508541c <_dtoa_r+0x73c>
 5085280:	bad7883a 	add	r11,r23,r11
 5085284:	df001115 	stw	fp,68(sp)
 5085288:	dc401215 	stw	r17,72(sp)
 508528c:	5839883a 	mov	fp,r11
 5085290:	dc401017 	ldw	r17,64(sp)
 5085294:	00000806 	br	50852b8 <_dtoa_r+0x5d8>
 5085298:	508ac040 	call	508ac04 <__subdf3>
 508529c:	1009883a 	mov	r4,r2
 50852a0:	180b883a 	mov	r5,r3
 50852a4:	880d883a 	mov	r6,r17
 50852a8:	a80f883a 	mov	r7,r21
 50852ac:	508b27c0 	call	508b27c <__ltdf2>
 50852b0:	1003ee16 	blt	r2,zero,508626c <_dtoa_r+0x158c>
 50852b4:	b703f126 	beq	r22,fp,508627c <_dtoa_r+0x159c>
 50852b8:	8809883a 	mov	r4,r17
 50852bc:	a80b883a 	mov	r5,r21
 50852c0:	000d883a 	mov	r6,zero
 50852c4:	01d00934 	movhi	r7,16420
 50852c8:	508ac640 	call	508ac64 <__muldf3>
 50852cc:	000d883a 	mov	r6,zero
 50852d0:	01d00934 	movhi	r7,16420
 50852d4:	9009883a 	mov	r4,r18
 50852d8:	980b883a 	mov	r5,r19
 50852dc:	1023883a 	mov	r17,r2
 50852e0:	182b883a 	mov	r21,r3
 50852e4:	508ac640 	call	508ac64 <__muldf3>
 50852e8:	180b883a 	mov	r5,r3
 50852ec:	1009883a 	mov	r4,r2
 50852f0:	1825883a 	mov	r18,r3
 50852f4:	1027883a 	mov	r19,r2
 50852f8:	508b3ac0 	call	508b3ac <__fixdfsi>
 50852fc:	1009883a 	mov	r4,r2
 5085300:	1029883a 	mov	r20,r2
 5085304:	508b2d80 	call	508b2d8 <__floatsidf>
 5085308:	9809883a 	mov	r4,r19
 508530c:	900b883a 	mov	r5,r18
 5085310:	100d883a 	mov	r6,r2
 5085314:	180f883a 	mov	r7,r3
 5085318:	508ac040 	call	508ac04 <__subdf3>
 508531c:	a5000c04 	addi	r20,r20,48
 5085320:	b5000005 	stb	r20,0(r22)
 5085324:	1009883a 	mov	r4,r2
 5085328:	180b883a 	mov	r5,r3
 508532c:	880d883a 	mov	r6,r17
 5085330:	a80f883a 	mov	r7,r21
 5085334:	1025883a 	mov	r18,r2
 5085338:	1827883a 	mov	r19,r3
 508533c:	508b27c0 	call	508b27c <__ltdf2>
 5085340:	b5800044 	addi	r22,r22,1
 5085344:	0009883a 	mov	r4,zero
 5085348:	014ffc34 	movhi	r5,16368
 508534c:	900d883a 	mov	r6,r18
 5085350:	980f883a 	mov	r7,r19
 5085354:	103fd00e 	bge	r2,zero,5085298 <_dtoa_r+0x5b8>
 5085358:	d9001317 	ldw	r4,76(sp)
 508535c:	df001117 	ldw	fp,68(sp)
 5085360:	d9000615 	stw	r4,24(sp)
 5085364:	8009883a 	mov	r4,r16
 5085368:	e00b883a 	mov	r5,fp
 508536c:	50880e00 	call	50880e0 <_Bfree>
 5085370:	d9c00617 	ldw	r7,24(sp)
 5085374:	d8c02217 	ldw	r3,136(sp)
 5085378:	d9002417 	ldw	r4,144(sp)
 508537c:	b0000005 	stb	zero,0(r22)
 5085380:	38800044 	addi	r2,r7,1
 5085384:	18800015 	stw	r2,0(r3)
 5085388:	203e8426 	beq	r4,zero,5084d9c <_dtoa_r+0xbc>
 508538c:	25800015 	stw	r22,0(r4)
 5085390:	003e8206 	br	5084d9c <_dtoa_r+0xbc>
 5085394:	00800434 	movhi	r2,16
 5085398:	10bfffc4 	addi	r2,r2,-1
 508539c:	90a4703a 	and	r18,r18,r2
 50853a0:	903e901e 	bne	r18,zero,5084de4 <_dtoa_r+0x104>
 50853a4:	05c14274 	movhi	r23,1289
 50853a8:	bdfc5204 	addi	r23,r23,-3768
 50853ac:	003e8f06 	br	5084dec <_dtoa_r+0x10c>
 50853b0:	b8800204 	addi	r2,r23,8
 50853b4:	003e9206 	br	5084e00 <_dtoa_r+0x120>
 50853b8:	01400434 	movhi	r5,16
 50853bc:	297fffc4 	addi	r5,r5,-1
 50853c0:	894a703a 	and	r5,r17,r5
 50853c4:	d9000317 	ldw	r4,12(sp)
 50853c8:	294ffc34 	orhi	r5,r5,16368
 50853cc:	a53f0044 	addi	r20,r20,-1023
 50853d0:	dd400217 	ldw	r21,8(sp)
 50853d4:	d8000f15 	stw	zero,60(sp)
 50853d8:	003eb106 	br	5084ea0 <_dtoa_r+0x1c0>
 50853dc:	05c14274 	movhi	r23,1289
 50853e0:	bdfc4904 	addi	r23,r23,-3804
 50853e4:	003e6d06 	br	5084d9c <_dtoa_r+0xbc>
 50853e8:	d8000415 	stw	zero,16(sp)
 50853ec:	80001115 	stw	zero,68(r16)
 50853f0:	8009883a 	mov	r4,r16
 50853f4:	000b883a 	mov	r5,zero
 50853f8:	50880380 	call	5088038 <_Balloc>
 50853fc:	01ffffc4 	movi	r7,-1
 5085400:	102f883a 	mov	r23,r2
 5085404:	80801015 	stw	r2,64(r16)
 5085408:	00800044 	movi	r2,1
 508540c:	d9c00915 	stw	r7,36(sp)
 5085410:	d8002115 	stw	zero,132(sp)
 5085414:	d9c00e15 	stw	r7,56(sp)
 5085418:	d8800c15 	stw	r2,48(sp)
 508541c:	d8800117 	ldw	r2,4(sp)
 5085420:	10008b16 	blt	r2,zero,5085650 <_dtoa_r+0x970>
 5085424:	d9000617 	ldw	r4,24(sp)
 5085428:	00c00384 	movi	r3,14
 508542c:	19008816 	blt	r3,r4,5085650 <_dtoa_r+0x970>
 5085430:	200490fa 	slli	r2,r4,3
 5085434:	d9c02117 	ldw	r7,132(sp)
 5085438:	00c14274 	movhi	r3,1289
 508543c:	18fc7b04 	addi	r3,r3,-3604
 5085440:	1885883a 	add	r2,r3,r2
 5085444:	14800017 	ldw	r18,0(r2)
 5085448:	14c00117 	ldw	r19,4(r2)
 508544c:	3801c916 	blt	r7,zero,5085b74 <_dtoa_r+0xe94>
 5085450:	d9000317 	ldw	r4,12(sp)
 5085454:	900d883a 	mov	r6,r18
 5085458:	980f883a 	mov	r7,r19
 508545c:	880b883a 	mov	r5,r17
 5085460:	508af480 	call	508af48 <__divdf3>
 5085464:	180b883a 	mov	r5,r3
 5085468:	1009883a 	mov	r4,r2
 508546c:	508b3ac0 	call	508b3ac <__fixdfsi>
 5085470:	1009883a 	mov	r4,r2
 5085474:	102b883a 	mov	r21,r2
 5085478:	508b2d80 	call	508b2d8 <__floatsidf>
 508547c:	1009883a 	mov	r4,r2
 5085480:	180b883a 	mov	r5,r3
 5085484:	900d883a 	mov	r6,r18
 5085488:	980f883a 	mov	r7,r19
 508548c:	508ac640 	call	508ac64 <__muldf3>
 5085490:	d9000317 	ldw	r4,12(sp)
 5085494:	880b883a 	mov	r5,r17
 5085498:	100d883a 	mov	r6,r2
 508549c:	180f883a 	mov	r7,r3
 50854a0:	508ac040 	call	508ac04 <__subdf3>
 50854a4:	d9c00917 	ldw	r7,36(sp)
 50854a8:	1009883a 	mov	r4,r2
 50854ac:	a8800c04 	addi	r2,r21,48
 50854b0:	b8800005 	stb	r2,0(r23)
 50854b4:	01800044 	movi	r6,1
 50854b8:	180b883a 	mov	r5,r3
 50854bc:	2005883a 	mov	r2,r4
 50854c0:	bd800044 	addi	r22,r23,1
 50854c4:	39803726 	beq	r7,r6,50855a4 <_dtoa_r+0x8c4>
 50854c8:	000d883a 	mov	r6,zero
 50854cc:	01d00934 	movhi	r7,16420
 50854d0:	508ac640 	call	508ac64 <__muldf3>
 50854d4:	1009883a 	mov	r4,r2
 50854d8:	180b883a 	mov	r5,r3
 50854dc:	000d883a 	mov	r6,zero
 50854e0:	000f883a 	mov	r7,zero
 50854e4:	1029883a 	mov	r20,r2
 50854e8:	1823883a 	mov	r17,r3
 50854ec:	508b0fc0 	call	508b0fc <__eqdf2>
 50854f0:	103f9c26 	beq	r2,zero,5085364 <_dtoa_r+0x684>
 50854f4:	dd400917 	ldw	r21,36(sp)
 50854f8:	dc000415 	stw	r16,16(sp)
 50854fc:	00000906 	br	5085524 <_dtoa_r+0x844>
 5085500:	508ac640 	call	508ac64 <__muldf3>
 5085504:	1009883a 	mov	r4,r2
 5085508:	180b883a 	mov	r5,r3
 508550c:	000d883a 	mov	r6,zero
 5085510:	000f883a 	mov	r7,zero
 5085514:	1029883a 	mov	r20,r2
 5085518:	1823883a 	mov	r17,r3
 508551c:	508b0fc0 	call	508b0fc <__eqdf2>
 5085520:	10022926 	beq	r2,zero,5085dc8 <_dtoa_r+0x10e8>
 5085524:	900d883a 	mov	r6,r18
 5085528:	980f883a 	mov	r7,r19
 508552c:	a009883a 	mov	r4,r20
 5085530:	880b883a 	mov	r5,r17
 5085534:	508af480 	call	508af48 <__divdf3>
 5085538:	180b883a 	mov	r5,r3
 508553c:	1009883a 	mov	r4,r2
 5085540:	508b3ac0 	call	508b3ac <__fixdfsi>
 5085544:	1009883a 	mov	r4,r2
 5085548:	1021883a 	mov	r16,r2
 508554c:	508b2d80 	call	508b2d8 <__floatsidf>
 5085550:	1009883a 	mov	r4,r2
 5085554:	180b883a 	mov	r5,r3
 5085558:	900d883a 	mov	r6,r18
 508555c:	980f883a 	mov	r7,r19
 5085560:	508ac640 	call	508ac64 <__muldf3>
 5085564:	a009883a 	mov	r4,r20
 5085568:	880b883a 	mov	r5,r17
 508556c:	100d883a 	mov	r6,r2
 5085570:	180f883a 	mov	r7,r3
 5085574:	508ac040 	call	508ac04 <__subdf3>
 5085578:	82400c04 	addi	r9,r16,48
 508557c:	b2400005 	stb	r9,0(r22)
 5085580:	b5800044 	addi	r22,r22,1
 5085584:	b5d3c83a 	sub	r9,r22,r23
 5085588:	000d883a 	mov	r6,zero
 508558c:	01d00934 	movhi	r7,16420
 5085590:	1009883a 	mov	r4,r2
 5085594:	180b883a 	mov	r5,r3
 5085598:	aa7fd91e 	bne	r21,r9,5085500 <_dtoa_r+0x820>
 508559c:	802b883a 	mov	r21,r16
 50855a0:	dc000417 	ldw	r16,16(sp)
 50855a4:	1009883a 	mov	r4,r2
 50855a8:	180b883a 	mov	r5,r3
 50855ac:	100d883a 	mov	r6,r2
 50855b0:	180f883a 	mov	r7,r3
 50855b4:	508abb00 	call	508abb0 <__adddf3>
 50855b8:	9009883a 	mov	r4,r18
 50855bc:	980b883a 	mov	r5,r19
 50855c0:	100d883a 	mov	r6,r2
 50855c4:	180f883a 	mov	r7,r3
 50855c8:	1023883a 	mov	r17,r2
 50855cc:	1829883a 	mov	r20,r3
 50855d0:	508b27c0 	call	508b27c <__ltdf2>
 50855d4:	10000816 	blt	r2,zero,50855f8 <_dtoa_r+0x918>
 50855d8:	9009883a 	mov	r4,r18
 50855dc:	980b883a 	mov	r5,r19
 50855e0:	880d883a 	mov	r6,r17
 50855e4:	a00f883a 	mov	r7,r20
 50855e8:	508b0fc0 	call	508b0fc <__eqdf2>
 50855ec:	103f5d1e 	bne	r2,zero,5085364 <_dtoa_r+0x684>
 50855f0:	ad40004c 	andi	r21,r21,1
 50855f4:	a83f5b26 	beq	r21,zero,5085364 <_dtoa_r+0x684>
 50855f8:	b53fffc3 	ldbu	r20,-1(r22)
 50855fc:	b0ffff84 	addi	r3,r22,-2
 5085600:	01400e44 	movi	r5,57
 5085604:	00000306 	br	5085614 <_dtoa_r+0x934>
 5085608:	1d000003 	ldbu	r20,0(r3)
 508560c:	102d883a 	mov	r22,r2
 5085610:	18ffffc4 	addi	r3,r3,-1
 5085614:	a1003fcc 	andi	r4,r20,255
 5085618:	2100201c 	xori	r4,r4,128
 508561c:	213fe004 	addi	r4,r4,-128
 5085620:	b0bfffc4 	addi	r2,r22,-1
 5085624:	2142ca1e 	bne	r4,r5,5086150 <_dtoa_r+0x1470>
 5085628:	b8bff71e 	bne	r23,r2,5085608 <_dtoa_r+0x928>
 508562c:	d8800617 	ldw	r2,24(sp)
 5085630:	05000c44 	movi	r20,49
 5085634:	10800044 	addi	r2,r2,1
 5085638:	d8800615 	stw	r2,24(sp)
 508563c:	00800c04 	movi	r2,48
 5085640:	b8800005 	stb	r2,0(r23)
 5085644:	b805883a 	mov	r2,r23
 5085648:	15000005 	stb	r20,0(r2)
 508564c:	003f4506 	br	5085364 <_dtoa_r+0x684>
 5085650:	d9c00c17 	ldw	r7,48(sp)
 5085654:	3800c926 	beq	r7,zero,508597c <_dtoa_r+0xc9c>
 5085658:	d9c00417 	ldw	r7,16(sp)
 508565c:	00c00044 	movi	r3,1
 5085660:	19c16c0e 	bge	r3,r7,5085c14 <_dtoa_r+0xf34>
 5085664:	d9000917 	ldw	r4,36(sp)
 5085668:	d9c00a17 	ldw	r7,40(sp)
 508566c:	24ffffc4 	addi	r19,r4,-1
 5085670:	3cc20716 	blt	r7,r19,5085e90 <_dtoa_r+0x11b0>
 5085674:	3ce7c83a 	sub	r19,r7,r19
 5085678:	d9c00917 	ldw	r7,36(sp)
 508567c:	3802ae16 	blt	r7,zero,5086138 <_dtoa_r+0x1458>
 5085680:	dc800817 	ldw	r18,32(sp)
 5085684:	d8800917 	ldw	r2,36(sp)
 5085688:	d8c00817 	ldw	r3,32(sp)
 508568c:	d9c00717 	ldw	r7,28(sp)
 5085690:	8009883a 	mov	r4,r16
 5085694:	1887883a 	add	r3,r3,r2
 5085698:	388f883a 	add	r7,r7,r2
 508569c:	01400044 	movi	r5,1
 50856a0:	d8c00815 	stw	r3,32(sp)
 50856a4:	d9c00715 	stw	r7,28(sp)
 50856a8:	50884380 	call	5088438 <__i2b>
 50856ac:	102b883a 	mov	r21,r2
 50856b0:	90000a26 	beq	r18,zero,50856dc <_dtoa_r+0x9fc>
 50856b4:	d8800717 	ldw	r2,28(sp)
 50856b8:	0080080e 	bge	zero,r2,50856dc <_dtoa_r+0x9fc>
 50856bc:	90812b16 	blt	r18,r2,5085b6c <_dtoa_r+0xe8c>
 50856c0:	d8c00817 	ldw	r3,32(sp)
 50856c4:	d9000717 	ldw	r4,28(sp)
 50856c8:	90a5c83a 	sub	r18,r18,r2
 50856cc:	1887c83a 	sub	r3,r3,r2
 50856d0:	2089c83a 	sub	r4,r4,r2
 50856d4:	d8c00815 	stw	r3,32(sp)
 50856d8:	d9000715 	stw	r4,28(sp)
 50856dc:	d9c00a17 	ldw	r7,40(sp)
 50856e0:	01c0140e 	bge	zero,r7,5085734 <_dtoa_r+0xa54>
 50856e4:	d8800c17 	ldw	r2,48(sp)
 50856e8:	1001de26 	beq	r2,zero,5085e64 <_dtoa_r+0x1184>
 50856ec:	04c00e0e 	bge	zero,r19,5085728 <_dtoa_r+0xa48>
 50856f0:	a80b883a 	mov	r5,r21
 50856f4:	8009883a 	mov	r4,r16
 50856f8:	980d883a 	mov	r6,r19
 50856fc:	50886540 	call	5088654 <__pow5mult>
 5085700:	e00d883a 	mov	r6,fp
 5085704:	8009883a 	mov	r4,r16
 5085708:	100b883a 	mov	r5,r2
 508570c:	102b883a 	mov	r21,r2
 5085710:	50884740 	call	5088474 <__multiply>
 5085714:	1029883a 	mov	r20,r2
 5085718:	e00b883a 	mov	r5,fp
 508571c:	8009883a 	mov	r4,r16
 5085720:	50880e00 	call	50880e0 <_Bfree>
 5085724:	a039883a 	mov	fp,r20
 5085728:	d8c00a17 	ldw	r3,40(sp)
 508572c:	1ccdc83a 	sub	r6,r3,r19
 5085730:	3001291e 	bne	r6,zero,5085bd8 <_dtoa_r+0xef8>
 5085734:	8009883a 	mov	r4,r16
 5085738:	01400044 	movi	r5,1
 508573c:	50884380 	call	5088438 <__i2b>
 5085740:	d9000b17 	ldw	r4,44(sp)
 5085744:	1029883a 	mov	r20,r2
 5085748:	0100050e 	bge	zero,r4,5085760 <_dtoa_r+0xa80>
 508574c:	d9800b17 	ldw	r6,44(sp)
 5085750:	8009883a 	mov	r4,r16
 5085754:	100b883a 	mov	r5,r2
 5085758:	50886540 	call	5088654 <__pow5mult>
 508575c:	1029883a 	mov	r20,r2
 5085760:	d9c00417 	ldw	r7,16(sp)
 5085764:	00800044 	movi	r2,1
 5085768:	11c0f00e 	bge	r2,r7,5085b2c <_dtoa_r+0xe4c>
 508576c:	0023883a 	mov	r17,zero
 5085770:	d8800b17 	ldw	r2,44(sp)
 5085774:	1001741e 	bne	r2,zero,5085d48 <_dtoa_r+0x1068>
 5085778:	00800044 	movi	r2,1
 508577c:	d8c00717 	ldw	r3,28(sp)
 5085780:	10c5883a 	add	r2,r2,r3
 5085784:	108007cc 	andi	r2,r2,31
 5085788:	10008026 	beq	r2,zero,508598c <_dtoa_r+0xcac>
 508578c:	01000804 	movi	r4,32
 5085790:	2089c83a 	sub	r4,r4,r2
 5085794:	00c00104 	movi	r3,4
 5085798:	1902d00e 	bge	r3,r4,50862dc <_dtoa_r+0x15fc>
 508579c:	d9000817 	ldw	r4,32(sp)
 50857a0:	d9c00717 	ldw	r7,28(sp)
 50857a4:	00c00704 	movi	r3,28
 50857a8:	1885c83a 	sub	r2,r3,r2
 50857ac:	2089883a 	add	r4,r4,r2
 50857b0:	388f883a 	add	r7,r7,r2
 50857b4:	d9000815 	stw	r4,32(sp)
 50857b8:	90a5883a 	add	r18,r18,r2
 50857bc:	d9c00715 	stw	r7,28(sp)
 50857c0:	d9c00817 	ldw	r7,32(sp)
 50857c4:	01c0050e 	bge	zero,r7,50857dc <_dtoa_r+0xafc>
 50857c8:	e00b883a 	mov	r5,fp
 50857cc:	8009883a 	mov	r4,r16
 50857d0:	380d883a 	mov	r6,r7
 50857d4:	50887800 	call	5088780 <__lshift>
 50857d8:	1039883a 	mov	fp,r2
 50857dc:	d8800717 	ldw	r2,28(sp)
 50857e0:	0080050e 	bge	zero,r2,50857f8 <_dtoa_r+0xb18>
 50857e4:	a00b883a 	mov	r5,r20
 50857e8:	8009883a 	mov	r4,r16
 50857ec:	100d883a 	mov	r6,r2
 50857f0:	50887800 	call	5088780 <__lshift>
 50857f4:	1029883a 	mov	r20,r2
 50857f8:	d8c00d17 	ldw	r3,52(sp)
 50857fc:	1801401e 	bne	r3,zero,5085d00 <_dtoa_r+0x1020>
 5085800:	d8800917 	ldw	r2,36(sp)
 5085804:	00815a0e 	bge	zero,r2,5085d70 <_dtoa_r+0x1090>
 5085808:	d8c00c17 	ldw	r3,48(sp)
 508580c:	18006f1e 	bne	r3,zero,50859cc <_dtoa_r+0xcec>
 5085810:	b823883a 	mov	r17,r23
 5085814:	dc800917 	ldw	r18,36(sp)
 5085818:	00000206 	br	5085824 <_dtoa_r+0xb44>
 508581c:	50881080 	call	5088108 <__multadd>
 5085820:	1039883a 	mov	fp,r2
 5085824:	e009883a 	mov	r4,fp
 5085828:	a00b883a 	mov	r5,r20
 508582c:	5084ad80 	call	5084ad8 <quorem>
 5085830:	10800c04 	addi	r2,r2,48
 5085834:	88800005 	stb	r2,0(r17)
 5085838:	8c400044 	addi	r17,r17,1
 508583c:	8dc7c83a 	sub	r3,r17,r23
 5085840:	8009883a 	mov	r4,r16
 5085844:	e00b883a 	mov	r5,fp
 5085848:	01800284 	movi	r6,10
 508584c:	000f883a 	mov	r7,zero
 5085850:	1cbff216 	blt	r3,r18,508581c <_dtoa_r+0xb3c>
 5085854:	dd800917 	ldw	r22,36(sp)
 5085858:	1007883a 	mov	r3,r2
 508585c:	05823a0e 	bge	zero,r22,5086148 <_dtoa_r+0x1468>
 5085860:	bdad883a 	add	r22,r23,r22
 5085864:	0023883a 	mov	r17,zero
 5085868:	e00b883a 	mov	r5,fp
 508586c:	01800044 	movi	r6,1
 5085870:	8009883a 	mov	r4,r16
 5085874:	d8c01515 	stw	r3,84(sp)
 5085878:	50887800 	call	5088780 <__lshift>
 508587c:	1009883a 	mov	r4,r2
 5085880:	a00b883a 	mov	r5,r20
 5085884:	1039883a 	mov	fp,r2
 5085888:	50888dc0 	call	50888dc <__mcmp>
 508588c:	d8c01517 	ldw	r3,84(sp)
 5085890:	0080d60e 	bge	zero,r2,5085bec <_dtoa_r+0xf0c>
 5085894:	b13fffc3 	ldbu	r4,-1(r22)
 5085898:	b0ffff84 	addi	r3,r22,-2
 508589c:	01800e44 	movi	r6,57
 50858a0:	00000306 	br	50858b0 <_dtoa_r+0xbd0>
 50858a4:	19000003 	ldbu	r4,0(r3)
 50858a8:	102d883a 	mov	r22,r2
 50858ac:	18ffffc4 	addi	r3,r3,-1
 50858b0:	21403fcc 	andi	r5,r4,255
 50858b4:	2940201c 	xori	r5,r5,128
 50858b8:	297fe004 	addi	r5,r5,-128
 50858bc:	b0bfffc4 	addi	r2,r22,-1
 50858c0:	2981a71e 	bne	r5,r6,5085f60 <_dtoa_r+0x1280>
 50858c4:	b8bff71e 	bne	r23,r2,50858a4 <_dtoa_r+0xbc4>
 50858c8:	d8800617 	ldw	r2,24(sp)
 50858cc:	10800044 	addi	r2,r2,1
 50858d0:	d8800615 	stw	r2,24(sp)
 50858d4:	00800c44 	movi	r2,49
 50858d8:	b8800005 	stb	r2,0(r23)
 50858dc:	8009883a 	mov	r4,r16
 50858e0:	a00b883a 	mov	r5,r20
 50858e4:	50880e00 	call	50880e0 <_Bfree>
 50858e8:	a83e9e26 	beq	r21,zero,5085364 <_dtoa_r+0x684>
 50858ec:	88000426 	beq	r17,zero,5085900 <_dtoa_r+0xc20>
 50858f0:	8d400326 	beq	r17,r21,5085900 <_dtoa_r+0xc20>
 50858f4:	8009883a 	mov	r4,r16
 50858f8:	880b883a 	mov	r5,r17
 50858fc:	50880e00 	call	50880e0 <_Bfree>
 5085900:	8009883a 	mov	r4,r16
 5085904:	a80b883a 	mov	r5,r21
 5085908:	50880e00 	call	50880e0 <_Bfree>
 508590c:	003e9506 	br	5085364 <_dtoa_r+0x684>
 5085910:	00c00044 	movi	r3,1
 5085914:	d8c00d15 	stw	r3,52(sp)
 5085918:	003d9f06 	br	5084f98 <_dtoa_r+0x2b8>
 508591c:	d9000817 	ldw	r4,32(sp)
 5085920:	d8800617 	ldw	r2,24(sp)
 5085924:	d8000b15 	stw	zero,44(sp)
 5085928:	2089c83a 	sub	r4,r4,r2
 508592c:	0087c83a 	sub	r3,zero,r2
 5085930:	d9000815 	stw	r4,32(sp)
 5085934:	d8c00a15 	stw	r3,40(sp)
 5085938:	003da306 	br	5084fc8 <_dtoa_r+0x2e8>
 508593c:	0529c83a 	sub	r20,zero,r20
 5085940:	dd000815 	stw	r20,32(sp)
 5085944:	d8000715 	stw	zero,28(sp)
 5085948:	003d9806 	br	5084fac <_dtoa_r+0x2cc>
 508594c:	d9000617 	ldw	r4,24(sp)
 5085950:	508b2d80 	call	508b2d8 <__floatsidf>
 5085954:	1009883a 	mov	r4,r2
 5085958:	180b883a 	mov	r5,r3
 508595c:	980d883a 	mov	r6,r19
 5085960:	900f883a 	mov	r7,r18
 5085964:	508b1580 	call	508b158 <__nedf2>
 5085968:	103d7a26 	beq	r2,zero,5084f54 <_dtoa_r+0x274>
 508596c:	d8800617 	ldw	r2,24(sp)
 5085970:	10bfffc4 	addi	r2,r2,-1
 5085974:	d8800615 	stw	r2,24(sp)
 5085978:	003d7606 	br	5084f54 <_dtoa_r+0x274>
 508597c:	dcc00a17 	ldw	r19,40(sp)
 5085980:	dc800817 	ldw	r18,32(sp)
 5085984:	002b883a 	mov	r21,zero
 5085988:	003f4906 	br	50856b0 <_dtoa_r+0x9d0>
 508598c:	00800704 	movi	r2,28
 5085990:	d8c00817 	ldw	r3,32(sp)
 5085994:	d9000717 	ldw	r4,28(sp)
 5085998:	90a5883a 	add	r18,r18,r2
 508599c:	1887883a 	add	r3,r3,r2
 50859a0:	2089883a 	add	r4,r4,r2
 50859a4:	d8c00815 	stw	r3,32(sp)
 50859a8:	d9000715 	stw	r4,28(sp)
 50859ac:	003f8406 	br	50857c0 <_dtoa_r+0xae0>
 50859b0:	d9c00317 	ldw	r7,12(sp)
 50859b4:	013efb84 	movi	r4,-1042
 50859b8:	2509c83a 	sub	r4,r4,r20
 50859bc:	3908983a 	sll	r4,r7,r4
 50859c0:	003d3006 	br	5084e84 <_dtoa_r+0x1a4>
 50859c4:	d8000d15 	stw	zero,52(sp)
 50859c8:	003d7306 	br	5084f98 <_dtoa_r+0x2b8>
 50859cc:	0480050e 	bge	zero,r18,50859e4 <_dtoa_r+0xd04>
 50859d0:	a80b883a 	mov	r5,r21
 50859d4:	8009883a 	mov	r4,r16
 50859d8:	900d883a 	mov	r6,r18
 50859dc:	50887800 	call	5088780 <__lshift>
 50859e0:	102b883a 	mov	r21,r2
 50859e4:	8801611e 	bne	r17,zero,5085f6c <_dtoa_r+0x128c>
 50859e8:	a827883a 	mov	r19,r21
 50859ec:	d8c00317 	ldw	r3,12(sp)
 50859f0:	d9000917 	ldw	r4,36(sp)
 50859f4:	b8bfffc4 	addi	r2,r23,-1
 50859f8:	18c0004c 	andi	r3,r3,1
 50859fc:	1105883a 	add	r2,r2,r4
 5085a00:	b825883a 	mov	r18,r23
 5085a04:	d8800515 	stw	r2,20(sp)
 5085a08:	a823883a 	mov	r17,r21
 5085a0c:	d8c00315 	stw	r3,12(sp)
 5085a10:	ddc00715 	stw	r23,28(sp)
 5085a14:	e009883a 	mov	r4,fp
 5085a18:	a00b883a 	mov	r5,r20
 5085a1c:	5084ad80 	call	5084ad8 <quorem>
 5085a20:	e009883a 	mov	r4,fp
 5085a24:	880b883a 	mov	r5,r17
 5085a28:	102d883a 	mov	r22,r2
 5085a2c:	50888dc0 	call	50888dc <__mcmp>
 5085a30:	980d883a 	mov	r6,r19
 5085a34:	8009883a 	mov	r4,r16
 5085a38:	a00b883a 	mov	r5,r20
 5085a3c:	102b883a 	mov	r21,r2
 5085a40:	50889340 	call	5088934 <__mdiff>
 5085a44:	100d883a 	mov	r6,r2
 5085a48:	10800317 	ldw	r2,12(r2)
 5085a4c:	b5c00c04 	addi	r23,r22,48
 5085a50:	10008c26 	beq	r2,zero,5085c84 <_dtoa_r+0xfa4>
 5085a54:	8009883a 	mov	r4,r16
 5085a58:	300b883a 	mov	r5,r6
 5085a5c:	50880e00 	call	50880e0 <_Bfree>
 5085a60:	00800044 	movi	r2,1
 5085a64:	a8007116 	blt	r21,zero,5085c2c <_dtoa_r+0xf4c>
 5085a68:	a800041e 	bne	r21,zero,5085a7c <_dtoa_r+0xd9c>
 5085a6c:	d9c00417 	ldw	r7,16(sp)
 5085a70:	3800021e 	bne	r7,zero,5085a7c <_dtoa_r+0xd9c>
 5085a74:	d8c00317 	ldw	r3,12(sp)
 5085a78:	18006c26 	beq	r3,zero,5085c2c <_dtoa_r+0xf4c>
 5085a7c:	00814c16 	blt	zero,r2,5085fb0 <_dtoa_r+0x12d0>
 5085a80:	d8c00517 	ldw	r3,20(sp)
 5085a84:	95400044 	addi	r21,r18,1
 5085a88:	95c00005 	stb	r23,0(r18)
 5085a8c:	a82d883a 	mov	r22,r21
 5085a90:	90c14d26 	beq	r18,r3,5085fc8 <_dtoa_r+0x12e8>
 5085a94:	e00b883a 	mov	r5,fp
 5085a98:	8009883a 	mov	r4,r16
 5085a9c:	01800284 	movi	r6,10
 5085aa0:	000f883a 	mov	r7,zero
 5085aa4:	50881080 	call	5088108 <__multadd>
 5085aa8:	1039883a 	mov	fp,r2
 5085aac:	8cc08b26 	beq	r17,r19,5085cdc <_dtoa_r+0xffc>
 5085ab0:	880b883a 	mov	r5,r17
 5085ab4:	01800284 	movi	r6,10
 5085ab8:	000f883a 	mov	r7,zero
 5085abc:	8009883a 	mov	r4,r16
 5085ac0:	50881080 	call	5088108 <__multadd>
 5085ac4:	980b883a 	mov	r5,r19
 5085ac8:	8009883a 	mov	r4,r16
 5085acc:	01800284 	movi	r6,10
 5085ad0:	000f883a 	mov	r7,zero
 5085ad4:	1023883a 	mov	r17,r2
 5085ad8:	50881080 	call	5088108 <__multadd>
 5085adc:	1027883a 	mov	r19,r2
 5085ae0:	a825883a 	mov	r18,r21
 5085ae4:	003fcb06 	br	5085a14 <_dtoa_r+0xd34>
 5085ae8:	d9c00417 	ldw	r7,16(sp)
 5085aec:	00800104 	movi	r2,4
 5085af0:	3880e426 	beq	r7,r2,5085e84 <_dtoa_r+0x11a4>
 5085af4:	00800144 	movi	r2,5
 5085af8:	38be3c1e 	bne	r7,r2,50853ec <_dtoa_r+0x70c>
 5085afc:	00c00044 	movi	r3,1
 5085b00:	d8c00c15 	stw	r3,48(sp)
 5085b04:	d9c02117 	ldw	r7,132(sp)
 5085b08:	d8800617 	ldw	r2,24(sp)
 5085b0c:	388f883a 	add	r7,r7,r2
 5085b10:	3c800044 	addi	r18,r7,1
 5085b14:	d9c00e15 	stw	r7,56(sp)
 5085b18:	dc800915 	stw	r18,36(sp)
 5085b1c:	04bd3e16 	blt	zero,r18,5085018 <_dtoa_r+0x338>
 5085b20:	80001115 	stw	zero,68(r16)
 5085b24:	000b883a 	mov	r5,zero
 5085b28:	003d4606 	br	5085044 <_dtoa_r+0x364>
 5085b2c:	d8c00317 	ldw	r3,12(sp)
 5085b30:	183f0e1e 	bne	r3,zero,508576c <_dtoa_r+0xa8c>
 5085b34:	00c00434 	movhi	r3,16
 5085b38:	18ffffc4 	addi	r3,r3,-1
 5085b3c:	88c6703a 	and	r3,r17,r3
 5085b40:	183f0a1e 	bne	r3,zero,508576c <_dtoa_r+0xa8c>
 5085b44:	8c5ffc2c 	andhi	r17,r17,32752
 5085b48:	883f0826 	beq	r17,zero,508576c <_dtoa_r+0xa8c>
 5085b4c:	d9000817 	ldw	r4,32(sp)
 5085b50:	d9c00717 	ldw	r7,28(sp)
 5085b54:	1023883a 	mov	r17,r2
 5085b58:	2089883a 	add	r4,r4,r2
 5085b5c:	388f883a 	add	r7,r7,r2
 5085b60:	d9000815 	stw	r4,32(sp)
 5085b64:	d9c00715 	stw	r7,28(sp)
 5085b68:	003f0106 	br	5085770 <_dtoa_r+0xa90>
 5085b6c:	9005883a 	mov	r2,r18
 5085b70:	003ed306 	br	50856c0 <_dtoa_r+0x9e0>
 5085b74:	d8800917 	ldw	r2,36(sp)
 5085b78:	00be3516 	blt	zero,r2,5085450 <_dtoa_r+0x770>
 5085b7c:	1000b61e 	bne	r2,zero,5085e58 <_dtoa_r+0x1178>
 5085b80:	9009883a 	mov	r4,r18
 5085b84:	980b883a 	mov	r5,r19
 5085b88:	000d883a 	mov	r6,zero
 5085b8c:	01d00534 	movhi	r7,16404
 5085b90:	508ac640 	call	508ac64 <__muldf3>
 5085b94:	d9800317 	ldw	r6,12(sp)
 5085b98:	1009883a 	mov	r4,r2
 5085b9c:	180b883a 	mov	r5,r3
 5085ba0:	880f883a 	mov	r7,r17
 5085ba4:	508b2180 	call	508b218 <__gedf2>
 5085ba8:	0029883a 	mov	r20,zero
 5085bac:	002b883a 	mov	r21,zero
 5085bb0:	10007e16 	blt	r2,zero,5085dac <_dtoa_r+0x10cc>
 5085bb4:	d8802117 	ldw	r2,132(sp)
 5085bb8:	b82d883a 	mov	r22,r23
 5085bbc:	0084303a 	nor	r2,zero,r2
 5085bc0:	d8800615 	stw	r2,24(sp)
 5085bc4:	8009883a 	mov	r4,r16
 5085bc8:	a00b883a 	mov	r5,r20
 5085bcc:	50880e00 	call	50880e0 <_Bfree>
 5085bd0:	a83f4b1e 	bne	r21,zero,5085900 <_dtoa_r+0xc20>
 5085bd4:	003de306 	br	5085364 <_dtoa_r+0x684>
 5085bd8:	e00b883a 	mov	r5,fp
 5085bdc:	8009883a 	mov	r4,r16
 5085be0:	50886540 	call	5088654 <__pow5mult>
 5085be4:	1039883a 	mov	fp,r2
 5085be8:	003ed206 	br	5085734 <_dtoa_r+0xa54>
 5085bec:	1000021e 	bne	r2,zero,5085bf8 <_dtoa_r+0xf18>
 5085bf0:	18c0004c 	andi	r3,r3,1
 5085bf4:	183f271e 	bne	r3,zero,5085894 <_dtoa_r+0xbb4>
 5085bf8:	01000c04 	movi	r4,48
 5085bfc:	00000106 	br	5085c04 <_dtoa_r+0xf24>
 5085c00:	102d883a 	mov	r22,r2
 5085c04:	b0bfffc4 	addi	r2,r22,-1
 5085c08:	10c00007 	ldb	r3,0(r2)
 5085c0c:	193ffc26 	beq	r3,r4,5085c00 <_dtoa_r+0xf20>
 5085c10:	003f3206 	br	50858dc <_dtoa_r+0xbfc>
 5085c14:	d8c00f17 	ldw	r3,60(sp)
 5085c18:	18015026 	beq	r3,zero,508615c <_dtoa_r+0x147c>
 5085c1c:	10810cc4 	addi	r2,r2,1075
 5085c20:	dcc00a17 	ldw	r19,40(sp)
 5085c24:	dc800817 	ldw	r18,32(sp)
 5085c28:	003e9706 	br	5085688 <_dtoa_r+0x9a8>
 5085c2c:	b807883a 	mov	r3,r23
 5085c30:	182b883a 	mov	r21,r3
 5085c34:	ddc00717 	ldw	r23,28(sp)
 5085c38:	00800e0e 	bge	zero,r2,5085c74 <_dtoa_r+0xf94>
 5085c3c:	e00b883a 	mov	r5,fp
 5085c40:	01800044 	movi	r6,1
 5085c44:	8009883a 	mov	r4,r16
 5085c48:	d8c01515 	stw	r3,84(sp)
 5085c4c:	50887800 	call	5088780 <__lshift>
 5085c50:	1009883a 	mov	r4,r2
 5085c54:	a00b883a 	mov	r5,r20
 5085c58:	1039883a 	mov	fp,r2
 5085c5c:	50888dc0 	call	50888dc <__mcmp>
 5085c60:	d8c01517 	ldw	r3,84(sp)
 5085c64:	0081880e 	bge	zero,r2,5086288 <_dtoa_r+0x15a8>
 5085c68:	00800e44 	movi	r2,57
 5085c6c:	b0c00c44 	addi	r3,r22,49
 5085c70:	a8816326 	beq	r21,r2,5086200 <_dtoa_r+0x1520>
 5085c74:	90c00005 	stb	r3,0(r18)
 5085c78:	95800044 	addi	r22,r18,1
 5085c7c:	982b883a 	mov	r21,r19
 5085c80:	003f1606 	br	50858dc <_dtoa_r+0xbfc>
 5085c84:	300b883a 	mov	r5,r6
 5085c88:	e009883a 	mov	r4,fp
 5085c8c:	d9801515 	stw	r6,84(sp)
 5085c90:	50888dc0 	call	50888dc <__mcmp>
 5085c94:	d9801517 	ldw	r6,84(sp)
 5085c98:	8009883a 	mov	r4,r16
 5085c9c:	d8801515 	stw	r2,84(sp)
 5085ca0:	300b883a 	mov	r5,r6
 5085ca4:	50880e00 	call	50880e0 <_Bfree>
 5085ca8:	d8801517 	ldw	r2,84(sp)
 5085cac:	103f6d1e 	bne	r2,zero,5085a64 <_dtoa_r+0xd84>
 5085cb0:	d9c00417 	ldw	r7,16(sp)
 5085cb4:	383f6b1e 	bne	r7,zero,5085a64 <_dtoa_r+0xd84>
 5085cb8:	d8c00317 	ldw	r3,12(sp)
 5085cbc:	183f691e 	bne	r3,zero,5085a64 <_dtoa_r+0xd84>
 5085cc0:	b807883a 	mov	r3,r23
 5085cc4:	00800e44 	movi	r2,57
 5085cc8:	ddc00717 	ldw	r23,28(sp)
 5085ccc:	18814c26 	beq	r3,r2,5086200 <_dtoa_r+0x1520>
 5085cd0:	057fe80e 	bge	zero,r21,5085c74 <_dtoa_r+0xf94>
 5085cd4:	b0c00c44 	addi	r3,r22,49
 5085cd8:	003fe606 	br	5085c74 <_dtoa_r+0xf94>
 5085cdc:	880b883a 	mov	r5,r17
 5085ce0:	8009883a 	mov	r4,r16
 5085ce4:	01800284 	movi	r6,10
 5085ce8:	000f883a 	mov	r7,zero
 5085cec:	50881080 	call	5088108 <__multadd>
 5085cf0:	1023883a 	mov	r17,r2
 5085cf4:	1027883a 	mov	r19,r2
 5085cf8:	a825883a 	mov	r18,r21
 5085cfc:	003f4506 	br	5085a14 <_dtoa_r+0xd34>
 5085d00:	e009883a 	mov	r4,fp
 5085d04:	a00b883a 	mov	r5,r20
 5085d08:	50888dc0 	call	50888dc <__mcmp>
 5085d0c:	103ebc0e 	bge	r2,zero,5085800 <_dtoa_r+0xb20>
 5085d10:	e00b883a 	mov	r5,fp
 5085d14:	8009883a 	mov	r4,r16
 5085d18:	01800284 	movi	r6,10
 5085d1c:	000f883a 	mov	r7,zero
 5085d20:	50881080 	call	5088108 <__multadd>
 5085d24:	1039883a 	mov	fp,r2
 5085d28:	d8800617 	ldw	r2,24(sp)
 5085d2c:	d8c00c17 	ldw	r3,48(sp)
 5085d30:	10bfffc4 	addi	r2,r2,-1
 5085d34:	d8800615 	stw	r2,24(sp)
 5085d38:	1801571e 	bne	r3,zero,5086298 <_dtoa_r+0x15b8>
 5085d3c:	d9c00e17 	ldw	r7,56(sp)
 5085d40:	d9c00915 	stw	r7,36(sp)
 5085d44:	003eae06 	br	5085800 <_dtoa_r+0xb20>
 5085d48:	a0800417 	ldw	r2,16(r20)
 5085d4c:	10800104 	addi	r2,r2,4
 5085d50:	1085883a 	add	r2,r2,r2
 5085d54:	1085883a 	add	r2,r2,r2
 5085d58:	a085883a 	add	r2,r20,r2
 5085d5c:	11000017 	ldw	r4,0(r2)
 5085d60:	50883200 	call	5088320 <__hi0bits>
 5085d64:	00c00804 	movi	r3,32
 5085d68:	1885c83a 	sub	r2,r3,r2
 5085d6c:	003e8306 	br	508577c <_dtoa_r+0xa9c>
 5085d70:	d9c00417 	ldw	r7,16(sp)
 5085d74:	00800084 	movi	r2,2
 5085d78:	11fea30e 	bge	r2,r7,5085808 <_dtoa_r+0xb28>
 5085d7c:	d8800917 	ldw	r2,36(sp)
 5085d80:	103f8c1e 	bne	r2,zero,5085bb4 <_dtoa_r+0xed4>
 5085d84:	a00b883a 	mov	r5,r20
 5085d88:	8009883a 	mov	r4,r16
 5085d8c:	01800144 	movi	r6,5
 5085d90:	000f883a 	mov	r7,zero
 5085d94:	50881080 	call	5088108 <__multadd>
 5085d98:	e009883a 	mov	r4,fp
 5085d9c:	100b883a 	mov	r5,r2
 5085da0:	1029883a 	mov	r20,r2
 5085da4:	50888dc0 	call	50888dc <__mcmp>
 5085da8:	00bf820e 	bge	zero,r2,5085bb4 <_dtoa_r+0xed4>
 5085dac:	00800c44 	movi	r2,49
 5085db0:	b8800005 	stb	r2,0(r23)
 5085db4:	d8800617 	ldw	r2,24(sp)
 5085db8:	bd800044 	addi	r22,r23,1
 5085dbc:	10800044 	addi	r2,r2,1
 5085dc0:	d8800615 	stw	r2,24(sp)
 5085dc4:	003f7f06 	br	5085bc4 <_dtoa_r+0xee4>
 5085dc8:	dc000417 	ldw	r16,16(sp)
 5085dcc:	003d6506 	br	5085364 <_dtoa_r+0x684>
 5085dd0:	9009883a 	mov	r4,r18
 5085dd4:	508b2d80 	call	508b2d8 <__floatsidf>
 5085dd8:	1009883a 	mov	r4,r2
 5085ddc:	180b883a 	mov	r5,r3
 5085de0:	980d883a 	mov	r6,r19
 5085de4:	a00f883a 	mov	r7,r20
 5085de8:	508ac640 	call	508ac64 <__muldf3>
 5085dec:	1009883a 	mov	r4,r2
 5085df0:	180b883a 	mov	r5,r3
 5085df4:	000d883a 	mov	r6,zero
 5085df8:	01d00734 	movhi	r7,16412
 5085dfc:	508abb00 	call	508abb0 <__adddf3>
 5085e00:	057f3034 	movhi	r21,64704
 5085e04:	1025883a 	mov	r18,r2
 5085e08:	1d6b883a 	add	r21,r3,r21
 5085e0c:	9809883a 	mov	r4,r19
 5085e10:	a00b883a 	mov	r5,r20
 5085e14:	000d883a 	mov	r6,zero
 5085e18:	01d00534 	movhi	r7,16404
 5085e1c:	508ac040 	call	508ac04 <__subdf3>
 5085e20:	1009883a 	mov	r4,r2
 5085e24:	180b883a 	mov	r5,r3
 5085e28:	900d883a 	mov	r6,r18
 5085e2c:	a80f883a 	mov	r7,r21
 5085e30:	1027883a 	mov	r19,r2
 5085e34:	1829883a 	mov	r20,r3
 5085e38:	508b1b40 	call	508b1b4 <__gtdf2>
 5085e3c:	00806616 	blt	zero,r2,5085fd8 <_dtoa_r+0x12f8>
 5085e40:	a9e0003c 	xorhi	r7,r21,32768
 5085e44:	9809883a 	mov	r4,r19
 5085e48:	a00b883a 	mov	r5,r20
 5085e4c:	900d883a 	mov	r6,r18
 5085e50:	508b27c0 	call	508b27c <__ltdf2>
 5085e54:	103d710e 	bge	r2,zero,508541c <_dtoa_r+0x73c>
 5085e58:	0029883a 	mov	r20,zero
 5085e5c:	002b883a 	mov	r21,zero
 5085e60:	003f5406 	br	5085bb4 <_dtoa_r+0xed4>
 5085e64:	d9800a17 	ldw	r6,40(sp)
 5085e68:	e00b883a 	mov	r5,fp
 5085e6c:	8009883a 	mov	r4,r16
 5085e70:	50886540 	call	5088654 <__pow5mult>
 5085e74:	1039883a 	mov	fp,r2
 5085e78:	003e2e06 	br	5085734 <_dtoa_r+0xa54>
 5085e7c:	d8000c15 	stw	zero,48(sp)
 5085e80:	003f2006 	br	5085b04 <_dtoa_r+0xe24>
 5085e84:	00800044 	movi	r2,1
 5085e88:	d8800c15 	stw	r2,48(sp)
 5085e8c:	003c5d06 	br	5085004 <_dtoa_r+0x324>
 5085e90:	d8c00a17 	ldw	r3,40(sp)
 5085e94:	d9000b17 	ldw	r4,44(sp)
 5085e98:	dcc00a15 	stw	r19,40(sp)
 5085e9c:	98c5c83a 	sub	r2,r19,r3
 5085ea0:	2089883a 	add	r4,r4,r2
 5085ea4:	d9000b15 	stw	r4,44(sp)
 5085ea8:	0027883a 	mov	r19,zero
 5085eac:	003df206 	br	5085678 <_dtoa_r+0x998>
 5085eb0:	d9000317 	ldw	r4,12(sp)
 5085eb4:	8829883a 	mov	r20,r17
 5085eb8:	04800084 	movi	r18,2
 5085ebc:	d9001015 	stw	r4,64(sp)
 5085ec0:	003c8106 	br	50850c8 <_dtoa_r+0x3e8>
 5085ec4:	04800044 	movi	r18,1
 5085ec8:	dc800e15 	stw	r18,56(sp)
 5085ecc:	dc800915 	stw	r18,36(sp)
 5085ed0:	dc802115 	stw	r18,132(sp)
 5085ed4:	003f1206 	br	5085b20 <_dtoa_r+0xe40>
 5085ed8:	d8800617 	ldw	r2,24(sp)
 5085edc:	00abc83a 	sub	r21,zero,r2
 5085ee0:	a800a426 	beq	r21,zero,5086174 <_dtoa_r+0x1494>
 5085ee4:	a88003cc 	andi	r2,r21,15
 5085ee8:	100490fa 	slli	r2,r2,3
 5085eec:	00c14274 	movhi	r3,1289
 5085ef0:	18fc7b04 	addi	r3,r3,-3604
 5085ef4:	d9000317 	ldw	r4,12(sp)
 5085ef8:	1885883a 	add	r2,r3,r2
 5085efc:	11800017 	ldw	r6,0(r2)
 5085f00:	11c00117 	ldw	r7,4(r2)
 5085f04:	a82bd13a 	srai	r21,r21,4
 5085f08:	880b883a 	mov	r5,r17
 5085f0c:	508ac640 	call	508ac64 <__muldf3>
 5085f10:	1027883a 	mov	r19,r2
 5085f14:	1829883a 	mov	r20,r3
 5085f18:	a800e826 	beq	r21,zero,50862bc <_dtoa_r+0x15dc>
 5085f1c:	05814274 	movhi	r22,1289
 5085f20:	b5bc7104 	addi	r22,r22,-3644
 5085f24:	04800084 	movi	r18,2
 5085f28:	a980004c 	andi	r6,r21,1
 5085f2c:	1009883a 	mov	r4,r2
 5085f30:	a82bd07a 	srai	r21,r21,1
 5085f34:	180b883a 	mov	r5,r3
 5085f38:	30000426 	beq	r6,zero,5085f4c <_dtoa_r+0x126c>
 5085f3c:	b1800017 	ldw	r6,0(r22)
 5085f40:	b1c00117 	ldw	r7,4(r22)
 5085f44:	94800044 	addi	r18,r18,1
 5085f48:	508ac640 	call	508ac64 <__muldf3>
 5085f4c:	b5800204 	addi	r22,r22,8
 5085f50:	a83ff51e 	bne	r21,zero,5085f28 <_dtoa_r+0x1248>
 5085f54:	1027883a 	mov	r19,r2
 5085f58:	1829883a 	mov	r20,r3
 5085f5c:	003c7306 	br	508512c <_dtoa_r+0x44c>
 5085f60:	21000044 	addi	r4,r4,1
 5085f64:	11000005 	stb	r4,0(r2)
 5085f68:	003e5c06 	br	50858dc <_dtoa_r+0xbfc>
 5085f6c:	a9400117 	ldw	r5,4(r21)
 5085f70:	8009883a 	mov	r4,r16
 5085f74:	50880380 	call	5088038 <_Balloc>
 5085f78:	a9800417 	ldw	r6,16(r21)
 5085f7c:	11000304 	addi	r4,r2,12
 5085f80:	a9400304 	addi	r5,r21,12
 5085f84:	31800084 	addi	r6,r6,2
 5085f88:	318d883a 	add	r6,r6,r6
 5085f8c:	318d883a 	add	r6,r6,r6
 5085f90:	1023883a 	mov	r17,r2
 5085f94:	5087d3c0 	call	5087d3c <memcpy>
 5085f98:	8009883a 	mov	r4,r16
 5085f9c:	880b883a 	mov	r5,r17
 5085fa0:	01800044 	movi	r6,1
 5085fa4:	50887800 	call	5088780 <__lshift>
 5085fa8:	1027883a 	mov	r19,r2
 5085fac:	003e8f06 	br	50859ec <_dtoa_r+0xd0c>
 5085fb0:	b807883a 	mov	r3,r23
 5085fb4:	00800e44 	movi	r2,57
 5085fb8:	ddc00717 	ldw	r23,28(sp)
 5085fbc:	18809026 	beq	r3,r2,5086200 <_dtoa_r+0x1520>
 5085fc0:	18c00044 	addi	r3,r3,1
 5085fc4:	003f2b06 	br	5085c74 <_dtoa_r+0xf94>
 5085fc8:	b807883a 	mov	r3,r23
 5085fcc:	982b883a 	mov	r21,r19
 5085fd0:	ddc00717 	ldw	r23,28(sp)
 5085fd4:	003e2406 	br	5085868 <_dtoa_r+0xb88>
 5085fd8:	0029883a 	mov	r20,zero
 5085fdc:	002b883a 	mov	r21,zero
 5085fe0:	003f7206 	br	5085dac <_dtoa_r+0x10cc>
 5085fe4:	593fffc4 	addi	r4,r11,-1
 5085fe8:	200490fa 	slli	r2,r4,3
 5085fec:	00c14274 	movhi	r3,1289
 5085ff0:	18fc7b04 	addi	r3,r3,-3604
 5085ff4:	d9001015 	stw	r4,64(sp)
 5085ff8:	1885883a 	add	r2,r3,r2
 5085ffc:	11000017 	ldw	r4,0(r2)
 5086000:	11400117 	ldw	r5,4(r2)
 5086004:	900d883a 	mov	r6,r18
 5086008:	a80f883a 	mov	r7,r21
 508600c:	dac01615 	stw	r11,88(sp)
 5086010:	508ac640 	call	508ac64 <__muldf3>
 5086014:	a00b883a 	mov	r5,r20
 5086018:	9809883a 	mov	r4,r19
 508601c:	d8c01215 	stw	r3,72(sp)
 5086020:	d8801115 	stw	r2,68(sp)
 5086024:	508b3ac0 	call	508b3ac <__fixdfsi>
 5086028:	1009883a 	mov	r4,r2
 508602c:	1025883a 	mov	r18,r2
 5086030:	508b2d80 	call	508b2d8 <__floatsidf>
 5086034:	9809883a 	mov	r4,r19
 5086038:	a00b883a 	mov	r5,r20
 508603c:	100d883a 	mov	r6,r2
 5086040:	180f883a 	mov	r7,r3
 5086044:	94800c04 	addi	r18,r18,48
 5086048:	508ac040 	call	508ac04 <__subdf3>
 508604c:	bc800005 	stb	r18,0(r23)
 5086050:	dac01617 	ldw	r11,88(sp)
 5086054:	102b883a 	mov	r21,r2
 5086058:	00800044 	movi	r2,1
 508605c:	bd800044 	addi	r22,r23,1
 5086060:	1815883a 	mov	r10,r3
 5086064:	58802226 	beq	r11,r2,50860f0 <_dtoa_r+0x1410>
 5086068:	bad7883a 	add	r11,r23,r11
 508606c:	dc001415 	stw	r16,80(sp)
 5086070:	a805883a 	mov	r2,r21
 5086074:	b027883a 	mov	r19,r22
 5086078:	5821883a 	mov	r16,r11
 508607c:	882b883a 	mov	r21,r17
 5086080:	000d883a 	mov	r6,zero
 5086084:	01d00934 	movhi	r7,16420
 5086088:	1009883a 	mov	r4,r2
 508608c:	180b883a 	mov	r5,r3
 5086090:	508ac640 	call	508ac64 <__muldf3>
 5086094:	180b883a 	mov	r5,r3
 5086098:	1009883a 	mov	r4,r2
 508609c:	1829883a 	mov	r20,r3
 50860a0:	1023883a 	mov	r17,r2
 50860a4:	508b3ac0 	call	508b3ac <__fixdfsi>
 50860a8:	1009883a 	mov	r4,r2
 50860ac:	1025883a 	mov	r18,r2
 50860b0:	508b2d80 	call	508b2d8 <__floatsidf>
 50860b4:	8809883a 	mov	r4,r17
 50860b8:	a00b883a 	mov	r5,r20
 50860bc:	100d883a 	mov	r6,r2
 50860c0:	180f883a 	mov	r7,r3
 50860c4:	94800c04 	addi	r18,r18,48
 50860c8:	508ac040 	call	508ac04 <__subdf3>
 50860cc:	9cc00044 	addi	r19,r19,1
 50860d0:	9cbfffc5 	stb	r18,-1(r19)
 50860d4:	9c3fea1e 	bne	r19,r16,5086080 <_dtoa_r+0x13a0>
 50860d8:	1815883a 	mov	r10,r3
 50860dc:	d8c01017 	ldw	r3,64(sp)
 50860e0:	dc001417 	ldw	r16,80(sp)
 50860e4:	a823883a 	mov	r17,r21
 50860e8:	b0ed883a 	add	r22,r22,r3
 50860ec:	102b883a 	mov	r21,r2
 50860f0:	d9001117 	ldw	r4,68(sp)
 50860f4:	d9401217 	ldw	r5,72(sp)
 50860f8:	000d883a 	mov	r6,zero
 50860fc:	01cff834 	movhi	r7,16352
 5086100:	da801515 	stw	r10,84(sp)
 5086104:	508abb00 	call	508abb0 <__adddf3>
 5086108:	da801517 	ldw	r10,84(sp)
 508610c:	1009883a 	mov	r4,r2
 5086110:	180b883a 	mov	r5,r3
 5086114:	500f883a 	mov	r7,r10
 5086118:	a80d883a 	mov	r6,r21
 508611c:	508b27c0 	call	508b27c <__ltdf2>
 5086120:	da801517 	ldw	r10,84(sp)
 5086124:	10003b0e 	bge	r2,zero,5086214 <_dtoa_r+0x1534>
 5086128:	d9c01317 	ldw	r7,76(sp)
 508612c:	b53fffc3 	ldbu	r20,-1(r22)
 5086130:	d9c00615 	stw	r7,24(sp)
 5086134:	003d3106 	br	50855fc <_dtoa_r+0x91c>
 5086138:	d8800817 	ldw	r2,32(sp)
 508613c:	11e5c83a 	sub	r18,r2,r7
 5086140:	0005883a 	mov	r2,zero
 5086144:	003d5006 	br	5085688 <_dtoa_r+0x9a8>
 5086148:	05800044 	movi	r22,1
 508614c:	003dc406 	br	5085860 <_dtoa_r+0xb80>
 5086150:	a5000044 	addi	r20,r20,1
 5086154:	15000005 	stb	r20,0(r2)
 5086158:	003c8206 	br	5085364 <_dtoa_r+0x684>
 508615c:	d8800217 	ldw	r2,8(sp)
 5086160:	00c00d84 	movi	r3,54
 5086164:	dcc00a17 	ldw	r19,40(sp)
 5086168:	1885c83a 	sub	r2,r3,r2
 508616c:	dc800817 	ldw	r18,32(sp)
 5086170:	003d4506 	br	5085688 <_dtoa_r+0x9a8>
 5086174:	dcc00317 	ldw	r19,12(sp)
 5086178:	8829883a 	mov	r20,r17
 508617c:	04800084 	movi	r18,2
 5086180:	003bea06 	br	508512c <_dtoa_r+0x44c>
 5086184:	d9000917 	ldw	r4,36(sp)
 5086188:	203f1126 	beq	r4,zero,5085dd0 <_dtoa_r+0x10f0>
 508618c:	d9c00e17 	ldw	r7,56(sp)
 5086190:	01fca20e 	bge	zero,r7,508541c <_dtoa_r+0x73c>
 5086194:	a00b883a 	mov	r5,r20
 5086198:	9809883a 	mov	r4,r19
 508619c:	000d883a 	mov	r6,zero
 50861a0:	01d00934 	movhi	r7,16420
 50861a4:	508ac640 	call	508ac64 <__muldf3>
 50861a8:	91000044 	addi	r4,r18,1
 50861ac:	1027883a 	mov	r19,r2
 50861b0:	1829883a 	mov	r20,r3
 50861b4:	508b2d80 	call	508b2d8 <__floatsidf>
 50861b8:	9809883a 	mov	r4,r19
 50861bc:	a00b883a 	mov	r5,r20
 50861c0:	100d883a 	mov	r6,r2
 50861c4:	180f883a 	mov	r7,r3
 50861c8:	508ac640 	call	508ac64 <__muldf3>
 50861cc:	1009883a 	mov	r4,r2
 50861d0:	180b883a 	mov	r5,r3
 50861d4:	000d883a 	mov	r6,zero
 50861d8:	01d00734 	movhi	r7,16412
 50861dc:	508abb00 	call	508abb0 <__adddf3>
 50861e0:	1025883a 	mov	r18,r2
 50861e4:	d8800617 	ldw	r2,24(sp)
 50861e8:	057f3034 	movhi	r21,64704
 50861ec:	1d6b883a 	add	r21,r3,r21
 50861f0:	10bfffc4 	addi	r2,r2,-1
 50861f4:	d8801315 	stw	r2,76(sp)
 50861f8:	dac00e17 	ldw	r11,56(sp)
 50861fc:	003be706 	br	508519c <_dtoa_r+0x4bc>
 5086200:	01000e44 	movi	r4,57
 5086204:	91000005 	stb	r4,0(r18)
 5086208:	95800044 	addi	r22,r18,1
 508620c:	982b883a 	mov	r21,r19
 5086210:	003da106 	br	5085898 <_dtoa_r+0xbb8>
 5086214:	d9801117 	ldw	r6,68(sp)
 5086218:	d9c01217 	ldw	r7,72(sp)
 508621c:	0009883a 	mov	r4,zero
 5086220:	014ff834 	movhi	r5,16352
 5086224:	da801515 	stw	r10,84(sp)
 5086228:	508ac040 	call	508ac04 <__subdf3>
 508622c:	da801517 	ldw	r10,84(sp)
 5086230:	1009883a 	mov	r4,r2
 5086234:	180b883a 	mov	r5,r3
 5086238:	a80d883a 	mov	r6,r21
 508623c:	500f883a 	mov	r7,r10
 5086240:	508b1b40 	call	508b1b4 <__gtdf2>
 5086244:	00bc750e 	bge	zero,r2,508541c <_dtoa_r+0x73c>
 5086248:	01000c04 	movi	r4,48
 508624c:	00000106 	br	5086254 <_dtoa_r+0x1574>
 5086250:	102d883a 	mov	r22,r2
 5086254:	b0bfffc4 	addi	r2,r22,-1
 5086258:	10c00007 	ldb	r3,0(r2)
 508625c:	193ffc26 	beq	r3,r4,5086250 <_dtoa_r+0x1570>
 5086260:	d8801317 	ldw	r2,76(sp)
 5086264:	d8800615 	stw	r2,24(sp)
 5086268:	003c3e06 	br	5085364 <_dtoa_r+0x684>
 508626c:	d9001317 	ldw	r4,76(sp)
 5086270:	df001117 	ldw	fp,68(sp)
 5086274:	d9000615 	stw	r4,24(sp)
 5086278:	003ce006 	br	50855fc <_dtoa_r+0x91c>
 508627c:	df001117 	ldw	fp,68(sp)
 5086280:	dc401217 	ldw	r17,72(sp)
 5086284:	003c6506 	br	508541c <_dtoa_r+0x73c>
 5086288:	103e7a1e 	bne	r2,zero,5085c74 <_dtoa_r+0xf94>
 508628c:	1880004c 	andi	r2,r3,1
 5086290:	103e7826 	beq	r2,zero,5085c74 <_dtoa_r+0xf94>
 5086294:	003e7406 	br	5085c68 <_dtoa_r+0xf88>
 5086298:	8009883a 	mov	r4,r16
 508629c:	a80b883a 	mov	r5,r21
 50862a0:	01800284 	movi	r6,10
 50862a4:	000f883a 	mov	r7,zero
 50862a8:	50881080 	call	5088108 <__multadd>
 50862ac:	d9000e17 	ldw	r4,56(sp)
 50862b0:	102b883a 	mov	r21,r2
 50862b4:	d9000915 	stw	r4,36(sp)
 50862b8:	003d5106 	br	5085800 <_dtoa_r+0xb20>
 50862bc:	04800084 	movi	r18,2
 50862c0:	003b9a06 	br	508512c <_dtoa_r+0x44c>
 50862c4:	d8c01317 	ldw	r3,76(sp)
 50862c8:	d8c00615 	stw	r3,24(sp)
 50862cc:	003ccb06 	br	50855fc <_dtoa_r+0x91c>
 50862d0:	d8c01317 	ldw	r3,76(sp)
 50862d4:	d8c00615 	stw	r3,24(sp)
 50862d8:	003c2206 	br	5085364 <_dtoa_r+0x684>
 50862dc:	20fd3826 	beq	r4,r3,50857c0 <_dtoa_r+0xae0>
 50862e0:	00c00f04 	movi	r3,60
 50862e4:	1885c83a 	sub	r2,r3,r2
 50862e8:	003da906 	br	5085990 <_dtoa_r+0xcb0>
 50862ec:	000b883a 	mov	r5,zero
 50862f0:	003b5406 	br	5085044 <_dtoa_r+0x364>
 50862f4:	04c00044 	movi	r19,1
 50862f8:	003b3b06 	br	5084fe8 <_dtoa_r+0x308>

050862fc <_fflush_r>:
 50862fc:	defffb04 	addi	sp,sp,-20
 5086300:	dcc00315 	stw	r19,12(sp)
 5086304:	dc400115 	stw	r17,4(sp)
 5086308:	dfc00415 	stw	ra,16(sp)
 508630c:	dc800215 	stw	r18,8(sp)
 5086310:	dc000015 	stw	r16,0(sp)
 5086314:	2027883a 	mov	r19,r4
 5086318:	2823883a 	mov	r17,r5
 508631c:	20000226 	beq	r4,zero,5086328 <_fflush_r+0x2c>
 5086320:	20800e17 	ldw	r2,56(r4)
 5086324:	10005726 	beq	r2,zero,5086484 <_fflush_r+0x188>
 5086328:	8880030b 	ldhu	r2,12(r17)
 508632c:	10c0020c 	andi	r3,r2,8
 5086330:	18ffffcc 	andi	r3,r3,65535
 5086334:	18e0001c 	xori	r3,r3,32768
 5086338:	18e00004 	addi	r3,r3,-32768
 508633c:	1800311e 	bne	r3,zero,5086404 <_fflush_r+0x108>
 5086340:	89000117 	ldw	r4,4(r17)
 5086344:	10c20014 	ori	r3,r2,2048
 5086348:	88c0030d 	sth	r3,12(r17)
 508634c:	180b883a 	mov	r5,r3
 5086350:	0100520e 	bge	zero,r4,508649c <_fflush_r+0x1a0>
 5086354:	88c00a17 	ldw	r3,40(r17)
 5086358:	18002226 	beq	r3,zero,50863e4 <_fflush_r+0xe8>
 508635c:	1084000c 	andi	r2,r2,4096
 5086360:	10bfffcc 	andi	r2,r2,65535
 5086364:	10a0001c 	xori	r2,r2,32768
 5086368:	10a00004 	addi	r2,r2,-32768
 508636c:	10004e26 	beq	r2,zero,50864a8 <_fflush_r+0x1ac>
 5086370:	8c001417 	ldw	r16,80(r17)
 5086374:	2940010c 	andi	r5,r5,4
 5086378:	297fffcc 	andi	r5,r5,65535
 508637c:	2960001c 	xori	r5,r5,32768
 5086380:	29600004 	addi	r5,r5,-32768
 5086384:	28000626 	beq	r5,zero,50863a0 <_fflush_r+0xa4>
 5086388:	89000117 	ldw	r4,4(r17)
 508638c:	88800c17 	ldw	r2,48(r17)
 5086390:	8121c83a 	sub	r16,r16,r4
 5086394:	10000226 	beq	r2,zero,50863a0 <_fflush_r+0xa4>
 5086398:	88800f17 	ldw	r2,60(r17)
 508639c:	80a1c83a 	sub	r16,r16,r2
 50863a0:	89400717 	ldw	r5,28(r17)
 50863a4:	9809883a 	mov	r4,r19
 50863a8:	800d883a 	mov	r6,r16
 50863ac:	000f883a 	mov	r7,zero
 50863b0:	183ee83a 	callr	r3
 50863b4:	8080281e 	bne	r16,r2,5086458 <_fflush_r+0x15c>
 50863b8:	8880030b 	ldhu	r2,12(r17)
 50863bc:	88c00417 	ldw	r3,16(r17)
 50863c0:	88000115 	stw	zero,4(r17)
 50863c4:	113dffcc 	andi	r4,r2,63487
 50863c8:	1084000c 	andi	r2,r2,4096
 50863cc:	10bfffcc 	andi	r2,r2,65535
 50863d0:	10a0001c 	xori	r2,r2,32768
 50863d4:	8900030d 	sth	r4,12(r17)
 50863d8:	88c00015 	stw	r3,0(r17)
 50863dc:	10a00004 	addi	r2,r2,-32768
 50863e0:	10002c1e 	bne	r2,zero,5086494 <_fflush_r+0x198>
 50863e4:	0005883a 	mov	r2,zero
 50863e8:	dfc00417 	ldw	ra,16(sp)
 50863ec:	dcc00317 	ldw	r19,12(sp)
 50863f0:	dc800217 	ldw	r18,8(sp)
 50863f4:	dc400117 	ldw	r17,4(sp)
 50863f8:	dc000017 	ldw	r16,0(sp)
 50863fc:	dec00504 	addi	sp,sp,20
 5086400:	f800283a 	ret
 5086404:	8c800417 	ldw	r18,16(r17)
 5086408:	903ff626 	beq	r18,zero,50863e4 <_fflush_r+0xe8>
 508640c:	8c000017 	ldw	r16,0(r17)
 5086410:	108000cc 	andi	r2,r2,3
 5086414:	8c800015 	stw	r18,0(r17)
 5086418:	84a1c83a 	sub	r16,r16,r18
 508641c:	10001b1e 	bne	r2,zero,508648c <_fflush_r+0x190>
 5086420:	88800517 	ldw	r2,20(r17)
 5086424:	88800215 	stw	r2,8(r17)
 5086428:	04000316 	blt	zero,r16,5086438 <_fflush_r+0x13c>
 508642c:	003fed06 	br	50863e4 <_fflush_r+0xe8>
 5086430:	90a5883a 	add	r18,r18,r2
 5086434:	043feb0e 	bge	zero,r16,50863e4 <_fflush_r+0xe8>
 5086438:	88800917 	ldw	r2,36(r17)
 508643c:	89400717 	ldw	r5,28(r17)
 5086440:	800f883a 	mov	r7,r16
 5086444:	900d883a 	mov	r6,r18
 5086448:	9809883a 	mov	r4,r19
 508644c:	103ee83a 	callr	r2
 5086450:	80a1c83a 	sub	r16,r16,r2
 5086454:	00bff616 	blt	zero,r2,5086430 <_fflush_r+0x134>
 5086458:	88c0030b 	ldhu	r3,12(r17)
 508645c:	00bfffc4 	movi	r2,-1
 5086460:	18c01014 	ori	r3,r3,64
 5086464:	88c0030d 	sth	r3,12(r17)
 5086468:	dfc00417 	ldw	ra,16(sp)
 508646c:	dcc00317 	ldw	r19,12(sp)
 5086470:	dc800217 	ldw	r18,8(sp)
 5086474:	dc400117 	ldw	r17,4(sp)
 5086478:	dc000017 	ldw	r16,0(sp)
 508647c:	dec00504 	addi	sp,sp,20
 5086480:	f800283a 	ret
 5086484:	50865a40 	call	50865a4 <__sinit>
 5086488:	003fa706 	br	5086328 <_fflush_r+0x2c>
 508648c:	0005883a 	mov	r2,zero
 5086490:	003fe406 	br	5086424 <_fflush_r+0x128>
 5086494:	8c001415 	stw	r16,80(r17)
 5086498:	003fd206 	br	50863e4 <_fflush_r+0xe8>
 508649c:	88c00f17 	ldw	r3,60(r17)
 50864a0:	00ffac16 	blt	zero,r3,5086354 <_fflush_r+0x58>
 50864a4:	003fcf06 	br	50863e4 <_fflush_r+0xe8>
 50864a8:	89400717 	ldw	r5,28(r17)
 50864ac:	9809883a 	mov	r4,r19
 50864b0:	000d883a 	mov	r6,zero
 50864b4:	01c00044 	movi	r7,1
 50864b8:	183ee83a 	callr	r3
 50864bc:	1021883a 	mov	r16,r2
 50864c0:	00bfffc4 	movi	r2,-1
 50864c4:	80800326 	beq	r16,r2,50864d4 <_fflush_r+0x1d8>
 50864c8:	8940030b 	ldhu	r5,12(r17)
 50864cc:	88c00a17 	ldw	r3,40(r17)
 50864d0:	003fa806 	br	5086374 <_fflush_r+0x78>
 50864d4:	98c00017 	ldw	r3,0(r19)
 50864d8:	00800744 	movi	r2,29
 50864dc:	18bfde1e 	bne	r3,r2,5086458 <_fflush_r+0x15c>
 50864e0:	003fc006 	br	50863e4 <_fflush_r+0xe8>

050864e4 <fflush>:
 50864e4:	200b883a 	mov	r5,r4
 50864e8:	20000426 	beq	r4,zero,50864fc <fflush+0x18>
 50864ec:	00814274 	movhi	r2,1289
 50864f0:	10838c04 	addi	r2,r2,3632
 50864f4:	11000017 	ldw	r4,0(r2)
 50864f8:	50862fc1 	jmpi	50862fc <_fflush_r>
 50864fc:	00814274 	movhi	r2,1289
 5086500:	10838b04 	addi	r2,r2,3628
 5086504:	11000017 	ldw	r4,0(r2)
 5086508:	01414234 	movhi	r5,1288
 508650c:	2958bf04 	addi	r5,r5,25340
 5086510:	50871841 	jmpi	5087184 <_fwalk_reent>

05086514 <__fp_lock>:
 5086514:	0005883a 	mov	r2,zero
 5086518:	f800283a 	ret

0508651c <__fp_unlock>:
 508651c:	0005883a 	mov	r2,zero
 5086520:	f800283a 	ret

05086524 <_cleanup_r>:
 5086524:	01414274 	movhi	r5,1289
 5086528:	2966d404 	addi	r5,r5,-25776
 508652c:	50870dc1 	jmpi	50870dc <_fwalk>

05086530 <__sfmoreglue>:
 5086530:	defffc04 	addi	sp,sp,-16
 5086534:	dc400115 	stw	r17,4(sp)
 5086538:	2c401724 	muli	r17,r5,92
 508653c:	dc800215 	stw	r18,8(sp)
 5086540:	2825883a 	mov	r18,r5
 5086544:	89400304 	addi	r5,r17,12
 5086548:	dc000015 	stw	r16,0(sp)
 508654c:	dfc00315 	stw	ra,12(sp)
 5086550:	50874c00 	call	50874c0 <_malloc_r>
 5086554:	1021883a 	mov	r16,r2
 5086558:	10000726 	beq	r2,zero,5086578 <__sfmoreglue+0x48>
 508655c:	11000304 	addi	r4,r2,12
 5086560:	10000015 	stw	zero,0(r2)
 5086564:	14800115 	stw	r18,4(r2)
 5086568:	11000215 	stw	r4,8(r2)
 508656c:	000b883a 	mov	r5,zero
 5086570:	880d883a 	mov	r6,r17
 5086574:	5087f5c0 	call	5087f5c <memset>
 5086578:	8005883a 	mov	r2,r16
 508657c:	dfc00317 	ldw	ra,12(sp)
 5086580:	dc800217 	ldw	r18,8(sp)
 5086584:	dc400117 	ldw	r17,4(sp)
 5086588:	dc000017 	ldw	r16,0(sp)
 508658c:	dec00404 	addi	sp,sp,16
 5086590:	f800283a 	ret

05086594 <_cleanup>:
 5086594:	00814274 	movhi	r2,1289
 5086598:	10838b04 	addi	r2,r2,3628
 508659c:	11000017 	ldw	r4,0(r2)
 50865a0:	50865241 	jmpi	5086524 <_cleanup_r>

050865a4 <__sinit>:
 50865a4:	20800e17 	ldw	r2,56(r4)
 50865a8:	1000401e 	bne	r2,zero,50866ac <__sinit+0x108>
 50865ac:	21400117 	ldw	r5,4(r4)
 50865b0:	01814234 	movhi	r6,1288
 50865b4:	31994904 	addi	r6,r6,25892
 50865b8:	20c00217 	ldw	r3,8(r4)
 50865bc:	21800f15 	stw	r6,60(r4)
 50865c0:	2080bb04 	addi	r2,r4,748
 50865c4:	02400044 	movi	r9,1
 50865c8:	018000c4 	movi	r6,3
 50865cc:	2180b915 	stw	r6,740(r4)
 50865d0:	2080ba15 	stw	r2,744(r4)
 50865d4:	22400e15 	stw	r9,56(r4)
 50865d8:	20800317 	ldw	r2,12(r4)
 50865dc:	2000b815 	stw	zero,736(r4)
 50865e0:	02014274 	movhi	r8,1289
 50865e4:	4225a904 	addi	r8,r8,-26972
 50865e8:	01c14274 	movhi	r7,1289
 50865ec:	39e5be04 	addi	r7,r7,-26888
 50865f0:	01814274 	movhi	r6,1289
 50865f4:	31a5e004 	addi	r6,r6,-26752
 50865f8:	01014274 	movhi	r4,1289
 50865fc:	2125f704 	addi	r4,r4,-26660
 5086600:	02800104 	movi	r10,4
 5086604:	28000015 	stw	zero,0(r5)
 5086608:	28000115 	stw	zero,4(r5)
 508660c:	28000215 	stw	zero,8(r5)
 5086610:	2a80030d 	sth	r10,12(r5)
 5086614:	2800038d 	sth	zero,14(r5)
 5086618:	28000415 	stw	zero,16(r5)
 508661c:	28000515 	stw	zero,20(r5)
 5086620:	28000615 	stw	zero,24(r5)
 5086624:	29400715 	stw	r5,28(r5)
 5086628:	2a000815 	stw	r8,32(r5)
 508662c:	29c00915 	stw	r7,36(r5)
 5086630:	29800a15 	stw	r6,40(r5)
 5086634:	29000b15 	stw	r4,44(r5)
 5086638:	01400284 	movi	r5,10
 508663c:	18000015 	stw	zero,0(r3)
 5086640:	18000115 	stw	zero,4(r3)
 5086644:	18000215 	stw	zero,8(r3)
 5086648:	1940030d 	sth	r5,12(r3)
 508664c:	1a40038d 	sth	r9,14(r3)
 5086650:	18000415 	stw	zero,16(r3)
 5086654:	18000515 	stw	zero,20(r3)
 5086658:	18000615 	stw	zero,24(r3)
 508665c:	18c00715 	stw	r3,28(r3)
 5086660:	1a000815 	stw	r8,32(r3)
 5086664:	19c00915 	stw	r7,36(r3)
 5086668:	19800a15 	stw	r6,40(r3)
 508666c:	19000b15 	stw	r4,44(r3)
 5086670:	00c00484 	movi	r3,18
 5086674:	10c0030d 	sth	r3,12(r2)
 5086678:	00c00084 	movi	r3,2
 508667c:	10000015 	stw	zero,0(r2)
 5086680:	10000115 	stw	zero,4(r2)
 5086684:	10000215 	stw	zero,8(r2)
 5086688:	10c0038d 	sth	r3,14(r2)
 508668c:	10000415 	stw	zero,16(r2)
 5086690:	10000515 	stw	zero,20(r2)
 5086694:	10000615 	stw	zero,24(r2)
 5086698:	10800715 	stw	r2,28(r2)
 508669c:	12000815 	stw	r8,32(r2)
 50866a0:	11c00915 	stw	r7,36(r2)
 50866a4:	11800a15 	stw	r6,40(r2)
 50866a8:	11000b15 	stw	r4,44(r2)
 50866ac:	f800283a 	ret

050866b0 <__sfp>:
 50866b0:	defffc04 	addi	sp,sp,-16
 50866b4:	00814274 	movhi	r2,1289
 50866b8:	10838b04 	addi	r2,r2,3628
 50866bc:	dc400115 	stw	r17,4(sp)
 50866c0:	14400017 	ldw	r17,0(r2)
 50866c4:	dc800215 	stw	r18,8(sp)
 50866c8:	dfc00315 	stw	ra,12(sp)
 50866cc:	88800e17 	ldw	r2,56(r17)
 50866d0:	dc000015 	stw	r16,0(sp)
 50866d4:	2025883a 	mov	r18,r4
 50866d8:	10002826 	beq	r2,zero,508677c <__sfp+0xcc>
 50866dc:	8c40b804 	addi	r17,r17,736
 50866e0:	043fffc4 	movi	r16,-1
 50866e4:	89400117 	ldw	r5,4(r17)
 50866e8:	88800217 	ldw	r2,8(r17)
 50866ec:	297fffc4 	addi	r5,r5,-1
 50866f0:	28000a16 	blt	r5,zero,508671c <__sfp+0x6c>
 50866f4:	10c0030f 	ldh	r3,12(r2)
 50866f8:	18000c26 	beq	r3,zero,508672c <__sfp+0x7c>
 50866fc:	10c01a04 	addi	r3,r2,104
 5086700:	00000206 	br	508670c <__sfp+0x5c>
 5086704:	19bfe90f 	ldh	r6,-92(r3)
 5086708:	30000826 	beq	r6,zero,508672c <__sfp+0x7c>
 508670c:	297fffc4 	addi	r5,r5,-1
 5086710:	18bffd04 	addi	r2,r3,-12
 5086714:	18c01704 	addi	r3,r3,92
 5086718:	2c3ffa1e 	bne	r5,r16,5086704 <__sfp+0x54>
 508671c:	88800017 	ldw	r2,0(r17)
 5086720:	10001926 	beq	r2,zero,5086788 <__sfp+0xd8>
 5086724:	1023883a 	mov	r17,r2
 5086728:	003fee06 	br	50866e4 <__sfp+0x34>
 508672c:	00ffffc4 	movi	r3,-1
 5086730:	10c0038d 	sth	r3,14(r2)
 5086734:	00c00044 	movi	r3,1
 5086738:	10c0030d 	sth	r3,12(r2)
 508673c:	10000015 	stw	zero,0(r2)
 5086740:	10000215 	stw	zero,8(r2)
 5086744:	10000115 	stw	zero,4(r2)
 5086748:	10000415 	stw	zero,16(r2)
 508674c:	10000515 	stw	zero,20(r2)
 5086750:	10000615 	stw	zero,24(r2)
 5086754:	10000c15 	stw	zero,48(r2)
 5086758:	10000d15 	stw	zero,52(r2)
 508675c:	10001115 	stw	zero,68(r2)
 5086760:	10001215 	stw	zero,72(r2)
 5086764:	dfc00317 	ldw	ra,12(sp)
 5086768:	dc800217 	ldw	r18,8(sp)
 508676c:	dc400117 	ldw	r17,4(sp)
 5086770:	dc000017 	ldw	r16,0(sp)
 5086774:	dec00404 	addi	sp,sp,16
 5086778:	f800283a 	ret
 508677c:	8809883a 	mov	r4,r17
 5086780:	50865a40 	call	50865a4 <__sinit>
 5086784:	003fd506 	br	50866dc <__sfp+0x2c>
 5086788:	9009883a 	mov	r4,r18
 508678c:	01400104 	movi	r5,4
 5086790:	50865300 	call	5086530 <__sfmoreglue>
 5086794:	88800015 	stw	r2,0(r17)
 5086798:	103fe21e 	bne	r2,zero,5086724 <__sfp+0x74>
 508679c:	00800304 	movi	r2,12
 50867a0:	90800015 	stw	r2,0(r18)
 50867a4:	0005883a 	mov	r2,zero
 50867a8:	003fee06 	br	5086764 <__sfp+0xb4>

050867ac <__sfp_lock_acquire>:
 50867ac:	f800283a 	ret

050867b0 <__sfp_lock_release>:
 50867b0:	f800283a 	ret

050867b4 <__sinit_lock_acquire>:
 50867b4:	f800283a 	ret

050867b8 <__sinit_lock_release>:
 50867b8:	f800283a 	ret

050867bc <__fp_lock_all>:
 50867bc:	00814274 	movhi	r2,1289
 50867c0:	10838c04 	addi	r2,r2,3632
 50867c4:	11000017 	ldw	r4,0(r2)
 50867c8:	01414234 	movhi	r5,1288
 50867cc:	29594504 	addi	r5,r5,25876
 50867d0:	50870dc1 	jmpi	50870dc <_fwalk>

050867d4 <__fp_unlock_all>:
 50867d4:	00814274 	movhi	r2,1289
 50867d8:	10838c04 	addi	r2,r2,3632
 50867dc:	11000017 	ldw	r4,0(r2)
 50867e0:	01414234 	movhi	r5,1288
 50867e4:	29594704 	addi	r5,r5,25884
 50867e8:	50870dc1 	jmpi	50870dc <_fwalk>

050867ec <_malloc_trim_r>:
 50867ec:	defffb04 	addi	sp,sp,-20
 50867f0:	dcc00315 	stw	r19,12(sp)
 50867f4:	dc800215 	stw	r18,8(sp)
 50867f8:	dc400115 	stw	r17,4(sp)
 50867fc:	dc000015 	stw	r16,0(sp)
 5086800:	2827883a 	mov	r19,r5
 5086804:	dfc00415 	stw	ra,16(sp)
 5086808:	04414274 	movhi	r17,1289
 508680c:	8c7e0704 	addi	r17,r17,-2020
 5086810:	2021883a 	mov	r16,r4
 5086814:	508c28c0 	call	508c28c <__malloc_lock>
 5086818:	88800217 	ldw	r2,8(r17)
 508681c:	14800117 	ldw	r18,4(r2)
 5086820:	00bfff04 	movi	r2,-4
 5086824:	90a4703a 	and	r18,r18,r2
 5086828:	9083fbc4 	addi	r2,r18,4079
 508682c:	14e7c83a 	sub	r19,r2,r19
 5086830:	9826d33a 	srli	r19,r19,12
 5086834:	0083ffc4 	movi	r2,4095
 5086838:	9cffffc4 	addi	r19,r19,-1
 508683c:	9826933a 	slli	r19,r19,12
 5086840:	14c0060e 	bge	r2,r19,508685c <_malloc_trim_r+0x70>
 5086844:	8009883a 	mov	r4,r16
 5086848:	000b883a 	mov	r5,zero
 508684c:	50896400 	call	5089640 <_sbrk_r>
 5086850:	88c00217 	ldw	r3,8(r17)
 5086854:	1c87883a 	add	r3,r3,r18
 5086858:	10c00a26 	beq	r2,r3,5086884 <_malloc_trim_r+0x98>
 508685c:	8009883a 	mov	r4,r16
 5086860:	508c2ac0 	call	508c2ac <__malloc_unlock>
 5086864:	0005883a 	mov	r2,zero
 5086868:	dfc00417 	ldw	ra,16(sp)
 508686c:	dcc00317 	ldw	r19,12(sp)
 5086870:	dc800217 	ldw	r18,8(sp)
 5086874:	dc400117 	ldw	r17,4(sp)
 5086878:	dc000017 	ldw	r16,0(sp)
 508687c:	dec00504 	addi	sp,sp,20
 5086880:	f800283a 	ret
 5086884:	8009883a 	mov	r4,r16
 5086888:	04cbc83a 	sub	r5,zero,r19
 508688c:	50896400 	call	5089640 <_sbrk_r>
 5086890:	00ffffc4 	movi	r3,-1
 5086894:	10c01326 	beq	r2,r3,50868e4 <_malloc_trim_r+0xf8>
 5086898:	00814274 	movhi	r2,1289
 508689c:	108a4e04 	addi	r2,r2,10552
 50868a0:	11000017 	ldw	r4,0(r2)
 50868a4:	88c00217 	ldw	r3,8(r17)
 50868a8:	94e5c83a 	sub	r18,r18,r19
 50868ac:	94800054 	ori	r18,r18,1
 50868b0:	24e7c83a 	sub	r19,r4,r19
 50868b4:	1c800115 	stw	r18,4(r3)
 50868b8:	8009883a 	mov	r4,r16
 50868bc:	14c00015 	stw	r19,0(r2)
 50868c0:	508c2ac0 	call	508c2ac <__malloc_unlock>
 50868c4:	00800044 	movi	r2,1
 50868c8:	dfc00417 	ldw	ra,16(sp)
 50868cc:	dcc00317 	ldw	r19,12(sp)
 50868d0:	dc800217 	ldw	r18,8(sp)
 50868d4:	dc400117 	ldw	r17,4(sp)
 50868d8:	dc000017 	ldw	r16,0(sp)
 50868dc:	dec00504 	addi	sp,sp,20
 50868e0:	f800283a 	ret
 50868e4:	8009883a 	mov	r4,r16
 50868e8:	000b883a 	mov	r5,zero
 50868ec:	50896400 	call	5089640 <_sbrk_r>
 50868f0:	88c00217 	ldw	r3,8(r17)
 50868f4:	014003c4 	movi	r5,15
 50868f8:	10c9c83a 	sub	r4,r2,r3
 50868fc:	293fd70e 	bge	r5,r4,508685c <_malloc_trim_r+0x70>
 5086900:	01414274 	movhi	r5,1289
 5086904:	29438e04 	addi	r5,r5,3640
 5086908:	29400017 	ldw	r5,0(r5)
 508690c:	21000054 	ori	r4,r4,1
 5086910:	19000115 	stw	r4,4(r3)
 5086914:	1145c83a 	sub	r2,r2,r5
 5086918:	01414274 	movhi	r5,1289
 508691c:	294a4e04 	addi	r5,r5,10552
 5086920:	28800015 	stw	r2,0(r5)
 5086924:	003fcd06 	br	508685c <_malloc_trim_r+0x70>

05086928 <_free_r>:
 5086928:	defffd04 	addi	sp,sp,-12
 508692c:	dc400115 	stw	r17,4(sp)
 5086930:	dc000015 	stw	r16,0(sp)
 5086934:	dfc00215 	stw	ra,8(sp)
 5086938:	2821883a 	mov	r16,r5
 508693c:	2023883a 	mov	r17,r4
 5086940:	28004b26 	beq	r5,zero,5086a70 <_free_r+0x148>
 5086944:	508c28c0 	call	508c28c <__malloc_lock>
 5086948:	823fff17 	ldw	r8,-4(r16)
 508694c:	00bfff84 	movi	r2,-2
 5086950:	81bffe04 	addi	r6,r16,-8
 5086954:	4084703a 	and	r2,r8,r2
 5086958:	3087883a 	add	r3,r6,r2
 508695c:	01414274 	movhi	r5,1289
 5086960:	297e0704 	addi	r5,r5,-2020
 5086964:	1a400117 	ldw	r9,4(r3)
 5086968:	29000217 	ldw	r4,8(r5)
 508696c:	01ffff04 	movi	r7,-4
 5086970:	49ce703a 	and	r7,r9,r7
 5086974:	20c06526 	beq	r4,r3,5086b0c <_free_r+0x1e4>
 5086978:	19c00115 	stw	r7,4(r3)
 508697c:	4200004c 	andi	r8,r8,1
 5086980:	40003026 	beq	r8,zero,5086a44 <_free_r+0x11c>
 5086984:	0009883a 	mov	r4,zero
 5086988:	19d1883a 	add	r8,r3,r7
 508698c:	42000117 	ldw	r8,4(r8)
 5086990:	4200004c 	andi	r8,r8,1
 5086994:	4000061e 	bne	r8,zero,50869b0 <_free_r+0x88>
 5086998:	11c5883a 	add	r2,r2,r7
 508699c:	19c00217 	ldw	r7,8(r3)
 50869a0:	20004e26 	beq	r4,zero,5086adc <_free_r+0x1b4>
 50869a4:	18c00317 	ldw	r3,12(r3)
 50869a8:	38c00315 	stw	r3,12(r7)
 50869ac:	19c00215 	stw	r7,8(r3)
 50869b0:	11c00054 	ori	r7,r2,1
 50869b4:	3087883a 	add	r3,r6,r2
 50869b8:	31c00115 	stw	r7,4(r6)
 50869bc:	18800015 	stw	r2,0(r3)
 50869c0:	20001a1e 	bne	r4,zero,5086a2c <_free_r+0x104>
 50869c4:	00c07fc4 	movi	r3,511
 50869c8:	18802e2e 	bgeu	r3,r2,5086a84 <_free_r+0x15c>
 50869cc:	1006d27a 	srli	r3,r2,9
 50869d0:	01000104 	movi	r4,4
 50869d4:	20c06636 	bltu	r4,r3,5086b70 <_free_r+0x248>
 50869d8:	1008d1ba 	srli	r4,r2,6
 50869dc:	21000e04 	addi	r4,r4,56
 50869e0:	210f883a 	add	r7,r4,r4
 50869e4:	39cf883a 	add	r7,r7,r7
 50869e8:	39cf883a 	add	r7,r7,r7
 50869ec:	29cf883a 	add	r7,r5,r7
 50869f0:	38c00217 	ldw	r3,8(r7)
 50869f4:	01414274 	movhi	r5,1289
 50869f8:	297e0704 	addi	r5,r5,-2020
 50869fc:	19c06126 	beq	r3,r7,5086b84 <_free_r+0x25c>
 5086a00:	013fff04 	movi	r4,-4
 5086a04:	19400117 	ldw	r5,4(r3)
 5086a08:	290a703a 	and	r5,r5,r4
 5086a0c:	1140022e 	bgeu	r2,r5,5086a18 <_free_r+0xf0>
 5086a10:	18c00217 	ldw	r3,8(r3)
 5086a14:	38fffb1e 	bne	r7,r3,5086a04 <_free_r+0xdc>
 5086a18:	18800317 	ldw	r2,12(r3)
 5086a1c:	30800315 	stw	r2,12(r6)
 5086a20:	30c00215 	stw	r3,8(r6)
 5086a24:	11800215 	stw	r6,8(r2)
 5086a28:	19800315 	stw	r6,12(r3)
 5086a2c:	8809883a 	mov	r4,r17
 5086a30:	dfc00217 	ldw	ra,8(sp)
 5086a34:	dc400117 	ldw	r17,4(sp)
 5086a38:	dc000017 	ldw	r16,0(sp)
 5086a3c:	dec00304 	addi	sp,sp,12
 5086a40:	508c2ac1 	jmpi	508c2ac <__malloc_unlock>
 5086a44:	813ffe17 	ldw	r4,-8(r16)
 5086a48:	2a400204 	addi	r9,r5,8
 5086a4c:	310dc83a 	sub	r6,r6,r4
 5086a50:	32000217 	ldw	r8,8(r6)
 5086a54:	1105883a 	add	r2,r2,r4
 5086a58:	42404326 	beq	r8,r9,5086b68 <_free_r+0x240>
 5086a5c:	32400317 	ldw	r9,12(r6)
 5086a60:	0009883a 	mov	r4,zero
 5086a64:	42400315 	stw	r9,12(r8)
 5086a68:	4a000215 	stw	r8,8(r9)
 5086a6c:	003fc606 	br	5086988 <_free_r+0x60>
 5086a70:	dfc00217 	ldw	ra,8(sp)
 5086a74:	dc400117 	ldw	r17,4(sp)
 5086a78:	dc000017 	ldw	r16,0(sp)
 5086a7c:	dec00304 	addi	sp,sp,12
 5086a80:	f800283a 	ret
 5086a84:	1004d0fa 	srli	r2,r2,3
 5086a88:	02000044 	movi	r8,1
 5086a8c:	29c00117 	ldw	r7,4(r5)
 5086a90:	1087883a 	add	r3,r2,r2
 5086a94:	18c7883a 	add	r3,r3,r3
 5086a98:	1005d0ba 	srai	r2,r2,2
 5086a9c:	18c7883a 	add	r3,r3,r3
 5086aa0:	28c7883a 	add	r3,r5,r3
 5086aa4:	19000217 	ldw	r4,8(r3)
 5086aa8:	4084983a 	sll	r2,r8,r2
 5086aac:	30c00315 	stw	r3,12(r6)
 5086ab0:	31000215 	stw	r4,8(r6)
 5086ab4:	11c4b03a 	or	r2,r2,r7
 5086ab8:	21800315 	stw	r6,12(r4)
 5086abc:	8809883a 	mov	r4,r17
 5086ac0:	28800115 	stw	r2,4(r5)
 5086ac4:	19800215 	stw	r6,8(r3)
 5086ac8:	dfc00217 	ldw	ra,8(sp)
 5086acc:	dc400117 	ldw	r17,4(sp)
 5086ad0:	dc000017 	ldw	r16,0(sp)
 5086ad4:	dec00304 	addi	sp,sp,12
 5086ad8:	508c2ac1 	jmpi	508c2ac <__malloc_unlock>
 5086adc:	02014274 	movhi	r8,1289
 5086ae0:	423e0904 	addi	r8,r8,-2012
 5086ae4:	3a3faf1e 	bne	r7,r8,50869a4 <_free_r+0x7c>
 5086ae8:	29800515 	stw	r6,20(r5)
 5086aec:	29800415 	stw	r6,16(r5)
 5086af0:	11000054 	ori	r4,r2,1
 5086af4:	3087883a 	add	r3,r6,r2
 5086af8:	31c00315 	stw	r7,12(r6)
 5086afc:	31c00215 	stw	r7,8(r6)
 5086b00:	31000115 	stw	r4,4(r6)
 5086b04:	18800015 	stw	r2,0(r3)
 5086b08:	003fc806 	br	5086a2c <_free_r+0x104>
 5086b0c:	4200004c 	andi	r8,r8,1
 5086b10:	3885883a 	add	r2,r7,r2
 5086b14:	4000071e 	bne	r8,zero,5086b34 <_free_r+0x20c>
 5086b18:	81fffe17 	ldw	r7,-8(r16)
 5086b1c:	31cdc83a 	sub	r6,r6,r7
 5086b20:	30c00317 	ldw	r3,12(r6)
 5086b24:	31000217 	ldw	r4,8(r6)
 5086b28:	11c5883a 	add	r2,r2,r7
 5086b2c:	20c00315 	stw	r3,12(r4)
 5086b30:	19000215 	stw	r4,8(r3)
 5086b34:	00c14274 	movhi	r3,1289
 5086b38:	18c38f04 	addi	r3,r3,3644
 5086b3c:	18c00017 	ldw	r3,0(r3)
 5086b40:	11000054 	ori	r4,r2,1
 5086b44:	31000115 	stw	r4,4(r6)
 5086b48:	29800215 	stw	r6,8(r5)
 5086b4c:	10ffb736 	bltu	r2,r3,5086a2c <_free_r+0x104>
 5086b50:	00814274 	movhi	r2,1289
 5086b54:	108a3c04 	addi	r2,r2,10480
 5086b58:	11400017 	ldw	r5,0(r2)
 5086b5c:	8809883a 	mov	r4,r17
 5086b60:	50867ec0 	call	50867ec <_malloc_trim_r>
 5086b64:	003fb106 	br	5086a2c <_free_r+0x104>
 5086b68:	01000044 	movi	r4,1
 5086b6c:	003f8606 	br	5086988 <_free_r+0x60>
 5086b70:	01000504 	movi	r4,20
 5086b74:	20c00b36 	bltu	r4,r3,5086ba4 <_free_r+0x27c>
 5086b78:	190016c4 	addi	r4,r3,91
 5086b7c:	210f883a 	add	r7,r4,r4
 5086b80:	003f9806 	br	50869e4 <_free_r+0xbc>
 5086b84:	2009d0ba 	srai	r4,r4,2
 5086b88:	00800044 	movi	r2,1
 5086b8c:	29c00117 	ldw	r7,4(r5)
 5086b90:	1108983a 	sll	r4,r2,r4
 5086b94:	1805883a 	mov	r2,r3
 5086b98:	21c8b03a 	or	r4,r4,r7
 5086b9c:	29000115 	stw	r4,4(r5)
 5086ba0:	003f9e06 	br	5086a1c <_free_r+0xf4>
 5086ba4:	01001504 	movi	r4,84
 5086ba8:	20c00436 	bltu	r4,r3,5086bbc <_free_r+0x294>
 5086bac:	1008d33a 	srli	r4,r2,12
 5086bb0:	21001b84 	addi	r4,r4,110
 5086bb4:	210f883a 	add	r7,r4,r4
 5086bb8:	003f8a06 	br	50869e4 <_free_r+0xbc>
 5086bbc:	01005504 	movi	r4,340
 5086bc0:	20c00436 	bltu	r4,r3,5086bd4 <_free_r+0x2ac>
 5086bc4:	1008d3fa 	srli	r4,r2,15
 5086bc8:	21001dc4 	addi	r4,r4,119
 5086bcc:	210f883a 	add	r7,r4,r4
 5086bd0:	003f8406 	br	50869e4 <_free_r+0xbc>
 5086bd4:	01015504 	movi	r4,1364
 5086bd8:	20c00436 	bltu	r4,r3,5086bec <_free_r+0x2c4>
 5086bdc:	1008d4ba 	srli	r4,r2,18
 5086be0:	21001f04 	addi	r4,r4,124
 5086be4:	210f883a 	add	r7,r4,r4
 5086be8:	003f7e06 	br	50869e4 <_free_r+0xbc>
 5086bec:	01c03f04 	movi	r7,252
 5086bf0:	01001f84 	movi	r4,126
 5086bf4:	003f7b06 	br	50869e4 <_free_r+0xbc>

05086bf8 <__sfvwrite_r>:
 5086bf8:	30800217 	ldw	r2,8(r6)
 5086bfc:	defff504 	addi	sp,sp,-44
 5086c00:	dd400615 	stw	r21,24(sp)
 5086c04:	dd000515 	stw	r20,20(sp)
 5086c08:	dc000115 	stw	r16,4(sp)
 5086c0c:	dfc00a15 	stw	ra,40(sp)
 5086c10:	df000915 	stw	fp,36(sp)
 5086c14:	ddc00815 	stw	r23,32(sp)
 5086c18:	dd800715 	stw	r22,28(sp)
 5086c1c:	dcc00415 	stw	r19,16(sp)
 5086c20:	dc800315 	stw	r18,12(sp)
 5086c24:	dc400215 	stw	r17,8(sp)
 5086c28:	3029883a 	mov	r20,r6
 5086c2c:	202b883a 	mov	r21,r4
 5086c30:	2821883a 	mov	r16,r5
 5086c34:	10002126 	beq	r2,zero,5086cbc <__sfvwrite_r+0xc4>
 5086c38:	2880030b 	ldhu	r2,12(r5)
 5086c3c:	10c0020c 	andi	r3,r2,8
 5086c40:	18ffffcc 	andi	r3,r3,65535
 5086c44:	18e0001c 	xori	r3,r3,32768
 5086c48:	18e00004 	addi	r3,r3,-32768
 5086c4c:	18002826 	beq	r3,zero,5086cf0 <__sfvwrite_r+0xf8>
 5086c50:	28c00417 	ldw	r3,16(r5)
 5086c54:	18002626 	beq	r3,zero,5086cf0 <__sfvwrite_r+0xf8>
 5086c58:	10c0008c 	andi	r3,r2,2
 5086c5c:	18ffffcc 	andi	r3,r3,65535
 5086c60:	18e0001c 	xori	r3,r3,32768
 5086c64:	18e00004 	addi	r3,r3,-32768
 5086c68:	a4400017 	ldw	r17,0(r20)
 5086c6c:	18002b26 	beq	r3,zero,5086d1c <__sfvwrite_r+0x124>
 5086c70:	0027883a 	mov	r19,zero
 5086c74:	0025883a 	mov	r18,zero
 5086c78:	05810004 	movi	r22,1024
 5086c7c:	980d883a 	mov	r6,r19
 5086c80:	a809883a 	mov	r4,r21
 5086c84:	90004f26 	beq	r18,zero,5086dc4 <__sfvwrite_r+0x1cc>
 5086c88:	900f883a 	mov	r7,r18
 5086c8c:	81400717 	ldw	r5,28(r16)
 5086c90:	b480012e 	bgeu	r22,r18,5086c98 <__sfvwrite_r+0xa0>
 5086c94:	01c10004 	movi	r7,1024
 5086c98:	80800917 	ldw	r2,36(r16)
 5086c9c:	103ee83a 	callr	r2
 5086ca0:	0080540e 	bge	zero,r2,5086df4 <__sfvwrite_r+0x1fc>
 5086ca4:	a0c00217 	ldw	r3,8(r20)
 5086ca8:	98a7883a 	add	r19,r19,r2
 5086cac:	90a5c83a 	sub	r18,r18,r2
 5086cb0:	1885c83a 	sub	r2,r3,r2
 5086cb4:	a0800215 	stw	r2,8(r20)
 5086cb8:	103ff01e 	bne	r2,zero,5086c7c <__sfvwrite_r+0x84>
 5086cbc:	0005883a 	mov	r2,zero
 5086cc0:	dfc00a17 	ldw	ra,40(sp)
 5086cc4:	df000917 	ldw	fp,36(sp)
 5086cc8:	ddc00817 	ldw	r23,32(sp)
 5086ccc:	dd800717 	ldw	r22,28(sp)
 5086cd0:	dd400617 	ldw	r21,24(sp)
 5086cd4:	dd000517 	ldw	r20,20(sp)
 5086cd8:	dcc00417 	ldw	r19,16(sp)
 5086cdc:	dc800317 	ldw	r18,12(sp)
 5086ce0:	dc400217 	ldw	r17,8(sp)
 5086ce4:	dc000117 	ldw	r16,4(sp)
 5086ce8:	dec00b04 	addi	sp,sp,44
 5086cec:	f800283a 	ret
 5086cf0:	a809883a 	mov	r4,r21
 5086cf4:	800b883a 	mov	r5,r16
 5086cf8:	50849640 	call	5084964 <__swsetup_r>
 5086cfc:	1000f01e 	bne	r2,zero,50870c0 <__sfvwrite_r+0x4c8>
 5086d00:	8080030b 	ldhu	r2,12(r16)
 5086d04:	a4400017 	ldw	r17,0(r20)
 5086d08:	10c0008c 	andi	r3,r2,2
 5086d0c:	18ffffcc 	andi	r3,r3,65535
 5086d10:	18e0001c 	xori	r3,r3,32768
 5086d14:	18e00004 	addi	r3,r3,-32768
 5086d18:	183fd51e 	bne	r3,zero,5086c70 <__sfvwrite_r+0x78>
 5086d1c:	10c0004c 	andi	r3,r2,1
 5086d20:	002d883a 	mov	r22,zero
 5086d24:	1800381e 	bne	r3,zero,5086e08 <__sfvwrite_r+0x210>
 5086d28:	0025883a 	mov	r18,zero
 5086d2c:	90002126 	beq	r18,zero,5086db4 <__sfvwrite_r+0x1bc>
 5086d30:	10c0800c 	andi	r3,r2,512
 5086d34:	18ffffcc 	andi	r3,r3,65535
 5086d38:	18e0001c 	xori	r3,r3,32768
 5086d3c:	18e00004 	addi	r3,r3,-32768
 5086d40:	84c00217 	ldw	r19,8(r16)
 5086d44:	18006b26 	beq	r3,zero,5086ef4 <__sfvwrite_r+0x2fc>
 5086d48:	980f883a 	mov	r7,r19
 5086d4c:	94c08636 	bltu	r18,r19,5086f68 <__sfvwrite_r+0x370>
 5086d50:	10c1200c 	andi	r3,r2,1152
 5086d54:	18009f1e 	bne	r3,zero,5086fd4 <__sfvwrite_r+0x3dc>
 5086d58:	81000017 	ldw	r4,0(r16)
 5086d5c:	982f883a 	mov	r23,r19
 5086d60:	9039883a 	mov	fp,r18
 5086d64:	9027883a 	mov	r19,r18
 5086d68:	380d883a 	mov	r6,r7
 5086d6c:	b00b883a 	mov	r5,r22
 5086d70:	d9c00015 	stw	r7,0(sp)
 5086d74:	5087e340 	call	5087e34 <memmove>
 5086d78:	d9c00017 	ldw	r7,0(sp)
 5086d7c:	81000217 	ldw	r4,8(r16)
 5086d80:	80800017 	ldw	r2,0(r16)
 5086d84:	25efc83a 	sub	r23,r4,r23
 5086d88:	11cf883a 	add	r7,r2,r7
 5086d8c:	85c00215 	stw	r23,8(r16)
 5086d90:	81c00015 	stw	r7,0(r16)
 5086d94:	a0800217 	ldw	r2,8(r20)
 5086d98:	b72d883a 	add	r22,r22,fp
 5086d9c:	9725c83a 	sub	r18,r18,fp
 5086da0:	14e7c83a 	sub	r19,r2,r19
 5086da4:	a4c00215 	stw	r19,8(r20)
 5086da8:	983fc426 	beq	r19,zero,5086cbc <__sfvwrite_r+0xc4>
 5086dac:	8080030b 	ldhu	r2,12(r16)
 5086db0:	903fdf1e 	bne	r18,zero,5086d30 <__sfvwrite_r+0x138>
 5086db4:	8d800017 	ldw	r22,0(r17)
 5086db8:	8c800117 	ldw	r18,4(r17)
 5086dbc:	8c400204 	addi	r17,r17,8
 5086dc0:	003fda06 	br	5086d2c <__sfvwrite_r+0x134>
 5086dc4:	8cc00017 	ldw	r19,0(r17)
 5086dc8:	8c800117 	ldw	r18,4(r17)
 5086dcc:	8c400204 	addi	r17,r17,8
 5086dd0:	003faa06 	br	5086c7c <__sfvwrite_r+0x84>
 5086dd4:	5088fe00 	call	5088fe0 <_realloc_r>
 5086dd8:	102f883a 	mov	r23,r2
 5086ddc:	10009f1e 	bne	r2,zero,508705c <__sfvwrite_r+0x464>
 5086de0:	81400417 	ldw	r5,16(r16)
 5086de4:	a809883a 	mov	r4,r21
 5086de8:	50869280 	call	5086928 <_free_r>
 5086dec:	00800304 	movi	r2,12
 5086df0:	a8800015 	stw	r2,0(r21)
 5086df4:	80c0030b 	ldhu	r3,12(r16)
 5086df8:	00bfffc4 	movi	r2,-1
 5086dfc:	18c01014 	ori	r3,r3,64
 5086e00:	80c0030d 	sth	r3,12(r16)
 5086e04:	003fae06 	br	5086cc0 <__sfvwrite_r+0xc8>
 5086e08:	0007883a 	mov	r3,zero
 5086e0c:	0039883a 	mov	fp,zero
 5086e10:	0025883a 	mov	r18,zero
 5086e14:	90001e26 	beq	r18,zero,5086e90 <__sfvwrite_r+0x298>
 5086e18:	18006526 	beq	r3,zero,5086fb0 <__sfvwrite_r+0x3b8>
 5086e1c:	b02f883a 	mov	r23,r22
 5086e20:	9580012e 	bgeu	r18,r22,5086e28 <__sfvwrite_r+0x230>
 5086e24:	902f883a 	mov	r23,r18
 5086e28:	81000017 	ldw	r4,0(r16)
 5086e2c:	80800417 	ldw	r2,16(r16)
 5086e30:	84c00217 	ldw	r19,8(r16)
 5086e34:	81c00517 	ldw	r7,20(r16)
 5086e38:	1100022e 	bgeu	r2,r4,5086e44 <__sfvwrite_r+0x24c>
 5086e3c:	99e7883a 	add	r19,r19,r7
 5086e40:	9dc01816 	blt	r19,r23,5086ea4 <__sfvwrite_r+0x2ac>
 5086e44:	b9c03b16 	blt	r23,r7,5086f34 <__sfvwrite_r+0x33c>
 5086e48:	80800917 	ldw	r2,36(r16)
 5086e4c:	81400717 	ldw	r5,28(r16)
 5086e50:	a809883a 	mov	r4,r21
 5086e54:	d8c00015 	stw	r3,0(sp)
 5086e58:	e00d883a 	mov	r6,fp
 5086e5c:	103ee83a 	callr	r2
 5086e60:	1027883a 	mov	r19,r2
 5086e64:	d8c00017 	ldw	r3,0(sp)
 5086e68:	00bfe20e 	bge	zero,r2,5086df4 <__sfvwrite_r+0x1fc>
 5086e6c:	b4edc83a 	sub	r22,r22,r19
 5086e70:	b0001a26 	beq	r22,zero,5086edc <__sfvwrite_r+0x2e4>
 5086e74:	a0800217 	ldw	r2,8(r20)
 5086e78:	e4f9883a 	add	fp,fp,r19
 5086e7c:	94e5c83a 	sub	r18,r18,r19
 5086e80:	14e7c83a 	sub	r19,r2,r19
 5086e84:	a4c00215 	stw	r19,8(r20)
 5086e88:	983f8c26 	beq	r19,zero,5086cbc <__sfvwrite_r+0xc4>
 5086e8c:	903fe21e 	bne	r18,zero,5086e18 <__sfvwrite_r+0x220>
 5086e90:	8f000017 	ldw	fp,0(r17)
 5086e94:	8c800117 	ldw	r18,4(r17)
 5086e98:	0007883a 	mov	r3,zero
 5086e9c:	8c400204 	addi	r17,r17,8
 5086ea0:	003fdc06 	br	5086e14 <__sfvwrite_r+0x21c>
 5086ea4:	e00b883a 	mov	r5,fp
 5086ea8:	980d883a 	mov	r6,r19
 5086eac:	d8c00015 	stw	r3,0(sp)
 5086eb0:	5087e340 	call	5087e34 <memmove>
 5086eb4:	80800017 	ldw	r2,0(r16)
 5086eb8:	a809883a 	mov	r4,r21
 5086ebc:	800b883a 	mov	r5,r16
 5086ec0:	14c5883a 	add	r2,r2,r19
 5086ec4:	80800015 	stw	r2,0(r16)
 5086ec8:	50862fc0 	call	50862fc <_fflush_r>
 5086ecc:	d8c00017 	ldw	r3,0(sp)
 5086ed0:	103fc81e 	bne	r2,zero,5086df4 <__sfvwrite_r+0x1fc>
 5086ed4:	b4edc83a 	sub	r22,r22,r19
 5086ed8:	b03fe61e 	bne	r22,zero,5086e74 <__sfvwrite_r+0x27c>
 5086edc:	a809883a 	mov	r4,r21
 5086ee0:	800b883a 	mov	r5,r16
 5086ee4:	50862fc0 	call	50862fc <_fflush_r>
 5086ee8:	103fc21e 	bne	r2,zero,5086df4 <__sfvwrite_r+0x1fc>
 5086eec:	0007883a 	mov	r3,zero
 5086ef0:	003fe006 	br	5086e74 <__sfvwrite_r+0x27c>
 5086ef4:	81000017 	ldw	r4,0(r16)
 5086ef8:	80800417 	ldw	r2,16(r16)
 5086efc:	1100022e 	bgeu	r2,r4,5086f08 <__sfvwrite_r+0x310>
 5086f00:	9839883a 	mov	fp,r19
 5086f04:	9c806036 	bltu	r19,r18,5087088 <__sfvwrite_r+0x490>
 5086f08:	81c00517 	ldw	r7,20(r16)
 5086f0c:	91c01c36 	bltu	r18,r7,5086f80 <__sfvwrite_r+0x388>
 5086f10:	80800917 	ldw	r2,36(r16)
 5086f14:	81400717 	ldw	r5,28(r16)
 5086f18:	a809883a 	mov	r4,r21
 5086f1c:	b00d883a 	mov	r6,r22
 5086f20:	103ee83a 	callr	r2
 5086f24:	1027883a 	mov	r19,r2
 5086f28:	00bfb20e 	bge	zero,r2,5086df4 <__sfvwrite_r+0x1fc>
 5086f2c:	1039883a 	mov	fp,r2
 5086f30:	003f9806 	br	5086d94 <__sfvwrite_r+0x19c>
 5086f34:	b80d883a 	mov	r6,r23
 5086f38:	e00b883a 	mov	r5,fp
 5086f3c:	d8c00015 	stw	r3,0(sp)
 5086f40:	5087e340 	call	5087e34 <memmove>
 5086f44:	80800217 	ldw	r2,8(r16)
 5086f48:	81000017 	ldw	r4,0(r16)
 5086f4c:	b827883a 	mov	r19,r23
 5086f50:	15c5c83a 	sub	r2,r2,r23
 5086f54:	25ef883a 	add	r23,r4,r23
 5086f58:	80800215 	stw	r2,8(r16)
 5086f5c:	85c00015 	stw	r23,0(r16)
 5086f60:	d8c00017 	ldw	r3,0(sp)
 5086f64:	003fc106 	br	5086e6c <__sfvwrite_r+0x274>
 5086f68:	81000017 	ldw	r4,0(r16)
 5086f6c:	902f883a 	mov	r23,r18
 5086f70:	9039883a 	mov	fp,r18
 5086f74:	9027883a 	mov	r19,r18
 5086f78:	900f883a 	mov	r7,r18
 5086f7c:	003f7a06 	br	5086d68 <__sfvwrite_r+0x170>
 5086f80:	b00b883a 	mov	r5,r22
 5086f84:	900d883a 	mov	r6,r18
 5086f88:	5087e340 	call	5087e34 <memmove>
 5086f8c:	80c00217 	ldw	r3,8(r16)
 5086f90:	80800017 	ldw	r2,0(r16)
 5086f94:	9027883a 	mov	r19,r18
 5086f98:	1c87c83a 	sub	r3,r3,r18
 5086f9c:	1485883a 	add	r2,r2,r18
 5086fa0:	80c00215 	stw	r3,8(r16)
 5086fa4:	80800015 	stw	r2,0(r16)
 5086fa8:	9039883a 	mov	fp,r18
 5086fac:	003f7906 	br	5086d94 <__sfvwrite_r+0x19c>
 5086fb0:	e009883a 	mov	r4,fp
 5086fb4:	01400284 	movi	r5,10
 5086fb8:	900d883a 	mov	r6,r18
 5086fbc:	5087c440 	call	5087c44 <memchr>
 5086fc0:	10003c26 	beq	r2,zero,50870b4 <__sfvwrite_r+0x4bc>
 5086fc4:	15800044 	addi	r22,r2,1
 5086fc8:	b72dc83a 	sub	r22,r22,fp
 5086fcc:	00c00044 	movi	r3,1
 5086fd0:	003f9206 	br	5086e1c <__sfvwrite_r+0x224>
 5086fd4:	81000517 	ldw	r4,20(r16)
 5086fd8:	81400417 	ldw	r5,16(r16)
 5086fdc:	80c00017 	ldw	r3,0(r16)
 5086fe0:	210d883a 	add	r6,r4,r4
 5086fe4:	3109883a 	add	r4,r6,r4
 5086fe8:	2026d7fa 	srli	r19,r4,31
 5086fec:	1979c83a 	sub	fp,r3,r5
 5086ff0:	e1800044 	addi	r6,fp,1
 5086ff4:	9909883a 	add	r4,r19,r4
 5086ff8:	2027d07a 	srai	r19,r4,1
 5086ffc:	3489883a 	add	r4,r6,r18
 5087000:	980d883a 	mov	r6,r19
 5087004:	9900022e 	bgeu	r19,r4,5087010 <__sfvwrite_r+0x418>
 5087008:	2027883a 	mov	r19,r4
 508700c:	200d883a 	mov	r6,r4
 5087010:	1081000c 	andi	r2,r2,1024
 5087014:	10bfffcc 	andi	r2,r2,65535
 5087018:	10a0001c 	xori	r2,r2,32768
 508701c:	10a00004 	addi	r2,r2,-32768
 5087020:	a809883a 	mov	r4,r21
 5087024:	103f6b26 	beq	r2,zero,5086dd4 <__sfvwrite_r+0x1dc>
 5087028:	300b883a 	mov	r5,r6
 508702c:	50874c00 	call	50874c0 <_malloc_r>
 5087030:	102f883a 	mov	r23,r2
 5087034:	103f6d26 	beq	r2,zero,5086dec <__sfvwrite_r+0x1f4>
 5087038:	81400417 	ldw	r5,16(r16)
 508703c:	1009883a 	mov	r4,r2
 5087040:	e00d883a 	mov	r6,fp
 5087044:	5087d3c0 	call	5087d3c <memcpy>
 5087048:	8080030b 	ldhu	r2,12(r16)
 508704c:	00fedfc4 	movi	r3,-1153
 5087050:	10c4703a 	and	r2,r2,r3
 5087054:	10802014 	ori	r2,r2,128
 5087058:	8080030d 	sth	r2,12(r16)
 508705c:	bf09883a 	add	r4,r23,fp
 5087060:	9f07c83a 	sub	r3,r19,fp
 5087064:	85c00415 	stw	r23,16(r16)
 5087068:	84c00515 	stw	r19,20(r16)
 508706c:	81000015 	stw	r4,0(r16)
 5087070:	902f883a 	mov	r23,r18
 5087074:	80c00215 	stw	r3,8(r16)
 5087078:	9039883a 	mov	fp,r18
 508707c:	9027883a 	mov	r19,r18
 5087080:	900f883a 	mov	r7,r18
 5087084:	003f3806 	br	5086d68 <__sfvwrite_r+0x170>
 5087088:	b00b883a 	mov	r5,r22
 508708c:	980d883a 	mov	r6,r19
 5087090:	5087e340 	call	5087e34 <memmove>
 5087094:	80800017 	ldw	r2,0(r16)
 5087098:	a809883a 	mov	r4,r21
 508709c:	800b883a 	mov	r5,r16
 50870a0:	14c5883a 	add	r2,r2,r19
 50870a4:	80800015 	stw	r2,0(r16)
 50870a8:	50862fc0 	call	50862fc <_fflush_r>
 50870ac:	103f3926 	beq	r2,zero,5086d94 <__sfvwrite_r+0x19c>
 50870b0:	003f5006 	br	5086df4 <__sfvwrite_r+0x1fc>
 50870b4:	95800044 	addi	r22,r18,1
 50870b8:	00c00044 	movi	r3,1
 50870bc:	003f5706 	br	5086e1c <__sfvwrite_r+0x224>
 50870c0:	80c0030b 	ldhu	r3,12(r16)
 50870c4:	00bfffc4 	movi	r2,-1
 50870c8:	18c01014 	ori	r3,r3,64
 50870cc:	80c0030d 	sth	r3,12(r16)
 50870d0:	00c00244 	movi	r3,9
 50870d4:	a8c00015 	stw	r3,0(r21)
 50870d8:	003ef906 	br	5086cc0 <__sfvwrite_r+0xc8>

050870dc <_fwalk>:
 50870dc:	defff904 	addi	sp,sp,-28
 50870e0:	dcc00315 	stw	r19,12(sp)
 50870e4:	24c0b804 	addi	r19,r4,736
 50870e8:	dd400515 	stw	r21,20(sp)
 50870ec:	dd000415 	stw	r20,16(sp)
 50870f0:	dfc00615 	stw	ra,24(sp)
 50870f4:	dc800215 	stw	r18,8(sp)
 50870f8:	dc400115 	stw	r17,4(sp)
 50870fc:	dc000015 	stw	r16,0(sp)
 5087100:	282b883a 	mov	r21,r5
 5087104:	0029883a 	mov	r20,zero
 5087108:	50867ac0 	call	50867ac <__sfp_lock_acquire>
 508710c:	98001226 	beq	r19,zero,5087158 <_fwalk+0x7c>
 5087110:	04bfffc4 	movi	r18,-1
 5087114:	9c400117 	ldw	r17,4(r19)
 5087118:	9c000217 	ldw	r16,8(r19)
 508711c:	8c7fffc4 	addi	r17,r17,-1
 5087120:	88000b16 	blt	r17,zero,5087150 <_fwalk+0x74>
 5087124:	84000304 	addi	r16,r16,12
 5087128:	80c0000f 	ldh	r3,0(r16)
 508712c:	8c7fffc4 	addi	r17,r17,-1
 5087130:	813ffd04 	addi	r4,r16,-12
 5087134:	18000426 	beq	r3,zero,5087148 <_fwalk+0x6c>
 5087138:	80c0008f 	ldh	r3,2(r16)
 508713c:	1c800226 	beq	r3,r18,5087148 <_fwalk+0x6c>
 5087140:	a83ee83a 	callr	r21
 5087144:	a0a8b03a 	or	r20,r20,r2
 5087148:	84001704 	addi	r16,r16,92
 508714c:	8cbff61e 	bne	r17,r18,5087128 <_fwalk+0x4c>
 5087150:	9cc00017 	ldw	r19,0(r19)
 5087154:	983fef1e 	bne	r19,zero,5087114 <_fwalk+0x38>
 5087158:	50867b00 	call	50867b0 <__sfp_lock_release>
 508715c:	a005883a 	mov	r2,r20
 5087160:	dfc00617 	ldw	ra,24(sp)
 5087164:	dd400517 	ldw	r21,20(sp)
 5087168:	dd000417 	ldw	r20,16(sp)
 508716c:	dcc00317 	ldw	r19,12(sp)
 5087170:	dc800217 	ldw	r18,8(sp)
 5087174:	dc400117 	ldw	r17,4(sp)
 5087178:	dc000017 	ldw	r16,0(sp)
 508717c:	dec00704 	addi	sp,sp,28
 5087180:	f800283a 	ret

05087184 <_fwalk_reent>:
 5087184:	defff804 	addi	sp,sp,-32
 5087188:	dcc00315 	stw	r19,12(sp)
 508718c:	24c0b804 	addi	r19,r4,736
 5087190:	dd800615 	stw	r22,24(sp)
 5087194:	dd400515 	stw	r21,20(sp)
 5087198:	dd000415 	stw	r20,16(sp)
 508719c:	dfc00715 	stw	ra,28(sp)
 50871a0:	dc800215 	stw	r18,8(sp)
 50871a4:	dc400115 	stw	r17,4(sp)
 50871a8:	dc000015 	stw	r16,0(sp)
 50871ac:	2029883a 	mov	r20,r4
 50871b0:	282b883a 	mov	r21,r5
 50871b4:	002d883a 	mov	r22,zero
 50871b8:	50867ac0 	call	50867ac <__sfp_lock_acquire>
 50871bc:	98001326 	beq	r19,zero,508720c <_fwalk_reent+0x88>
 50871c0:	04bfffc4 	movi	r18,-1
 50871c4:	9c400117 	ldw	r17,4(r19)
 50871c8:	9c000217 	ldw	r16,8(r19)
 50871cc:	8c7fffc4 	addi	r17,r17,-1
 50871d0:	88000c16 	blt	r17,zero,5087204 <_fwalk_reent+0x80>
 50871d4:	84000304 	addi	r16,r16,12
 50871d8:	80c0000f 	ldh	r3,0(r16)
 50871dc:	8c7fffc4 	addi	r17,r17,-1
 50871e0:	817ffd04 	addi	r5,r16,-12
 50871e4:	18000526 	beq	r3,zero,50871fc <_fwalk_reent+0x78>
 50871e8:	80c0008f 	ldh	r3,2(r16)
 50871ec:	a009883a 	mov	r4,r20
 50871f0:	1c800226 	beq	r3,r18,50871fc <_fwalk_reent+0x78>
 50871f4:	a83ee83a 	callr	r21
 50871f8:	b0acb03a 	or	r22,r22,r2
 50871fc:	84001704 	addi	r16,r16,92
 5087200:	8cbff51e 	bne	r17,r18,50871d8 <_fwalk_reent+0x54>
 5087204:	9cc00017 	ldw	r19,0(r19)
 5087208:	983fee1e 	bne	r19,zero,50871c4 <_fwalk_reent+0x40>
 508720c:	50867b00 	call	50867b0 <__sfp_lock_release>
 5087210:	b005883a 	mov	r2,r22
 5087214:	dfc00717 	ldw	ra,28(sp)
 5087218:	dd800617 	ldw	r22,24(sp)
 508721c:	dd400517 	ldw	r21,20(sp)
 5087220:	dd000417 	ldw	r20,16(sp)
 5087224:	dcc00317 	ldw	r19,12(sp)
 5087228:	dc800217 	ldw	r18,8(sp)
 508722c:	dc400117 	ldw	r17,4(sp)
 5087230:	dc000017 	ldw	r16,0(sp)
 5087234:	dec00804 	addi	sp,sp,32
 5087238:	f800283a 	ret

0508723c <_setlocale_r>:
 508723c:	defffc04 	addi	sp,sp,-16
 5087240:	dc800215 	stw	r18,8(sp)
 5087244:	dc400115 	stw	r17,4(sp)
 5087248:	dc000015 	stw	r16,0(sp)
 508724c:	dfc00315 	stw	ra,12(sp)
 5087250:	3021883a 	mov	r16,r6
 5087254:	2023883a 	mov	r17,r4
 5087258:	2825883a 	mov	r18,r5
 508725c:	30001626 	beq	r6,zero,50872b8 <_setlocale_r+0x7c>
 5087260:	3009883a 	mov	r4,r6
 5087264:	01414274 	movhi	r5,1289
 5087268:	297c5604 	addi	r5,r5,-3752
 508726c:	50897e40 	call	50897e4 <strcmp>
 5087270:	10000a1e 	bne	r2,zero,508729c <_setlocale_r+0x60>
 5087274:	8c800c15 	stw	r18,48(r17)
 5087278:	8c000d15 	stw	r16,52(r17)
 508727c:	00814274 	movhi	r2,1289
 5087280:	10bc5604 	addi	r2,r2,-3752
 5087284:	dfc00317 	ldw	ra,12(sp)
 5087288:	dc800217 	ldw	r18,8(sp)
 508728c:	dc400117 	ldw	r17,4(sp)
 5087290:	dc000017 	ldw	r16,0(sp)
 5087294:	dec00404 	addi	sp,sp,16
 5087298:	f800283a 	ret
 508729c:	8009883a 	mov	r4,r16
 50872a0:	01414274 	movhi	r5,1289
 50872a4:	297c4104 	addi	r5,r5,-3836
 50872a8:	50897e40 	call	50897e4 <strcmp>
 50872ac:	103ff126 	beq	r2,zero,5087274 <_setlocale_r+0x38>
 50872b0:	0005883a 	mov	r2,zero
 50872b4:	003ff306 	br	5087284 <_setlocale_r+0x48>
 50872b8:	00814274 	movhi	r2,1289
 50872bc:	10bc5604 	addi	r2,r2,-3752
 50872c0:	dfc00317 	ldw	ra,12(sp)
 50872c4:	dc800217 	ldw	r18,8(sp)
 50872c8:	dc400117 	ldw	r17,4(sp)
 50872cc:	dc000017 	ldw	r16,0(sp)
 50872d0:	dec00404 	addi	sp,sp,16
 50872d4:	f800283a 	ret

050872d8 <__locale_charset>:
 50872d8:	00814274 	movhi	r2,1289
 50872dc:	10bc5704 	addi	r2,r2,-3748
 50872e0:	f800283a 	ret

050872e4 <_localeconv_r>:
 50872e4:	00814274 	movhi	r2,1289
 50872e8:	10bc5b04 	addi	r2,r2,-3732
 50872ec:	f800283a 	ret

050872f0 <setlocale>:
 50872f0:	00c14274 	movhi	r3,1289
 50872f4:	18c38c04 	addi	r3,r3,3632
 50872f8:	2005883a 	mov	r2,r4
 50872fc:	19000017 	ldw	r4,0(r3)
 5087300:	280d883a 	mov	r6,r5
 5087304:	100b883a 	mov	r5,r2
 5087308:	508723c1 	jmpi	508723c <_setlocale_r>

0508730c <localeconv>:
 508730c:	00814274 	movhi	r2,1289
 5087310:	10bc5b04 	addi	r2,r2,-3732
 5087314:	f800283a 	ret

05087318 <__smakebuf_r>:
 5087318:	2880030b 	ldhu	r2,12(r5)
 508731c:	deffed04 	addi	sp,sp,-76
 5087320:	dc401015 	stw	r17,64(sp)
 5087324:	10c0008c 	andi	r3,r2,2
 5087328:	18ffffcc 	andi	r3,r3,65535
 508732c:	18e0001c 	xori	r3,r3,32768
 5087330:	dc000f15 	stw	r16,60(sp)
 5087334:	dfc01215 	stw	ra,72(sp)
 5087338:	dc801115 	stw	r18,68(sp)
 508733c:	18e00004 	addi	r3,r3,-32768
 5087340:	2821883a 	mov	r16,r5
 5087344:	2023883a 	mov	r17,r4
 5087348:	1800381e 	bne	r3,zero,508742c <__smakebuf_r+0x114>
 508734c:	2940038f 	ldh	r5,14(r5)
 5087350:	28002d16 	blt	r5,zero,5087408 <__smakebuf_r+0xf0>
 5087354:	d80d883a 	mov	r6,sp
 5087358:	5089b640 	call	5089b64 <_fstat_r>
 508735c:	10002916 	blt	r2,zero,5087404 <__smakebuf_r+0xec>
 5087360:	d8800117 	ldw	r2,4(sp)
 5087364:	00e00014 	movui	r3,32768
 5087368:	10bc000c 	andi	r2,r2,61440
 508736c:	10c03c26 	beq	r2,r3,5087460 <__smakebuf_r+0x148>
 5087370:	80c0030b 	ldhu	r3,12(r16)
 5087374:	18c20014 	ori	r3,r3,2048
 5087378:	80c0030d 	sth	r3,12(r16)
 508737c:	00c80004 	movi	r3,8192
 5087380:	10c00c1e 	bne	r2,r3,50873b4 <__smakebuf_r+0x9c>
 5087384:	8140038f 	ldh	r5,14(r16)
 5087388:	8809883a 	mov	r4,r17
 508738c:	5089bcc0 	call	5089bcc <_isatty_r>
 5087390:	10000826 	beq	r2,zero,50873b4 <__smakebuf_r+0x9c>
 5087394:	80c0030b 	ldhu	r3,12(r16)
 5087398:	808010c4 	addi	r2,r16,67
 508739c:	80800015 	stw	r2,0(r16)
 50873a0:	18c00054 	ori	r3,r3,1
 50873a4:	80800415 	stw	r2,16(r16)
 50873a8:	00800044 	movi	r2,1
 50873ac:	80c0030d 	sth	r3,12(r16)
 50873b0:	80800515 	stw	r2,20(r16)
 50873b4:	04810004 	movi	r18,1024
 50873b8:	8809883a 	mov	r4,r17
 50873bc:	900b883a 	mov	r5,r18
 50873c0:	50874c00 	call	50874c0 <_malloc_r>
 50873c4:	10003026 	beq	r2,zero,5087488 <__smakebuf_r+0x170>
 50873c8:	80c0030b 	ldhu	r3,12(r16)
 50873cc:	01014234 	movhi	r4,1288
 50873d0:	21194904 	addi	r4,r4,25892
 50873d4:	89000f15 	stw	r4,60(r17)
 50873d8:	18c02014 	ori	r3,r3,128
 50873dc:	80c0030d 	sth	r3,12(r16)
 50873e0:	80800015 	stw	r2,0(r16)
 50873e4:	80800415 	stw	r2,16(r16)
 50873e8:	84800515 	stw	r18,20(r16)
 50873ec:	dfc01217 	ldw	ra,72(sp)
 50873f0:	dc801117 	ldw	r18,68(sp)
 50873f4:	dc401017 	ldw	r17,64(sp)
 50873f8:	dc000f17 	ldw	r16,60(sp)
 50873fc:	dec01304 	addi	sp,sp,76
 5087400:	f800283a 	ret
 5087404:	8080030b 	ldhu	r2,12(r16)
 5087408:	10c0200c 	andi	r3,r2,128
 508740c:	18ffffcc 	andi	r3,r3,65535
 5087410:	18e0001c 	xori	r3,r3,32768
 5087414:	18e00004 	addi	r3,r3,-32768
 5087418:	18000f1e 	bne	r3,zero,5087458 <__smakebuf_r+0x140>
 508741c:	04810004 	movi	r18,1024
 5087420:	10820014 	ori	r2,r2,2048
 5087424:	8080030d 	sth	r2,12(r16)
 5087428:	003fe306 	br	50873b8 <__smakebuf_r+0xa0>
 508742c:	288010c4 	addi	r2,r5,67
 5087430:	28800015 	stw	r2,0(r5)
 5087434:	28800415 	stw	r2,16(r5)
 5087438:	00800044 	movi	r2,1
 508743c:	28800515 	stw	r2,20(r5)
 5087440:	dfc01217 	ldw	ra,72(sp)
 5087444:	dc801117 	ldw	r18,68(sp)
 5087448:	dc401017 	ldw	r17,64(sp)
 508744c:	dc000f17 	ldw	r16,60(sp)
 5087450:	dec01304 	addi	sp,sp,76
 5087454:	f800283a 	ret
 5087458:	04801004 	movi	r18,64
 508745c:	003ff006 	br	5087420 <__smakebuf_r+0x108>
 5087460:	81000a17 	ldw	r4,40(r16)
 5087464:	00c14274 	movhi	r3,1289
 5087468:	18e5e004 	addi	r3,r3,-26752
 508746c:	20ffc01e 	bne	r4,r3,5087370 <__smakebuf_r+0x58>
 5087470:	8080030b 	ldhu	r2,12(r16)
 5087474:	00c10004 	movi	r3,1024
 5087478:	80c01315 	stw	r3,76(r16)
 508747c:	10c4b03a 	or	r2,r2,r3
 5087480:	8080030d 	sth	r2,12(r16)
 5087484:	003fcb06 	br	50873b4 <__smakebuf_r+0x9c>
 5087488:	8080030b 	ldhu	r2,12(r16)
 508748c:	10c0800c 	andi	r3,r2,512
 5087490:	18ffffcc 	andi	r3,r3,65535
 5087494:	18e0001c 	xori	r3,r3,32768
 5087498:	18e00004 	addi	r3,r3,-32768
 508749c:	183fd31e 	bne	r3,zero,50873ec <__smakebuf_r+0xd4>
 50874a0:	10800094 	ori	r2,r2,2
 50874a4:	80c010c4 	addi	r3,r16,67
 50874a8:	8080030d 	sth	r2,12(r16)
 50874ac:	00800044 	movi	r2,1
 50874b0:	80c00015 	stw	r3,0(r16)
 50874b4:	80c00415 	stw	r3,16(r16)
 50874b8:	80800515 	stw	r2,20(r16)
 50874bc:	003fcb06 	br	50873ec <__smakebuf_r+0xd4>

050874c0 <_malloc_r>:
 50874c0:	defff604 	addi	sp,sp,-40
 50874c4:	dc800215 	stw	r18,8(sp)
 50874c8:	dfc00915 	stw	ra,36(sp)
 50874cc:	df000815 	stw	fp,32(sp)
 50874d0:	ddc00715 	stw	r23,28(sp)
 50874d4:	dd800615 	stw	r22,24(sp)
 50874d8:	dd400515 	stw	r21,20(sp)
 50874dc:	dd000415 	stw	r20,16(sp)
 50874e0:	dcc00315 	stw	r19,12(sp)
 50874e4:	dc400115 	stw	r17,4(sp)
 50874e8:	dc000015 	stw	r16,0(sp)
 50874ec:	288002c4 	addi	r2,r5,11
 50874f0:	00c00584 	movi	r3,22
 50874f4:	2025883a 	mov	r18,r4
 50874f8:	18802b2e 	bgeu	r3,r2,50875a8 <_malloc_r+0xe8>
 50874fc:	047ffe04 	movi	r17,-8
 5087500:	1462703a 	and	r17,r2,r17
 5087504:	88002a16 	blt	r17,zero,50875b0 <_malloc_r+0xf0>
 5087508:	89402936 	bltu	r17,r5,50875b0 <_malloc_r+0xf0>
 508750c:	9009883a 	mov	r4,r18
 5087510:	508c28c0 	call	508c28c <__malloc_lock>
 5087514:	00807dc4 	movi	r2,503
 5087518:	14402936 	bltu	r2,r17,50875c0 <_malloc_r+0x100>
 508751c:	8808d0fa 	srli	r4,r17,3
 5087520:	04c14274 	movhi	r19,1289
 5087524:	9cfe0704 	addi	r19,r19,-2020
 5087528:	2105883a 	add	r2,r4,r4
 508752c:	1085883a 	add	r2,r2,r2
 5087530:	1085883a 	add	r2,r2,r2
 5087534:	9885883a 	add	r2,r19,r2
 5087538:	14000317 	ldw	r16,12(r2)
 508753c:	80815526 	beq	r16,r2,5087a94 <_malloc_r+0x5d4>
 5087540:	81000117 	ldw	r4,4(r16)
 5087544:	00bfff04 	movi	r2,-4
 5087548:	80c00317 	ldw	r3,12(r16)
 508754c:	2084703a 	and	r2,r4,r2
 5087550:	8085883a 	add	r2,r16,r2
 5087554:	11800117 	ldw	r6,4(r2)
 5087558:	81400217 	ldw	r5,8(r16)
 508755c:	9009883a 	mov	r4,r18
 5087560:	31800054 	ori	r6,r6,1
 5087564:	11800115 	stw	r6,4(r2)
 5087568:	28c00315 	stw	r3,12(r5)
 508756c:	19400215 	stw	r5,8(r3)
 5087570:	508c2ac0 	call	508c2ac <__malloc_unlock>
 5087574:	80800204 	addi	r2,r16,8
 5087578:	dfc00917 	ldw	ra,36(sp)
 508757c:	df000817 	ldw	fp,32(sp)
 5087580:	ddc00717 	ldw	r23,28(sp)
 5087584:	dd800617 	ldw	r22,24(sp)
 5087588:	dd400517 	ldw	r21,20(sp)
 508758c:	dd000417 	ldw	r20,16(sp)
 5087590:	dcc00317 	ldw	r19,12(sp)
 5087594:	dc800217 	ldw	r18,8(sp)
 5087598:	dc400117 	ldw	r17,4(sp)
 508759c:	dc000017 	ldw	r16,0(sp)
 50875a0:	dec00a04 	addi	sp,sp,40
 50875a4:	f800283a 	ret
 50875a8:	04400404 	movi	r17,16
 50875ac:	897fd72e 	bgeu	r17,r5,508750c <_malloc_r+0x4c>
 50875b0:	00800304 	movi	r2,12
 50875b4:	90800015 	stw	r2,0(r18)
 50875b8:	0005883a 	mov	r2,zero
 50875bc:	003fee06 	br	5087578 <_malloc_r+0xb8>
 50875c0:	8808d27a 	srli	r4,r17,9
 50875c4:	20007126 	beq	r4,zero,508778c <_malloc_r+0x2cc>
 50875c8:	00800104 	movi	r2,4
 50875cc:	1100eb36 	bltu	r2,r4,508797c <_malloc_r+0x4bc>
 50875d0:	8808d1ba 	srli	r4,r17,6
 50875d4:	21000e04 	addi	r4,r4,56
 50875d8:	210b883a 	add	r5,r4,r4
 50875dc:	294b883a 	add	r5,r5,r5
 50875e0:	294b883a 	add	r5,r5,r5
 50875e4:	04c14274 	movhi	r19,1289
 50875e8:	9cfe0704 	addi	r19,r19,-2020
 50875ec:	994b883a 	add	r5,r19,r5
 50875f0:	2c000317 	ldw	r16,12(r5)
 50875f4:	2c000e26 	beq	r5,r16,5087630 <_malloc_r+0x170>
 50875f8:	80c00117 	ldw	r3,4(r16)
 50875fc:	01ffff04 	movi	r7,-4
 5087600:	018003c4 	movi	r6,15
 5087604:	19c6703a 	and	r3,r3,r7
 5087608:	1c45c83a 	sub	r2,r3,r17
 508760c:	30800716 	blt	r6,r2,508762c <_malloc_r+0x16c>
 5087610:	1000610e 	bge	r2,zero,5087798 <_malloc_r+0x2d8>
 5087614:	84000317 	ldw	r16,12(r16)
 5087618:	2c000526 	beq	r5,r16,5087630 <_malloc_r+0x170>
 508761c:	80c00117 	ldw	r3,4(r16)
 5087620:	19c6703a 	and	r3,r3,r7
 5087624:	1c45c83a 	sub	r2,r3,r17
 5087628:	30bff90e 	bge	r6,r2,5087610 <_malloc_r+0x150>
 508762c:	213fffc4 	addi	r4,r4,-1
 5087630:	21000044 	addi	r4,r4,1
 5087634:	9c000417 	ldw	r16,16(r19)
 5087638:	00c14274 	movhi	r3,1289
 508763c:	18fe0704 	addi	r3,r3,-2020
 5087640:	1a400204 	addi	r9,r3,8
 5087644:	8240ff26 	beq	r16,r9,5087a44 <_malloc_r+0x584>
 5087648:	81400117 	ldw	r5,4(r16)
 508764c:	00bfff04 	movi	r2,-4
 5087650:	018003c4 	movi	r6,15
 5087654:	2884703a 	and	r2,r5,r2
 5087658:	144bc83a 	sub	r5,r2,r17
 508765c:	3140ea16 	blt	r6,r5,5087a08 <_malloc_r+0x548>
 5087660:	1a400515 	stw	r9,20(r3)
 5087664:	1a400415 	stw	r9,16(r3)
 5087668:	2800570e 	bge	r5,zero,50877c8 <_malloc_r+0x308>
 508766c:	01407fc4 	movi	r5,511
 5087670:	2880ca36 	bltu	r5,r2,508799c <_malloc_r+0x4dc>
 5087674:	1004d0fa 	srli	r2,r2,3
 5087678:	02000044 	movi	r8,1
 508767c:	19c00117 	ldw	r7,4(r3)
 5087680:	108b883a 	add	r5,r2,r2
 5087684:	294b883a 	add	r5,r5,r5
 5087688:	1005d0ba 	srai	r2,r2,2
 508768c:	294b883a 	add	r5,r5,r5
 5087690:	28cb883a 	add	r5,r5,r3
 5087694:	29800217 	ldw	r6,8(r5)
 5087698:	4084983a 	sll	r2,r8,r2
 508769c:	81400315 	stw	r5,12(r16)
 50876a0:	81800215 	stw	r6,8(r16)
 50876a4:	11c4b03a 	or	r2,r2,r7
 50876a8:	18800115 	stw	r2,4(r3)
 50876ac:	2c000215 	stw	r16,8(r5)
 50876b0:	34000315 	stw	r16,12(r6)
 50876b4:	200bd0ba 	srai	r5,r4,2
 50876b8:	00c00044 	movi	r3,1
 50876bc:	194a983a 	sll	r5,r3,r5
 50876c0:	11404936 	bltu	r2,r5,50877e8 <_malloc_r+0x328>
 50876c4:	1146703a 	and	r3,r2,r5
 50876c8:	18000a1e 	bne	r3,zero,50876f4 <_malloc_r+0x234>
 50876cc:	00ffff04 	movi	r3,-4
 50876d0:	294b883a 	add	r5,r5,r5
 50876d4:	20c8703a 	and	r4,r4,r3
 50876d8:	1146703a 	and	r3,r2,r5
 50876dc:	21000104 	addi	r4,r4,4
 50876e0:	1800041e 	bne	r3,zero,50876f4 <_malloc_r+0x234>
 50876e4:	294b883a 	add	r5,r5,r5
 50876e8:	1146703a 	and	r3,r2,r5
 50876ec:	21000104 	addi	r4,r4,4
 50876f0:	183ffc26 	beq	r3,zero,50876e4 <_malloc_r+0x224>
 50876f4:	023fff04 	movi	r8,-4
 50876f8:	01c003c4 	movi	r7,15
 50876fc:	2105883a 	add	r2,r4,r4
 5087700:	1085883a 	add	r2,r2,r2
 5087704:	1085883a 	add	r2,r2,r2
 5087708:	9899883a 	add	r12,r19,r2
 508770c:	62800304 	addi	r10,r12,12
 5087710:	2017883a 	mov	r11,r4
 5087714:	54000017 	ldw	r16,0(r10)
 5087718:	51bffd04 	addi	r6,r10,-12
 508771c:	8180041e 	bne	r16,r6,5087730 <_malloc_r+0x270>
 5087720:	0000ca06 	br	5087a4c <_malloc_r+0x58c>
 5087724:	10001c0e 	bge	r2,zero,5087798 <_malloc_r+0x2d8>
 5087728:	84000317 	ldw	r16,12(r16)
 508772c:	8180c726 	beq	r16,r6,5087a4c <_malloc_r+0x58c>
 5087730:	80c00117 	ldw	r3,4(r16)
 5087734:	1a06703a 	and	r3,r3,r8
 5087738:	1c45c83a 	sub	r2,r3,r17
 508773c:	38bff90e 	bge	r7,r2,5087724 <_malloc_r+0x264>
 5087740:	81000317 	ldw	r4,12(r16)
 5087744:	81400217 	ldw	r5,8(r16)
 5087748:	8447883a 	add	r3,r16,r17
 508774c:	8c400054 	ori	r17,r17,1
 5087750:	29000315 	stw	r4,12(r5)
 5087754:	21400215 	stw	r5,8(r4)
 5087758:	84400115 	stw	r17,4(r16)
 508775c:	1889883a 	add	r4,r3,r2
 5087760:	11400054 	ori	r5,r2,1
 5087764:	98c00515 	stw	r3,20(r19)
 5087768:	98c00415 	stw	r3,16(r19)
 508776c:	20800015 	stw	r2,0(r4)
 5087770:	1a400315 	stw	r9,12(r3)
 5087774:	1a400215 	stw	r9,8(r3)
 5087778:	19400115 	stw	r5,4(r3)
 508777c:	9009883a 	mov	r4,r18
 5087780:	508c2ac0 	call	508c2ac <__malloc_unlock>
 5087784:	80800204 	addi	r2,r16,8
 5087788:	003f7b06 	br	5087578 <_malloc_r+0xb8>
 508778c:	8808d0fa 	srli	r4,r17,3
 5087790:	210b883a 	add	r5,r4,r4
 5087794:	003f9106 	br	50875dc <_malloc_r+0x11c>
 5087798:	80c7883a 	add	r3,r16,r3
 508779c:	19400117 	ldw	r5,4(r3)
 50877a0:	80800317 	ldw	r2,12(r16)
 50877a4:	81000217 	ldw	r4,8(r16)
 50877a8:	29400054 	ori	r5,r5,1
 50877ac:	19400115 	stw	r5,4(r3)
 50877b0:	20800315 	stw	r2,12(r4)
 50877b4:	11000215 	stw	r4,8(r2)
 50877b8:	9009883a 	mov	r4,r18
 50877bc:	508c2ac0 	call	508c2ac <__malloc_unlock>
 50877c0:	80800204 	addi	r2,r16,8
 50877c4:	003f6c06 	br	5087578 <_malloc_r+0xb8>
 50877c8:	8085883a 	add	r2,r16,r2
 50877cc:	10c00117 	ldw	r3,4(r2)
 50877d0:	9009883a 	mov	r4,r18
 50877d4:	18c00054 	ori	r3,r3,1
 50877d8:	10c00115 	stw	r3,4(r2)
 50877dc:	508c2ac0 	call	508c2ac <__malloc_unlock>
 50877e0:	80800204 	addi	r2,r16,8
 50877e4:	003f6406 	br	5087578 <_malloc_r+0xb8>
 50877e8:	9c000217 	ldw	r16,8(r19)
 50877ec:	00bfff04 	movi	r2,-4
 50877f0:	85400117 	ldw	r21,4(r16)
 50877f4:	a8aa703a 	and	r21,r21,r2
 50877f8:	ac400336 	bltu	r21,r17,5087808 <_malloc_r+0x348>
 50877fc:	ac45c83a 	sub	r2,r21,r17
 5087800:	00c003c4 	movi	r3,15
 5087804:	18805316 	blt	r3,r2,5087954 <_malloc_r+0x494>
 5087808:	d5e6b117 	ldw	r23,-25916(gp)
 508780c:	d0e00317 	ldw	r3,-32756(gp)
 5087810:	00bfffc4 	movi	r2,-1
 5087814:	8579883a 	add	fp,r16,r21
 5087818:	8def883a 	add	r23,r17,r23
 508781c:	1880d226 	beq	r3,r2,5087b68 <_malloc_r+0x6a8>
 5087820:	bdc403c4 	addi	r23,r23,4111
 5087824:	00bc0004 	movi	r2,-4096
 5087828:	b8ae703a 	and	r23,r23,r2
 508782c:	9009883a 	mov	r4,r18
 5087830:	b80b883a 	mov	r5,r23
 5087834:	50896400 	call	5089640 <_sbrk_r>
 5087838:	1029883a 	mov	r20,r2
 508783c:	00bfffc4 	movi	r2,-1
 5087840:	a080d126 	beq	r20,r2,5087b88 <_malloc_r+0x6c8>
 5087844:	a7009f36 	bltu	r20,fp,5087ac4 <_malloc_r+0x604>
 5087848:	05814274 	movhi	r22,1289
 508784c:	b58a4e04 	addi	r22,r22,10552
 5087850:	b0800017 	ldw	r2,0(r22)
 5087854:	b885883a 	add	r2,r23,r2
 5087858:	b0800015 	stw	r2,0(r22)
 508785c:	e500cf26 	beq	fp,r20,5087b9c <_malloc_r+0x6dc>
 5087860:	d1200317 	ldw	r4,-32756(gp)
 5087864:	00ffffc4 	movi	r3,-1
 5087868:	20c0e026 	beq	r4,r3,5087bec <_malloc_r+0x72c>
 508786c:	a739c83a 	sub	fp,r20,fp
 5087870:	1705883a 	add	r2,r2,fp
 5087874:	b0800015 	stw	r2,0(r22)
 5087878:	a08001cc 	andi	r2,r20,7
 508787c:	1000a526 	beq	r2,zero,5087b14 <_malloc_r+0x654>
 5087880:	a0a9c83a 	sub	r20,r20,r2
 5087884:	00c40204 	movi	r3,4104
 5087888:	a5000204 	addi	r20,r20,8
 508788c:	1885c83a 	sub	r2,r3,r2
 5087890:	a5c7883a 	add	r3,r20,r23
 5087894:	18c3ffcc 	andi	r3,r3,4095
 5087898:	10efc83a 	sub	r23,r2,r3
 508789c:	9009883a 	mov	r4,r18
 50878a0:	b80b883a 	mov	r5,r23
 50878a4:	50896400 	call	5089640 <_sbrk_r>
 50878a8:	00ffffc4 	movi	r3,-1
 50878ac:	10c0cc26 	beq	r2,r3,5087be0 <_malloc_r+0x720>
 50878b0:	1505c83a 	sub	r2,r2,r20
 50878b4:	b887883a 	add	r3,r23,r2
 50878b8:	18c00054 	ori	r3,r3,1
 50878bc:	b0800017 	ldw	r2,0(r22)
 50878c0:	9d000215 	stw	r20,8(r19)
 50878c4:	a0c00115 	stw	r3,4(r20)
 50878c8:	b885883a 	add	r2,r23,r2
 50878cc:	b0800015 	stw	r2,0(r22)
 50878d0:	84c00e26 	beq	r16,r19,508790c <_malloc_r+0x44c>
 50878d4:	00c003c4 	movi	r3,15
 50878d8:	1d40902e 	bgeu	r3,r21,5087b1c <_malloc_r+0x65c>
 50878dc:	ad7ffd04 	addi	r21,r21,-12
 50878e0:	013ffe04 	movi	r4,-8
 50878e4:	a908703a 	and	r4,r21,r4
 50878e8:	810b883a 	add	r5,r16,r4
 50878ec:	01800144 	movi	r6,5
 50878f0:	29800115 	stw	r6,4(r5)
 50878f4:	29800215 	stw	r6,8(r5)
 50878f8:	81400117 	ldw	r5,4(r16)
 50878fc:	2940004c 	andi	r5,r5,1
 5087900:	214ab03a 	or	r5,r4,r5
 5087904:	81400115 	stw	r5,4(r16)
 5087908:	1900ae36 	bltu	r3,r4,5087bc4 <_malloc_r+0x704>
 508790c:	d0e6b017 	ldw	r3,-25920(gp)
 5087910:	1880012e 	bgeu	r3,r2,5087918 <_malloc_r+0x458>
 5087914:	d0a6b015 	stw	r2,-25920(gp)
 5087918:	d0e6af17 	ldw	r3,-25924(gp)
 508791c:	9c000217 	ldw	r16,8(r19)
 5087920:	1880012e 	bgeu	r3,r2,5087928 <_malloc_r+0x468>
 5087924:	d0a6af15 	stw	r2,-25924(gp)
 5087928:	80c00117 	ldw	r3,4(r16)
 508792c:	00bfff04 	movi	r2,-4
 5087930:	1886703a 	and	r3,r3,r2
 5087934:	1c45c83a 	sub	r2,r3,r17
 5087938:	1c400236 	bltu	r3,r17,5087944 <_malloc_r+0x484>
 508793c:	00c003c4 	movi	r3,15
 5087940:	18800416 	blt	r3,r2,5087954 <_malloc_r+0x494>
 5087944:	9009883a 	mov	r4,r18
 5087948:	508c2ac0 	call	508c2ac <__malloc_unlock>
 508794c:	0005883a 	mov	r2,zero
 5087950:	003f0906 	br	5087578 <_malloc_r+0xb8>
 5087954:	88c00054 	ori	r3,r17,1
 5087958:	10800054 	ori	r2,r2,1
 508795c:	80c00115 	stw	r3,4(r16)
 5087960:	8463883a 	add	r17,r16,r17
 5087964:	88800115 	stw	r2,4(r17)
 5087968:	9009883a 	mov	r4,r18
 508796c:	9c400215 	stw	r17,8(r19)
 5087970:	508c2ac0 	call	508c2ac <__malloc_unlock>
 5087974:	80800204 	addi	r2,r16,8
 5087978:	003eff06 	br	5087578 <_malloc_r+0xb8>
 508797c:	00800504 	movi	r2,20
 5087980:	1100492e 	bgeu	r2,r4,5087aa8 <_malloc_r+0x5e8>
 5087984:	00801504 	movi	r2,84
 5087988:	11005c36 	bltu	r2,r4,5087afc <_malloc_r+0x63c>
 508798c:	8808d33a 	srli	r4,r17,12
 5087990:	21001b84 	addi	r4,r4,110
 5087994:	210b883a 	add	r5,r4,r4
 5087998:	003f1006 	br	50875dc <_malloc_r+0x11c>
 508799c:	1006d27a 	srli	r3,r2,9
 50879a0:	01400104 	movi	r5,4
 50879a4:	28c0432e 	bgeu	r5,r3,5087ab4 <_malloc_r+0x5f4>
 50879a8:	01400504 	movi	r5,20
 50879ac:	28c07036 	bltu	r5,r3,5087b70 <_malloc_r+0x6b0>
 50879b0:	194016c4 	addi	r5,r3,91
 50879b4:	294d883a 	add	r6,r5,r5
 50879b8:	318d883a 	add	r6,r6,r6
 50879bc:	318d883a 	add	r6,r6,r6
 50879c0:	998d883a 	add	r6,r19,r6
 50879c4:	30c00217 	ldw	r3,8(r6)
 50879c8:	01c14274 	movhi	r7,1289
 50879cc:	39fe0704 	addi	r7,r7,-2020
 50879d0:	19805726 	beq	r3,r6,5087b30 <_malloc_r+0x670>
 50879d4:	01ffff04 	movi	r7,-4
 50879d8:	19400117 	ldw	r5,4(r3)
 50879dc:	29ca703a 	and	r5,r5,r7
 50879e0:	1140022e 	bgeu	r2,r5,50879ec <_malloc_r+0x52c>
 50879e4:	18c00217 	ldw	r3,8(r3)
 50879e8:	30fffb1e 	bne	r6,r3,50879d8 <_malloc_r+0x518>
 50879ec:	19400317 	ldw	r5,12(r3)
 50879f0:	98800117 	ldw	r2,4(r19)
 50879f4:	81400315 	stw	r5,12(r16)
 50879f8:	80c00215 	stw	r3,8(r16)
 50879fc:	2c000215 	stw	r16,8(r5)
 5087a00:	1c000315 	stw	r16,12(r3)
 5087a04:	003f2b06 	br	50876b4 <_malloc_r+0x1f4>
 5087a08:	8445883a 	add	r2,r16,r17
 5087a0c:	8c400054 	ori	r17,r17,1
 5087a10:	18800515 	stw	r2,20(r3)
 5087a14:	18800415 	stw	r2,16(r3)
 5087a18:	29000054 	ori	r4,r5,1
 5087a1c:	1147883a 	add	r3,r2,r5
 5087a20:	84400115 	stw	r17,4(r16)
 5087a24:	11000115 	stw	r4,4(r2)
 5087a28:	12400315 	stw	r9,12(r2)
 5087a2c:	12400215 	stw	r9,8(r2)
 5087a30:	19400015 	stw	r5,0(r3)
 5087a34:	9009883a 	mov	r4,r18
 5087a38:	508c2ac0 	call	508c2ac <__malloc_unlock>
 5087a3c:	80800204 	addi	r2,r16,8
 5087a40:	003ecd06 	br	5087578 <_malloc_r+0xb8>
 5087a44:	18800117 	ldw	r2,4(r3)
 5087a48:	003f1a06 	br	50876b4 <_malloc_r+0x1f4>
 5087a4c:	5ac00044 	addi	r11,r11,1
 5087a50:	588000cc 	andi	r2,r11,3
 5087a54:	52800204 	addi	r10,r10,8
 5087a58:	103f2e1e 	bne	r2,zero,5087714 <_malloc_r+0x254>
 5087a5c:	20c000cc 	andi	r3,r4,3
 5087a60:	60bffe04 	addi	r2,r12,-8
 5087a64:	18006f26 	beq	r3,zero,5087c24 <_malloc_r+0x764>
 5087a68:	63000017 	ldw	r12,0(r12)
 5087a6c:	213fffc4 	addi	r4,r4,-1
 5087a70:	60bffa26 	beq	r12,r2,5087a5c <_malloc_r+0x59c>
 5087a74:	98800117 	ldw	r2,4(r19)
 5087a78:	294b883a 	add	r5,r5,r5
 5087a7c:	117f5a36 	bltu	r2,r5,50877e8 <_malloc_r+0x328>
 5087a80:	283f5926 	beq	r5,zero,50877e8 <_malloc_r+0x328>
 5087a84:	1146703a 	and	r3,r2,r5
 5087a88:	18001626 	beq	r3,zero,5087ae4 <_malloc_r+0x624>
 5087a8c:	5809883a 	mov	r4,r11
 5087a90:	003f1a06 	br	50876fc <_malloc_r+0x23c>
 5087a94:	80800204 	addi	r2,r16,8
 5087a98:	84000517 	ldw	r16,20(r16)
 5087a9c:	143ea81e 	bne	r2,r16,5087540 <_malloc_r+0x80>
 5087aa0:	21000084 	addi	r4,r4,2
 5087aa4:	003ee306 	br	5087634 <_malloc_r+0x174>
 5087aa8:	210016c4 	addi	r4,r4,91
 5087aac:	210b883a 	add	r5,r4,r4
 5087ab0:	003eca06 	br	50875dc <_malloc_r+0x11c>
 5087ab4:	100ad1ba 	srli	r5,r2,6
 5087ab8:	29400e04 	addi	r5,r5,56
 5087abc:	294d883a 	add	r6,r5,r5
 5087ac0:	003fbd06 	br	50879b8 <_malloc_r+0x4f8>
 5087ac4:	84ff6026 	beq	r16,r19,5087848 <_malloc_r+0x388>
 5087ac8:	00814274 	movhi	r2,1289
 5087acc:	10be0704 	addi	r2,r2,-2020
 5087ad0:	14000217 	ldw	r16,8(r2)
 5087ad4:	00bfff04 	movi	r2,-4
 5087ad8:	80c00117 	ldw	r3,4(r16)
 5087adc:	1886703a 	and	r3,r3,r2
 5087ae0:	003f9406 	br	5087934 <_malloc_r+0x474>
 5087ae4:	294b883a 	add	r5,r5,r5
 5087ae8:	1146703a 	and	r3,r2,r5
 5087aec:	5ac00104 	addi	r11,r11,4
 5087af0:	183ffc26 	beq	r3,zero,5087ae4 <_malloc_r+0x624>
 5087af4:	5809883a 	mov	r4,r11
 5087af8:	003f0006 	br	50876fc <_malloc_r+0x23c>
 5087afc:	00805504 	movi	r2,340
 5087b00:	11001336 	bltu	r2,r4,5087b50 <_malloc_r+0x690>
 5087b04:	8808d3fa 	srli	r4,r17,15
 5087b08:	21001dc4 	addi	r4,r4,119
 5087b0c:	210b883a 	add	r5,r4,r4
 5087b10:	003eb206 	br	50875dc <_malloc_r+0x11c>
 5087b14:	00840004 	movi	r2,4096
 5087b18:	003f5d06 	br	5087890 <_malloc_r+0x3d0>
 5087b1c:	00800044 	movi	r2,1
 5087b20:	a0800115 	stw	r2,4(r20)
 5087b24:	a021883a 	mov	r16,r20
 5087b28:	0007883a 	mov	r3,zero
 5087b2c:	003f8106 	br	5087934 <_malloc_r+0x474>
 5087b30:	280bd0ba 	srai	r5,r5,2
 5087b34:	01800044 	movi	r6,1
 5087b38:	38800117 	ldw	r2,4(r7)
 5087b3c:	314c983a 	sll	r6,r6,r5
 5087b40:	180b883a 	mov	r5,r3
 5087b44:	3084b03a 	or	r2,r6,r2
 5087b48:	38800115 	stw	r2,4(r7)
 5087b4c:	003fa906 	br	50879f4 <_malloc_r+0x534>
 5087b50:	00815504 	movi	r2,1364
 5087b54:	11001836 	bltu	r2,r4,5087bb8 <_malloc_r+0x6f8>
 5087b58:	8808d4ba 	srli	r4,r17,18
 5087b5c:	21001f04 	addi	r4,r4,124
 5087b60:	210b883a 	add	r5,r4,r4
 5087b64:	003e9d06 	br	50875dc <_malloc_r+0x11c>
 5087b68:	bdc00404 	addi	r23,r23,16
 5087b6c:	003f2f06 	br	508782c <_malloc_r+0x36c>
 5087b70:	01401504 	movi	r5,84
 5087b74:	28c01f36 	bltu	r5,r3,5087bf4 <_malloc_r+0x734>
 5087b78:	100ad33a 	srli	r5,r2,12
 5087b7c:	29401b84 	addi	r5,r5,110
 5087b80:	294d883a 	add	r6,r5,r5
 5087b84:	003f8c06 	br	50879b8 <_malloc_r+0x4f8>
 5087b88:	9c000217 	ldw	r16,8(r19)
 5087b8c:	00bfff04 	movi	r2,-4
 5087b90:	80c00117 	ldw	r3,4(r16)
 5087b94:	1886703a 	and	r3,r3,r2
 5087b98:	003f6606 	br	5087934 <_malloc_r+0x474>
 5087b9c:	e0c3ffcc 	andi	r3,fp,4095
 5087ba0:	183f2f1e 	bne	r3,zero,5087860 <_malloc_r+0x3a0>
 5087ba4:	98c00217 	ldw	r3,8(r19)
 5087ba8:	bd49883a 	add	r4,r23,r21
 5087bac:	21000054 	ori	r4,r4,1
 5087bb0:	19000115 	stw	r4,4(r3)
 5087bb4:	003f5506 	br	508790c <_malloc_r+0x44c>
 5087bb8:	01403f04 	movi	r5,252
 5087bbc:	01001f84 	movi	r4,126
 5087bc0:	003e8606 	br	50875dc <_malloc_r+0x11c>
 5087bc4:	9009883a 	mov	r4,r18
 5087bc8:	81400204 	addi	r5,r16,8
 5087bcc:	50869280 	call	5086928 <_free_r>
 5087bd0:	00814274 	movhi	r2,1289
 5087bd4:	108a4e04 	addi	r2,r2,10552
 5087bd8:	10800017 	ldw	r2,0(r2)
 5087bdc:	003f4b06 	br	508790c <_malloc_r+0x44c>
 5087be0:	00c00044 	movi	r3,1
 5087be4:	002f883a 	mov	r23,zero
 5087be8:	003f3406 	br	50878bc <_malloc_r+0x3fc>
 5087bec:	d5200315 	stw	r20,-32756(gp)
 5087bf0:	003f2106 	br	5087878 <_malloc_r+0x3b8>
 5087bf4:	01405504 	movi	r5,340
 5087bf8:	28c00436 	bltu	r5,r3,5087c0c <_malloc_r+0x74c>
 5087bfc:	100ad3fa 	srli	r5,r2,15
 5087c00:	29401dc4 	addi	r5,r5,119
 5087c04:	294d883a 	add	r6,r5,r5
 5087c08:	003f6b06 	br	50879b8 <_malloc_r+0x4f8>
 5087c0c:	01415504 	movi	r5,1364
 5087c10:	28c00936 	bltu	r5,r3,5087c38 <_malloc_r+0x778>
 5087c14:	100ad4ba 	srli	r5,r2,18
 5087c18:	29401f04 	addi	r5,r5,124
 5087c1c:	294d883a 	add	r6,r5,r5
 5087c20:	003f6506 	br	50879b8 <_malloc_r+0x4f8>
 5087c24:	98800117 	ldw	r2,4(r19)
 5087c28:	0146303a 	nor	r3,zero,r5
 5087c2c:	1884703a 	and	r2,r3,r2
 5087c30:	98800115 	stw	r2,4(r19)
 5087c34:	003f9006 	br	5087a78 <_malloc_r+0x5b8>
 5087c38:	01803f04 	movi	r6,252
 5087c3c:	01401f84 	movi	r5,126
 5087c40:	003f5d06 	br	50879b8 <_malloc_r+0x4f8>

05087c44 <memchr>:
 5087c44:	008000c4 	movi	r2,3
 5087c48:	29403fcc 	andi	r5,r5,255
 5087c4c:	1180282e 	bgeu	r2,r6,5087cf0 <memchr+0xac>
 5087c50:	2086703a 	and	r3,r4,r2
 5087c54:	1800351e 	bne	r3,zero,5087d2c <memchr+0xe8>
 5087c58:	2816923a 	slli	r11,r5,8
 5087c5c:	2093883a 	add	r9,r4,r2
 5087c60:	22000084 	addi	r8,r4,2
 5087c64:	5957883a 	add	r11,r11,r5
 5087c68:	5816923a 	slli	r11,r11,8
 5087c6c:	20c00044 	addi	r3,r4,1
 5087c70:	037fbff4 	movhi	r13,65279
 5087c74:	6b7fbfc4 	addi	r13,r13,-257
 5087c78:	5957883a 	add	r11,r11,r5
 5087c7c:	5816923a 	slli	r11,r11,8
 5087c80:	03202074 	movhi	r12,32897
 5087c84:	63202004 	addi	r12,r12,-32640
 5087c88:	101d883a 	mov	r14,r2
 5087c8c:	5957883a 	add	r11,r11,r5
 5087c90:	21c00017 	ldw	r7,0(r4)
 5087c94:	31bfff04 	addi	r6,r6,-4
 5087c98:	1805883a 	mov	r2,r3
 5087c9c:	3acef03a 	xor	r7,r7,r11
 5087ca0:	3b55883a 	add	r10,r7,r13
 5087ca4:	01ce303a 	nor	r7,zero,r7
 5087ca8:	51ce703a 	and	r7,r10,r7
 5087cac:	3b0e703a 	and	r7,r7,r12
 5087cb0:	38000a26 	beq	r7,zero,5087cdc <memchr+0x98>
 5087cb4:	21c00003 	ldbu	r7,0(r4)
 5087cb8:	39401e26 	beq	r7,r5,5087d34 <memchr+0xf0>
 5087cbc:	19c00003 	ldbu	r7,0(r3)
 5087cc0:	39401926 	beq	r7,r5,5087d28 <memchr+0xe4>
 5087cc4:	41c00003 	ldbu	r7,0(r8)
 5087cc8:	4005883a 	mov	r2,r8
 5087ccc:	39401626 	beq	r7,r5,5087d28 <memchr+0xe4>
 5087cd0:	49c00003 	ldbu	r7,0(r9)
 5087cd4:	4805883a 	mov	r2,r9
 5087cd8:	39401326 	beq	r7,r5,5087d28 <memchr+0xe4>
 5087cdc:	21000104 	addi	r4,r4,4
 5087ce0:	4a400104 	addi	r9,r9,4
 5087ce4:	42000104 	addi	r8,r8,4
 5087ce8:	18c00104 	addi	r3,r3,4
 5087cec:	71bfe836 	bltu	r14,r6,5087c90 <memchr+0x4c>
 5087cf0:	2005883a 	mov	r2,r4
 5087cf4:	30000a26 	beq	r6,zero,5087d20 <memchr+0xdc>
 5087cf8:	10c00003 	ldbu	r3,0(r2)
 5087cfc:	19400a26 	beq	r3,r5,5087d28 <memchr+0xe4>
 5087d00:	10c00044 	addi	r3,r2,1
 5087d04:	118d883a 	add	r6,r2,r6
 5087d08:	00000306 	br	5087d18 <memchr+0xd4>
 5087d0c:	11000003 	ldbu	r4,0(r2)
 5087d10:	18c00044 	addi	r3,r3,1
 5087d14:	21400426 	beq	r4,r5,5087d28 <memchr+0xe4>
 5087d18:	1805883a 	mov	r2,r3
 5087d1c:	19bffb1e 	bne	r3,r6,5087d0c <memchr+0xc8>
 5087d20:	0005883a 	mov	r2,zero
 5087d24:	f800283a 	ret
 5087d28:	f800283a 	ret
 5087d2c:	2005883a 	mov	r2,r4
 5087d30:	003ff106 	br	5087cf8 <memchr+0xb4>
 5087d34:	2005883a 	mov	r2,r4
 5087d38:	f800283a 	ret

05087d3c <memcpy>:
 5087d3c:	00c003c4 	movi	r3,15
 5087d40:	2005883a 	mov	r2,r4
 5087d44:	3009883a 	mov	r4,r6
 5087d48:	1980032e 	bgeu	r3,r6,5087d58 <memcpy+0x1c>
 5087d4c:	2886b03a 	or	r3,r5,r2
 5087d50:	18c000cc 	andi	r3,r3,3
 5087d54:	18000926 	beq	r3,zero,5087d7c <memcpy+0x40>
 5087d58:	1007883a 	mov	r3,r2
 5087d5c:	290f883a 	add	r7,r5,r4
 5087d60:	20000526 	beq	r4,zero,5087d78 <memcpy+0x3c>
 5087d64:	29800003 	ldbu	r6,0(r5)
 5087d68:	18c00044 	addi	r3,r3,1
 5087d6c:	29400044 	addi	r5,r5,1
 5087d70:	19bfffc5 	stb	r6,-1(r3)
 5087d74:	29fffb1e 	bne	r5,r7,5087d64 <memcpy+0x28>
 5087d78:	f800283a 	ret
 5087d7c:	327ffc04 	addi	r9,r6,-16
 5087d80:	4812d13a 	srli	r9,r9,4
 5087d84:	11000404 	addi	r4,r2,16
 5087d88:	1007883a 	mov	r3,r2
 5087d8c:	4810913a 	slli	r8,r9,4
 5087d90:	280f883a 	mov	r7,r5
 5087d94:	2209883a 	add	r4,r4,r8
 5087d98:	3a000017 	ldw	r8,0(r7)
 5087d9c:	18c00404 	addi	r3,r3,16
 5087da0:	39c00404 	addi	r7,r7,16
 5087da4:	1a3ffc15 	stw	r8,-16(r3)
 5087da8:	3a3ffd17 	ldw	r8,-12(r7)
 5087dac:	1a3ffd15 	stw	r8,-12(r3)
 5087db0:	3a3ffe17 	ldw	r8,-8(r7)
 5087db4:	1a3ffe15 	stw	r8,-8(r3)
 5087db8:	3a3fff17 	ldw	r8,-4(r7)
 5087dbc:	1a3fff15 	stw	r8,-4(r3)
 5087dc0:	193ff51e 	bne	r3,r4,5087d98 <memcpy+0x5c>
 5087dc4:	49c00044 	addi	r7,r9,1
 5087dc8:	380e913a 	slli	r7,r7,4
 5087dcc:	310003cc 	andi	r4,r6,15
 5087dd0:	018000c4 	movi	r6,3
 5087dd4:	11c7883a 	add	r3,r2,r7
 5087dd8:	29cb883a 	add	r5,r5,r7
 5087ddc:	313fdf2e 	bgeu	r6,r4,5087d5c <memcpy+0x20>
 5087de0:	213fff04 	addi	r4,r4,-4
 5087de4:	2014d0ba 	srli	r10,r4,2
 5087de8:	1a400104 	addi	r9,r3,4
 5087dec:	180d883a 	mov	r6,r3
 5087df0:	528f883a 	add	r7,r10,r10
 5087df4:	39cf883a 	add	r7,r7,r7
 5087df8:	49d3883a 	add	r9,r9,r7
 5087dfc:	280f883a 	mov	r7,r5
 5087e00:	3a000017 	ldw	r8,0(r7)
 5087e04:	31800104 	addi	r6,r6,4
 5087e08:	39c00104 	addi	r7,r7,4
 5087e0c:	323fff15 	stw	r8,-4(r6)
 5087e10:	327ffb1e 	bne	r6,r9,5087e00 <memcpy+0xc4>
 5087e14:	51800044 	addi	r6,r10,1
 5087e18:	52bfff24 	muli	r10,r10,-4
 5087e1c:	318d883a 	add	r6,r6,r6
 5087e20:	318d883a 	add	r6,r6,r6
 5087e24:	5109883a 	add	r4,r10,r4
 5087e28:	298b883a 	add	r5,r5,r6
 5087e2c:	1987883a 	add	r3,r3,r6
 5087e30:	003fca06 	br	5087d5c <memcpy+0x20>

05087e34 <memmove>:
 5087e34:	2005883a 	mov	r2,r4
 5087e38:	300f883a 	mov	r7,r6
 5087e3c:	29000b2e 	bgeu	r5,r4,5087e6c <memmove+0x38>
 5087e40:	2987883a 	add	r3,r5,r6
 5087e44:	20c0092e 	bgeu	r4,r3,5087e6c <memmove+0x38>
 5087e48:	218b883a 	add	r5,r4,r6
 5087e4c:	198fc83a 	sub	r7,r3,r6
 5087e50:	30003f26 	beq	r6,zero,5087f50 <memmove+0x11c>
 5087e54:	18ffffc4 	addi	r3,r3,-1
 5087e58:	19000003 	ldbu	r4,0(r3)
 5087e5c:	297fffc4 	addi	r5,r5,-1
 5087e60:	29000005 	stb	r4,0(r5)
 5087e64:	19fffb1e 	bne	r3,r7,5087e54 <memmove+0x20>
 5087e68:	f800283a 	ret
 5087e6c:	00c003c4 	movi	r3,15
 5087e70:	1980382e 	bgeu	r3,r6,5087f54 <memmove+0x120>
 5087e74:	2886b03a 	or	r3,r5,r2
 5087e78:	18c000cc 	andi	r3,r3,3
 5087e7c:	1800351e 	bne	r3,zero,5087f54 <memmove+0x120>
 5087e80:	327ffc04 	addi	r9,r6,-16
 5087e84:	4812d13a 	srli	r9,r9,4
 5087e88:	12000404 	addi	r8,r2,16
 5087e8c:	1007883a 	mov	r3,r2
 5087e90:	4808913a 	slli	r4,r9,4
 5087e94:	280f883a 	mov	r7,r5
 5087e98:	4111883a 	add	r8,r8,r4
 5087e9c:	39000017 	ldw	r4,0(r7)
 5087ea0:	18c00404 	addi	r3,r3,16
 5087ea4:	39c00404 	addi	r7,r7,16
 5087ea8:	193ffc15 	stw	r4,-16(r3)
 5087eac:	393ffd17 	ldw	r4,-12(r7)
 5087eb0:	193ffd15 	stw	r4,-12(r3)
 5087eb4:	393ffe17 	ldw	r4,-8(r7)
 5087eb8:	193ffe15 	stw	r4,-8(r3)
 5087ebc:	393fff17 	ldw	r4,-4(r7)
 5087ec0:	193fff15 	stw	r4,-4(r3)
 5087ec4:	1a3ff51e 	bne	r3,r8,5087e9c <memmove+0x68>
 5087ec8:	49000044 	addi	r4,r9,1
 5087ecc:	2008913a 	slli	r4,r4,4
 5087ed0:	31c003cc 	andi	r7,r6,15
 5087ed4:	1107883a 	add	r3,r2,r4
 5087ed8:	290b883a 	add	r5,r5,r4
 5087edc:	010000c4 	movi	r4,3
 5087ee0:	21c0142e 	bgeu	r4,r7,5087f34 <memmove+0x100>
 5087ee4:	39ffff04 	addi	r7,r7,-4
 5087ee8:	3814d0ba 	srli	r10,r7,2
 5087eec:	1a400104 	addi	r9,r3,4
 5087ef0:	180d883a 	mov	r6,r3
 5087ef4:	5289883a 	add	r4,r10,r10
 5087ef8:	2109883a 	add	r4,r4,r4
 5087efc:	4913883a 	add	r9,r9,r4
 5087f00:	2809883a 	mov	r4,r5
 5087f04:	22000017 	ldw	r8,0(r4)
 5087f08:	31800104 	addi	r6,r6,4
 5087f0c:	21000104 	addi	r4,r4,4
 5087f10:	323fff15 	stw	r8,-4(r6)
 5087f14:	327ffb1e 	bne	r6,r9,5087f04 <memmove+0xd0>
 5087f18:	51000044 	addi	r4,r10,1
 5087f1c:	52bfff24 	muli	r10,r10,-4
 5087f20:	2109883a 	add	r4,r4,r4
 5087f24:	2109883a 	add	r4,r4,r4
 5087f28:	51cf883a 	add	r7,r10,r7
 5087f2c:	290b883a 	add	r5,r5,r4
 5087f30:	1907883a 	add	r3,r3,r4
 5087f34:	38000626 	beq	r7,zero,5087f50 <memmove+0x11c>
 5087f38:	19cf883a 	add	r7,r3,r7
 5087f3c:	29800003 	ldbu	r6,0(r5)
 5087f40:	18c00044 	addi	r3,r3,1
 5087f44:	29400044 	addi	r5,r5,1
 5087f48:	19bfffc5 	stb	r6,-1(r3)
 5087f4c:	19fffb1e 	bne	r3,r7,5087f3c <memmove+0x108>
 5087f50:	f800283a 	ret
 5087f54:	1007883a 	mov	r3,r2
 5087f58:	003ff606 	br	5087f34 <memmove+0x100>

05087f5c <memset>:
 5087f5c:	00c000c4 	movi	r3,3
 5087f60:	2005883a 	mov	r2,r4
 5087f64:	29403fcc 	andi	r5,r5,255
 5087f68:	19802d2e 	bgeu	r3,r6,5088020 <memset+0xc4>
 5087f6c:	20c6703a 	and	r3,r4,r3
 5087f70:	18002e1e 	bne	r3,zero,508802c <memset+0xd0>
 5087f74:	2806923a 	slli	r3,r5,8
 5087f78:	010003c4 	movi	r4,15
 5087f7c:	3011883a 	mov	r8,r6
 5087f80:	1946b03a 	or	r3,r3,r5
 5087f84:	180e943a 	slli	r7,r3,16
 5087f88:	38ceb03a 	or	r7,r7,r3
 5087f8c:	1007883a 	mov	r3,r2
 5087f90:	21800f2e 	bgeu	r4,r6,5087fd0 <memset+0x74>
 5087f94:	19c00015 	stw	r7,0(r3)
 5087f98:	19c00115 	stw	r7,4(r3)
 5087f9c:	19c00215 	stw	r7,8(r3)
 5087fa0:	19c00315 	stw	r7,12(r3)
 5087fa4:	423ffc04 	addi	r8,r8,-16
 5087fa8:	18c00404 	addi	r3,r3,16
 5087fac:	223ff936 	bltu	r4,r8,5087f94 <memset+0x38>
 5087fb0:	30fffc04 	addi	r3,r6,-16
 5087fb4:	1806d13a 	srli	r3,r3,4
 5087fb8:	318003cc 	andi	r6,r6,15
 5087fbc:	010000c4 	movi	r4,3
 5087fc0:	18c00044 	addi	r3,r3,1
 5087fc4:	1806913a 	slli	r3,r3,4
 5087fc8:	10c7883a 	add	r3,r2,r3
 5087fcc:	21800e2e 	bgeu	r4,r6,5088008 <memset+0xac>
 5087fd0:	1813883a 	mov	r9,r3
 5087fd4:	3011883a 	mov	r8,r6
 5087fd8:	010000c4 	movi	r4,3
 5087fdc:	49c00015 	stw	r7,0(r9)
 5087fe0:	423fff04 	addi	r8,r8,-4
 5087fe4:	4a400104 	addi	r9,r9,4
 5087fe8:	223ffc36 	bltu	r4,r8,5087fdc <memset+0x80>
 5087fec:	313fff04 	addi	r4,r6,-4
 5087ff0:	2008d0ba 	srli	r4,r4,2
 5087ff4:	318000cc 	andi	r6,r6,3
 5087ff8:	21000044 	addi	r4,r4,1
 5087ffc:	2109883a 	add	r4,r4,r4
 5088000:	2109883a 	add	r4,r4,r4
 5088004:	1907883a 	add	r3,r3,r4
 5088008:	30000a26 	beq	r6,zero,5088034 <memset+0xd8>
 508800c:	198d883a 	add	r6,r3,r6
 5088010:	19400005 	stb	r5,0(r3)
 5088014:	18c00044 	addi	r3,r3,1
 5088018:	19bffd1e 	bne	r3,r6,5088010 <memset+0xb4>
 508801c:	f800283a 	ret
 5088020:	2007883a 	mov	r3,r4
 5088024:	303ff91e 	bne	r6,zero,508800c <memset+0xb0>
 5088028:	00000206 	br	5088034 <memset+0xd8>
 508802c:	2007883a 	mov	r3,r4
 5088030:	003ff606 	br	508800c <memset+0xb0>
 5088034:	f800283a 	ret

05088038 <_Balloc>:
 5088038:	20801317 	ldw	r2,76(r4)
 508803c:	defffc04 	addi	sp,sp,-16
 5088040:	dc400115 	stw	r17,4(sp)
 5088044:	dc000015 	stw	r16,0(sp)
 5088048:	dfc00315 	stw	ra,12(sp)
 508804c:	dc800215 	stw	r18,8(sp)
 5088050:	2023883a 	mov	r17,r4
 5088054:	2821883a 	mov	r16,r5
 5088058:	10000f26 	beq	r2,zero,5088098 <_Balloc+0x60>
 508805c:	8407883a 	add	r3,r16,r16
 5088060:	18c7883a 	add	r3,r3,r3
 5088064:	10c7883a 	add	r3,r2,r3
 5088068:	18800017 	ldw	r2,0(r3)
 508806c:	10001126 	beq	r2,zero,50880b4 <_Balloc+0x7c>
 5088070:	11000017 	ldw	r4,0(r2)
 5088074:	19000015 	stw	r4,0(r3)
 5088078:	10000415 	stw	zero,16(r2)
 508807c:	10000315 	stw	zero,12(r2)
 5088080:	dfc00317 	ldw	ra,12(sp)
 5088084:	dc800217 	ldw	r18,8(sp)
 5088088:	dc400117 	ldw	r17,4(sp)
 508808c:	dc000017 	ldw	r16,0(sp)
 5088090:	dec00404 	addi	sp,sp,16
 5088094:	f800283a 	ret
 5088098:	01400104 	movi	r5,4
 508809c:	01800404 	movi	r6,16
 50880a0:	50898f40 	call	50898f4 <_calloc_r>
 50880a4:	88801315 	stw	r2,76(r17)
 50880a8:	103fec1e 	bne	r2,zero,508805c <_Balloc+0x24>
 50880ac:	0005883a 	mov	r2,zero
 50880b0:	003ff306 	br	5088080 <_Balloc+0x48>
 50880b4:	01400044 	movi	r5,1
 50880b8:	2c24983a 	sll	r18,r5,r16
 50880bc:	8809883a 	mov	r4,r17
 50880c0:	91800144 	addi	r6,r18,5
 50880c4:	318d883a 	add	r6,r6,r6
 50880c8:	318d883a 	add	r6,r6,r6
 50880cc:	50898f40 	call	50898f4 <_calloc_r>
 50880d0:	103ff626 	beq	r2,zero,50880ac <_Balloc+0x74>
 50880d4:	14000115 	stw	r16,4(r2)
 50880d8:	14800215 	stw	r18,8(r2)
 50880dc:	003fe606 	br	5088078 <_Balloc+0x40>

050880e0 <_Bfree>:
 50880e0:	28000826 	beq	r5,zero,5088104 <_Bfree+0x24>
 50880e4:	28c00117 	ldw	r3,4(r5)
 50880e8:	20801317 	ldw	r2,76(r4)
 50880ec:	18c7883a 	add	r3,r3,r3
 50880f0:	18c7883a 	add	r3,r3,r3
 50880f4:	10c5883a 	add	r2,r2,r3
 50880f8:	10c00017 	ldw	r3,0(r2)
 50880fc:	28c00015 	stw	r3,0(r5)
 5088100:	11400015 	stw	r5,0(r2)
 5088104:	f800283a 	ret

05088108 <__multadd>:
 5088108:	defffa04 	addi	sp,sp,-24
 508810c:	dc000115 	stw	r16,4(sp)
 5088110:	2c000417 	ldw	r16,16(r5)
 5088114:	dc800315 	stw	r18,12(sp)
 5088118:	dc400215 	stw	r17,8(sp)
 508811c:	dfc00515 	stw	ra,20(sp)
 5088120:	dcc00415 	stw	r19,16(sp)
 5088124:	2823883a 	mov	r17,r5
 5088128:	2025883a 	mov	r18,r4
 508812c:	28c00504 	addi	r3,r5,20
 5088130:	0011883a 	mov	r8,zero
 5088134:	1a800017 	ldw	r10,0(r3)
 5088138:	18c00104 	addi	r3,r3,4
 508813c:	42000044 	addi	r8,r8,1
 5088140:	527fffcc 	andi	r9,r10,65535
 5088144:	4993383a 	mul	r9,r9,r6
 5088148:	5014d43a 	srli	r10,r10,16
 508814c:	49d3883a 	add	r9,r9,r7
 5088150:	480ed43a 	srli	r7,r9,16
 5088154:	5195383a 	mul	r10,r10,r6
 5088158:	4a7fffcc 	andi	r9,r9,65535
 508815c:	3a8f883a 	add	r7,r7,r10
 5088160:	3814943a 	slli	r10,r7,16
 5088164:	380ed43a 	srli	r7,r7,16
 5088168:	5253883a 	add	r9,r10,r9
 508816c:	1a7fff15 	stw	r9,-4(r3)
 5088170:	443ff016 	blt	r8,r16,5088134 <__multadd+0x2c>
 5088174:	38000926 	beq	r7,zero,508819c <__multadd+0x94>
 5088178:	88800217 	ldw	r2,8(r17)
 508817c:	80800f0e 	bge	r16,r2,50881bc <__multadd+0xb4>
 5088180:	80800144 	addi	r2,r16,5
 5088184:	1085883a 	add	r2,r2,r2
 5088188:	1085883a 	add	r2,r2,r2
 508818c:	8885883a 	add	r2,r17,r2
 5088190:	84000044 	addi	r16,r16,1
 5088194:	11c00015 	stw	r7,0(r2)
 5088198:	8c000415 	stw	r16,16(r17)
 508819c:	8805883a 	mov	r2,r17
 50881a0:	dfc00517 	ldw	ra,20(sp)
 50881a4:	dcc00417 	ldw	r19,16(sp)
 50881a8:	dc800317 	ldw	r18,12(sp)
 50881ac:	dc400217 	ldw	r17,8(sp)
 50881b0:	dc000117 	ldw	r16,4(sp)
 50881b4:	dec00604 	addi	sp,sp,24
 50881b8:	f800283a 	ret
 50881bc:	89400117 	ldw	r5,4(r17)
 50881c0:	9009883a 	mov	r4,r18
 50881c4:	d9c00015 	stw	r7,0(sp)
 50881c8:	29400044 	addi	r5,r5,1
 50881cc:	50880380 	call	5088038 <_Balloc>
 50881d0:	89800417 	ldw	r6,16(r17)
 50881d4:	89400304 	addi	r5,r17,12
 50881d8:	11000304 	addi	r4,r2,12
 50881dc:	31800084 	addi	r6,r6,2
 50881e0:	318d883a 	add	r6,r6,r6
 50881e4:	318d883a 	add	r6,r6,r6
 50881e8:	1027883a 	mov	r19,r2
 50881ec:	5087d3c0 	call	5087d3c <memcpy>
 50881f0:	88c00117 	ldw	r3,4(r17)
 50881f4:	90801317 	ldw	r2,76(r18)
 50881f8:	d9c00017 	ldw	r7,0(sp)
 50881fc:	18c7883a 	add	r3,r3,r3
 5088200:	18c7883a 	add	r3,r3,r3
 5088204:	10c5883a 	add	r2,r2,r3
 5088208:	10c00017 	ldw	r3,0(r2)
 508820c:	88c00015 	stw	r3,0(r17)
 5088210:	14400015 	stw	r17,0(r2)
 5088214:	9823883a 	mov	r17,r19
 5088218:	003fd906 	br	5088180 <__multadd+0x78>

0508821c <__s2b>:
 508821c:	defff904 	addi	sp,sp,-28
 5088220:	dd000415 	stw	r20,16(sp)
 5088224:	dc400115 	stw	r17,4(sp)
 5088228:	2829883a 	mov	r20,r5
 508822c:	2023883a 	mov	r17,r4
 5088230:	01400244 	movi	r5,9
 5088234:	39000204 	addi	r4,r7,8
 5088238:	dcc00315 	stw	r19,12(sp)
 508823c:	dc800215 	stw	r18,8(sp)
 5088240:	dfc00615 	stw	ra,24(sp)
 5088244:	dd400515 	stw	r21,20(sp)
 5088248:	dc000015 	stw	r16,0(sp)
 508824c:	3825883a 	mov	r18,r7
 5088250:	3027883a 	mov	r19,r6
 5088254:	508271c0 	call	508271c <__divsi3>
 5088258:	00c00044 	movi	r3,1
 508825c:	000b883a 	mov	r5,zero
 5088260:	1880030e 	bge	r3,r2,5088270 <__s2b+0x54>
 5088264:	18c7883a 	add	r3,r3,r3
 5088268:	29400044 	addi	r5,r5,1
 508826c:	18bffd16 	blt	r3,r2,5088264 <__s2b+0x48>
 5088270:	8809883a 	mov	r4,r17
 5088274:	50880380 	call	5088038 <_Balloc>
 5088278:	d8c00717 	ldw	r3,28(sp)
 508827c:	10c00515 	stw	r3,20(r2)
 5088280:	00c00044 	movi	r3,1
 5088284:	10c00415 	stw	r3,16(r2)
 5088288:	00c00244 	movi	r3,9
 508828c:	1cc0210e 	bge	r3,r19,5088314 <__s2b+0xf8>
 5088290:	a0eb883a 	add	r21,r20,r3
 5088294:	a821883a 	mov	r16,r21
 5088298:	a4e9883a 	add	r20,r20,r19
 508829c:	81c00007 	ldb	r7,0(r16)
 50882a0:	8809883a 	mov	r4,r17
 50882a4:	84000044 	addi	r16,r16,1
 50882a8:	100b883a 	mov	r5,r2
 50882ac:	01800284 	movi	r6,10
 50882b0:	39fff404 	addi	r7,r7,-48
 50882b4:	50881080 	call	5088108 <__multadd>
 50882b8:	853ff81e 	bne	r16,r20,508829c <__s2b+0x80>
 50882bc:	ace1883a 	add	r16,r21,r19
 50882c0:	843ffe04 	addi	r16,r16,-8
 50882c4:	9c800a0e 	bge	r19,r18,50882f0 <__s2b+0xd4>
 50882c8:	94e5c83a 	sub	r18,r18,r19
 50882cc:	84a5883a 	add	r18,r16,r18
 50882d0:	81c00007 	ldb	r7,0(r16)
 50882d4:	8809883a 	mov	r4,r17
 50882d8:	84000044 	addi	r16,r16,1
 50882dc:	100b883a 	mov	r5,r2
 50882e0:	01800284 	movi	r6,10
 50882e4:	39fff404 	addi	r7,r7,-48
 50882e8:	50881080 	call	5088108 <__multadd>
 50882ec:	84bff81e 	bne	r16,r18,50882d0 <__s2b+0xb4>
 50882f0:	dfc00617 	ldw	ra,24(sp)
 50882f4:	dd400517 	ldw	r21,20(sp)
 50882f8:	dd000417 	ldw	r20,16(sp)
 50882fc:	dcc00317 	ldw	r19,12(sp)
 5088300:	dc800217 	ldw	r18,8(sp)
 5088304:	dc400117 	ldw	r17,4(sp)
 5088308:	dc000017 	ldw	r16,0(sp)
 508830c:	dec00704 	addi	sp,sp,28
 5088310:	f800283a 	ret
 5088314:	a4000284 	addi	r16,r20,10
 5088318:	1827883a 	mov	r19,r3
 508831c:	003fe906 	br	50882c4 <__s2b+0xa8>

05088320 <__hi0bits>:
 5088320:	20bfffec 	andhi	r2,r4,65535
 5088324:	1000141e 	bne	r2,zero,5088378 <__hi0bits+0x58>
 5088328:	2008943a 	slli	r4,r4,16
 508832c:	00800404 	movi	r2,16
 5088330:	20ffc02c 	andhi	r3,r4,65280
 5088334:	1800021e 	bne	r3,zero,5088340 <__hi0bits+0x20>
 5088338:	2008923a 	slli	r4,r4,8
 508833c:	10800204 	addi	r2,r2,8
 5088340:	20fc002c 	andhi	r3,r4,61440
 5088344:	1800021e 	bne	r3,zero,5088350 <__hi0bits+0x30>
 5088348:	2008913a 	slli	r4,r4,4
 508834c:	10800104 	addi	r2,r2,4
 5088350:	20f0002c 	andhi	r3,r4,49152
 5088354:	1800031e 	bne	r3,zero,5088364 <__hi0bits+0x44>
 5088358:	2109883a 	add	r4,r4,r4
 508835c:	10800084 	addi	r2,r2,2
 5088360:	2109883a 	add	r4,r4,r4
 5088364:	20000316 	blt	r4,zero,5088374 <__hi0bits+0x54>
 5088368:	2110002c 	andhi	r4,r4,16384
 508836c:	2000041e 	bne	r4,zero,5088380 <__hi0bits+0x60>
 5088370:	00800804 	movi	r2,32
 5088374:	f800283a 	ret
 5088378:	0005883a 	mov	r2,zero
 508837c:	003fec06 	br	5088330 <__hi0bits+0x10>
 5088380:	10800044 	addi	r2,r2,1
 5088384:	f800283a 	ret

05088388 <__lo0bits>:
 5088388:	20c00017 	ldw	r3,0(r4)
 508838c:	188001cc 	andi	r2,r3,7
 5088390:	10000826 	beq	r2,zero,50883b4 <__lo0bits+0x2c>
 5088394:	1880004c 	andi	r2,r3,1
 5088398:	1000211e 	bne	r2,zero,5088420 <__lo0bits+0x98>
 508839c:	1880008c 	andi	r2,r3,2
 50883a0:	1000211e 	bne	r2,zero,5088428 <__lo0bits+0xa0>
 50883a4:	1806d0ba 	srli	r3,r3,2
 50883a8:	00800084 	movi	r2,2
 50883ac:	20c00015 	stw	r3,0(r4)
 50883b0:	f800283a 	ret
 50883b4:	18bfffcc 	andi	r2,r3,65535
 50883b8:	10001326 	beq	r2,zero,5088408 <__lo0bits+0x80>
 50883bc:	0005883a 	mov	r2,zero
 50883c0:	19403fcc 	andi	r5,r3,255
 50883c4:	2800021e 	bne	r5,zero,50883d0 <__lo0bits+0x48>
 50883c8:	1806d23a 	srli	r3,r3,8
 50883cc:	10800204 	addi	r2,r2,8
 50883d0:	194003cc 	andi	r5,r3,15
 50883d4:	2800021e 	bne	r5,zero,50883e0 <__lo0bits+0x58>
 50883d8:	1806d13a 	srli	r3,r3,4
 50883dc:	10800104 	addi	r2,r2,4
 50883e0:	194000cc 	andi	r5,r3,3
 50883e4:	2800021e 	bne	r5,zero,50883f0 <__lo0bits+0x68>
 50883e8:	1806d0ba 	srli	r3,r3,2
 50883ec:	10800084 	addi	r2,r2,2
 50883f0:	1940004c 	andi	r5,r3,1
 50883f4:	2800081e 	bne	r5,zero,5088418 <__lo0bits+0x90>
 50883f8:	1806d07a 	srli	r3,r3,1
 50883fc:	1800051e 	bne	r3,zero,5088414 <__lo0bits+0x8c>
 5088400:	00800804 	movi	r2,32
 5088404:	f800283a 	ret
 5088408:	1806d43a 	srli	r3,r3,16
 508840c:	00800404 	movi	r2,16
 5088410:	003feb06 	br	50883c0 <__lo0bits+0x38>
 5088414:	10800044 	addi	r2,r2,1
 5088418:	20c00015 	stw	r3,0(r4)
 508841c:	f800283a 	ret
 5088420:	0005883a 	mov	r2,zero
 5088424:	f800283a 	ret
 5088428:	1806d07a 	srli	r3,r3,1
 508842c:	00800044 	movi	r2,1
 5088430:	20c00015 	stw	r3,0(r4)
 5088434:	f800283a 	ret

05088438 <__i2b>:
 5088438:	defffd04 	addi	sp,sp,-12
 508843c:	dc000015 	stw	r16,0(sp)
 5088440:	04000044 	movi	r16,1
 5088444:	dc400115 	stw	r17,4(sp)
 5088448:	2823883a 	mov	r17,r5
 508844c:	800b883a 	mov	r5,r16
 5088450:	dfc00215 	stw	ra,8(sp)
 5088454:	50880380 	call	5088038 <_Balloc>
 5088458:	14400515 	stw	r17,20(r2)
 508845c:	14000415 	stw	r16,16(r2)
 5088460:	dfc00217 	ldw	ra,8(sp)
 5088464:	dc400117 	ldw	r17,4(sp)
 5088468:	dc000017 	ldw	r16,0(sp)
 508846c:	dec00304 	addi	sp,sp,12
 5088470:	f800283a 	ret

05088474 <__multiply>:
 5088474:	defffa04 	addi	sp,sp,-24
 5088478:	dcc00315 	stw	r19,12(sp)
 508847c:	dc400115 	stw	r17,4(sp)
 5088480:	34c00417 	ldw	r19,16(r6)
 5088484:	2c400417 	ldw	r17,16(r5)
 5088488:	dd000415 	stw	r20,16(sp)
 508848c:	dc800215 	stw	r18,8(sp)
 5088490:	dfc00515 	stw	ra,20(sp)
 5088494:	dc000015 	stw	r16,0(sp)
 5088498:	2825883a 	mov	r18,r5
 508849c:	3029883a 	mov	r20,r6
 50884a0:	8cc0050e 	bge	r17,r19,50884b8 <__multiply+0x44>
 50884a4:	8807883a 	mov	r3,r17
 50884a8:	3025883a 	mov	r18,r6
 50884ac:	9823883a 	mov	r17,r19
 50884b0:	2829883a 	mov	r20,r5
 50884b4:	1827883a 	mov	r19,r3
 50884b8:	90800217 	ldw	r2,8(r18)
 50884bc:	8ce1883a 	add	r16,r17,r19
 50884c0:	91400117 	ldw	r5,4(r18)
 50884c4:	1400010e 	bge	r2,r16,50884cc <__multiply+0x58>
 50884c8:	29400044 	addi	r5,r5,1
 50884cc:	50880380 	call	5088038 <_Balloc>
 50884d0:	83c00144 	addi	r15,r16,5
 50884d4:	7bdf883a 	add	r15,r15,r15
 50884d8:	7bdf883a 	add	r15,r15,r15
 50884dc:	13800504 	addi	r14,r2,20
 50884e0:	13df883a 	add	r15,r2,r15
 50884e4:	7007883a 	mov	r3,r14
 50884e8:	73c0032e 	bgeu	r14,r15,50884f8 <__multiply+0x84>
 50884ec:	18000015 	stw	zero,0(r3)
 50884f0:	18c00104 	addi	r3,r3,4
 50884f4:	1bfffd36 	bltu	r3,r15,50884ec <__multiply+0x78>
 50884f8:	99800144 	addi	r6,r19,5
 50884fc:	8b000144 	addi	r12,r17,5
 5088500:	318d883a 	add	r6,r6,r6
 5088504:	6319883a 	add	r12,r12,r12
 5088508:	318d883a 	add	r6,r6,r6
 508850c:	6319883a 	add	r12,r12,r12
 5088510:	a3400504 	addi	r13,r20,20
 5088514:	a18d883a 	add	r6,r20,r6
 5088518:	94400504 	addi	r17,r18,20
 508851c:	9319883a 	add	r12,r18,r12
 5088520:	6980392e 	bgeu	r13,r6,5088608 <__multiply+0x194>
 5088524:	6a800017 	ldw	r10,0(r13)
 5088528:	52ffffcc 	andi	r11,r10,65535
 508852c:	58001826 	beq	r11,zero,5088590 <__multiply+0x11c>
 5088530:	7007883a 	mov	r3,r14
 5088534:	8809883a 	mov	r4,r17
 5088538:	000b883a 	mov	r5,zero
 508853c:	22400017 	ldw	r9,0(r4)
 5088540:	1a000017 	ldw	r8,0(r3)
 5088544:	21000104 	addi	r4,r4,4
 5088548:	49ffffcc 	andi	r7,r9,65535
 508854c:	3acf383a 	mul	r7,r7,r11
 5088550:	4812d43a 	srli	r9,r9,16
 5088554:	42bfffcc 	andi	r10,r8,65535
 5088558:	3a8f883a 	add	r7,r7,r10
 508855c:	394f883a 	add	r7,r7,r5
 5088560:	4010d43a 	srli	r8,r8,16
 5088564:	4acb383a 	mul	r5,r9,r11
 5088568:	3814d43a 	srli	r10,r7,16
 508856c:	19c0000d 	sth	r7,0(r3)
 5088570:	2a0b883a 	add	r5,r5,r8
 5088574:	2a8b883a 	add	r5,r5,r10
 5088578:	1940008d 	sth	r5,2(r3)
 508857c:	280ad43a 	srli	r5,r5,16
 5088580:	18c00104 	addi	r3,r3,4
 5088584:	233fed36 	bltu	r4,r12,508853c <__multiply+0xc8>
 5088588:	19400015 	stw	r5,0(r3)
 508858c:	6a800017 	ldw	r10,0(r13)
 5088590:	5014d43a 	srli	r10,r10,16
 5088594:	50001926 	beq	r10,zero,50885fc <__multiply+0x188>
 5088598:	71400017 	ldw	r5,0(r14)
 508859c:	7007883a 	mov	r3,r14
 50885a0:	8809883a 	mov	r4,r17
 50885a4:	280f883a 	mov	r7,r5
 50885a8:	0017883a 	mov	r11,zero
 50885ac:	22400017 	ldw	r9,0(r4)
 50885b0:	380ed43a 	srli	r7,r7,16
 50885b4:	1940000d 	sth	r5,0(r3)
 50885b8:	4a3fffcc 	andi	r8,r9,65535
 50885bc:	4291383a 	mul	r8,r8,r10
 50885c0:	4812d43a 	srli	r9,r9,16
 50885c4:	18c00104 	addi	r3,r3,4
 50885c8:	41d1883a 	add	r8,r8,r7
 50885cc:	19c00017 	ldw	r7,0(r3)
 50885d0:	42d1883a 	add	r8,r8,r11
 50885d4:	4a93383a 	mul	r9,r9,r10
 50885d8:	1a3fff8d 	sth	r8,-2(r3)
 50885dc:	4010d43a 	srli	r8,r8,16
 50885e0:	397fffcc 	andi	r5,r7,65535
 50885e4:	2a4b883a 	add	r5,r5,r9
 50885e8:	2a0b883a 	add	r5,r5,r8
 50885ec:	21000104 	addi	r4,r4,4
 50885f0:	2816d43a 	srli	r11,r5,16
 50885f4:	233fed36 	bltu	r4,r12,50885ac <__multiply+0x138>
 50885f8:	19400015 	stw	r5,0(r3)
 50885fc:	6b400104 	addi	r13,r13,4
 5088600:	73800104 	addi	r14,r14,4
 5088604:	69bfc736 	bltu	r13,r6,5088524 <__multiply+0xb0>
 5088608:	0400090e 	bge	zero,r16,5088630 <__multiply+0x1bc>
 508860c:	78ffff17 	ldw	r3,-4(r15)
 5088610:	7bffff04 	addi	r15,r15,-4
 5088614:	18000326 	beq	r3,zero,5088624 <__multiply+0x1b0>
 5088618:	00000506 	br	5088630 <__multiply+0x1bc>
 508861c:	78c00017 	ldw	r3,0(r15)
 5088620:	1800031e 	bne	r3,zero,5088630 <__multiply+0x1bc>
 5088624:	843fffc4 	addi	r16,r16,-1
 5088628:	7bffff04 	addi	r15,r15,-4
 508862c:	803ffb1e 	bne	r16,zero,508861c <__multiply+0x1a8>
 5088630:	14000415 	stw	r16,16(r2)
 5088634:	dfc00517 	ldw	ra,20(sp)
 5088638:	dd000417 	ldw	r20,16(sp)
 508863c:	dcc00317 	ldw	r19,12(sp)
 5088640:	dc800217 	ldw	r18,8(sp)
 5088644:	dc400117 	ldw	r17,4(sp)
 5088648:	dc000017 	ldw	r16,0(sp)
 508864c:	dec00604 	addi	sp,sp,24
 5088650:	f800283a 	ret

05088654 <__pow5mult>:
 5088654:	defffb04 	addi	sp,sp,-20
 5088658:	dcc00315 	stw	r19,12(sp)
 508865c:	dc800215 	stw	r18,8(sp)
 5088660:	dc000015 	stw	r16,0(sp)
 5088664:	dfc00415 	stw	ra,16(sp)
 5088668:	dc400115 	stw	r17,4(sp)
 508866c:	308000cc 	andi	r2,r6,3
 5088670:	3021883a 	mov	r16,r6
 5088674:	2027883a 	mov	r19,r4
 5088678:	2825883a 	mov	r18,r5
 508867c:	10002e1e 	bne	r2,zero,5088738 <__pow5mult+0xe4>
 5088680:	8021d0ba 	srai	r16,r16,2
 5088684:	80001a26 	beq	r16,zero,50886f0 <__pow5mult+0x9c>
 5088688:	9c401217 	ldw	r17,72(r19)
 508868c:	8800061e 	bne	r17,zero,50886a8 <__pow5mult+0x54>
 5088690:	00003406 	br	5088764 <__pow5mult+0x110>
 5088694:	8021d07a 	srai	r16,r16,1
 5088698:	80001526 	beq	r16,zero,50886f0 <__pow5mult+0x9c>
 508869c:	88c00017 	ldw	r3,0(r17)
 50886a0:	18001b26 	beq	r3,zero,5088710 <__pow5mult+0xbc>
 50886a4:	1823883a 	mov	r17,r3
 50886a8:	80c0004c 	andi	r3,r16,1
 50886ac:	183ff926 	beq	r3,zero,5088694 <__pow5mult+0x40>
 50886b0:	900b883a 	mov	r5,r18
 50886b4:	880d883a 	mov	r6,r17
 50886b8:	9809883a 	mov	r4,r19
 50886bc:	50884740 	call	5088474 <__multiply>
 50886c0:	90001b26 	beq	r18,zero,5088730 <__pow5mult+0xdc>
 50886c4:	91000117 	ldw	r4,4(r18)
 50886c8:	98c01317 	ldw	r3,76(r19)
 50886cc:	8021d07a 	srai	r16,r16,1
 50886d0:	2109883a 	add	r4,r4,r4
 50886d4:	2109883a 	add	r4,r4,r4
 50886d8:	1907883a 	add	r3,r3,r4
 50886dc:	19000017 	ldw	r4,0(r3)
 50886e0:	91000015 	stw	r4,0(r18)
 50886e4:	1c800015 	stw	r18,0(r3)
 50886e8:	1025883a 	mov	r18,r2
 50886ec:	803feb1e 	bne	r16,zero,508869c <__pow5mult+0x48>
 50886f0:	9005883a 	mov	r2,r18
 50886f4:	dfc00417 	ldw	ra,16(sp)
 50886f8:	dcc00317 	ldw	r19,12(sp)
 50886fc:	dc800217 	ldw	r18,8(sp)
 5088700:	dc400117 	ldw	r17,4(sp)
 5088704:	dc000017 	ldw	r16,0(sp)
 5088708:	dec00504 	addi	sp,sp,20
 508870c:	f800283a 	ret
 5088710:	880b883a 	mov	r5,r17
 5088714:	880d883a 	mov	r6,r17
 5088718:	9809883a 	mov	r4,r19
 508871c:	50884740 	call	5088474 <__multiply>
 5088720:	88800015 	stw	r2,0(r17)
 5088724:	10000015 	stw	zero,0(r2)
 5088728:	1023883a 	mov	r17,r2
 508872c:	003fde06 	br	50886a8 <__pow5mult+0x54>
 5088730:	1025883a 	mov	r18,r2
 5088734:	003fd706 	br	5088694 <__pow5mult+0x40>
 5088738:	10bfffc4 	addi	r2,r2,-1
 508873c:	1085883a 	add	r2,r2,r2
 5088740:	00c14274 	movhi	r3,1289
 5088744:	18fcad04 	addi	r3,r3,-3404
 5088748:	1085883a 	add	r2,r2,r2
 508874c:	1885883a 	add	r2,r3,r2
 5088750:	11800017 	ldw	r6,0(r2)
 5088754:	000f883a 	mov	r7,zero
 5088758:	50881080 	call	5088108 <__multadd>
 508875c:	1025883a 	mov	r18,r2
 5088760:	003fc706 	br	5088680 <__pow5mult+0x2c>
 5088764:	9809883a 	mov	r4,r19
 5088768:	01409c44 	movi	r5,625
 508876c:	50884380 	call	5088438 <__i2b>
 5088770:	98801215 	stw	r2,72(r19)
 5088774:	1023883a 	mov	r17,r2
 5088778:	10000015 	stw	zero,0(r2)
 508877c:	003fca06 	br	50886a8 <__pow5mult+0x54>

05088780 <__lshift>:
 5088780:	defff904 	addi	sp,sp,-28
 5088784:	dd400515 	stw	r21,20(sp)
 5088788:	dc400115 	stw	r17,4(sp)
 508878c:	2d400417 	ldw	r21,16(r5)
 5088790:	3023d17a 	srai	r17,r6,5
 5088794:	28800217 	ldw	r2,8(r5)
 5088798:	dd000415 	stw	r20,16(sp)
 508879c:	8d6b883a 	add	r21,r17,r21
 50887a0:	dcc00315 	stw	r19,12(sp)
 50887a4:	dc800215 	stw	r18,8(sp)
 50887a8:	dc000015 	stw	r16,0(sp)
 50887ac:	dfc00615 	stw	ra,24(sp)
 50887b0:	ac000044 	addi	r16,r21,1
 50887b4:	2825883a 	mov	r18,r5
 50887b8:	3029883a 	mov	r20,r6
 50887bc:	2027883a 	mov	r19,r4
 50887c0:	29400117 	ldw	r5,4(r5)
 50887c4:	1400030e 	bge	r2,r16,50887d4 <__lshift+0x54>
 50887c8:	1085883a 	add	r2,r2,r2
 50887cc:	29400044 	addi	r5,r5,1
 50887d0:	143ffd16 	blt	r2,r16,50887c8 <__lshift+0x48>
 50887d4:	9809883a 	mov	r4,r19
 50887d8:	50880380 	call	5088038 <_Balloc>
 50887dc:	10c00504 	addi	r3,r2,20
 50887e0:	0440090e 	bge	zero,r17,5088808 <__lshift+0x88>
 50887e4:	000f883a 	mov	r7,zero
 50887e8:	18000015 	stw	zero,0(r3)
 50887ec:	39c00044 	addi	r7,r7,1
 50887f0:	18c00104 	addi	r3,r3,4
 50887f4:	3c7ffc1e 	bne	r7,r17,50887e8 <__lshift+0x68>
 50887f8:	38c00144 	addi	r3,r7,5
 50887fc:	18c7883a 	add	r3,r3,r3
 5088800:	18c7883a 	add	r3,r3,r3
 5088804:	10c7883a 	add	r3,r2,r3
 5088808:	92000417 	ldw	r8,16(r18)
 508880c:	a18007cc 	andi	r6,r20,31
 5088810:	91c00504 	addi	r7,r18,20
 5088814:	42000144 	addi	r8,r8,5
 5088818:	4211883a 	add	r8,r8,r8
 508881c:	4211883a 	add	r8,r8,r8
 5088820:	9211883a 	add	r8,r18,r8
 5088824:	30002226 	beq	r6,zero,50888b0 <__lshift+0x130>
 5088828:	02800804 	movi	r10,32
 508882c:	5195c83a 	sub	r10,r10,r6
 5088830:	000b883a 	mov	r5,zero
 5088834:	3a400017 	ldw	r9,0(r7)
 5088838:	18c00104 	addi	r3,r3,4
 508883c:	39c00104 	addi	r7,r7,4
 5088840:	4992983a 	sll	r9,r9,r6
 5088844:	2a4ab03a 	or	r5,r5,r9
 5088848:	197fff15 	stw	r5,-4(r3)
 508884c:	397fff17 	ldw	r5,-4(r7)
 5088850:	2a8ad83a 	srl	r5,r5,r10
 5088854:	3a3ff736 	bltu	r7,r8,5088834 <__lshift+0xb4>
 5088858:	19400015 	stw	r5,0(r3)
 508885c:	28000126 	beq	r5,zero,5088864 <__lshift+0xe4>
 5088860:	ac000084 	addi	r16,r21,2
 5088864:	91000117 	ldw	r4,4(r18)
 5088868:	98c01317 	ldw	r3,76(r19)
 508886c:	843fffc4 	addi	r16,r16,-1
 5088870:	2109883a 	add	r4,r4,r4
 5088874:	2109883a 	add	r4,r4,r4
 5088878:	1907883a 	add	r3,r3,r4
 508887c:	19000017 	ldw	r4,0(r3)
 5088880:	14000415 	stw	r16,16(r2)
 5088884:	91000015 	stw	r4,0(r18)
 5088888:	1c800015 	stw	r18,0(r3)
 508888c:	dfc00617 	ldw	ra,24(sp)
 5088890:	dd400517 	ldw	r21,20(sp)
 5088894:	dd000417 	ldw	r20,16(sp)
 5088898:	dcc00317 	ldw	r19,12(sp)
 508889c:	dc800217 	ldw	r18,8(sp)
 50888a0:	dc400117 	ldw	r17,4(sp)
 50888a4:	dc000017 	ldw	r16,0(sp)
 50888a8:	dec00704 	addi	sp,sp,28
 50888ac:	f800283a 	ret
 50888b0:	39400017 	ldw	r5,0(r7)
 50888b4:	18c00104 	addi	r3,r3,4
 50888b8:	39c00104 	addi	r7,r7,4
 50888bc:	197fff15 	stw	r5,-4(r3)
 50888c0:	3a3fe82e 	bgeu	r7,r8,5088864 <__lshift+0xe4>
 50888c4:	39400017 	ldw	r5,0(r7)
 50888c8:	18c00104 	addi	r3,r3,4
 50888cc:	39c00104 	addi	r7,r7,4
 50888d0:	197fff15 	stw	r5,-4(r3)
 50888d4:	3a3ff636 	bltu	r7,r8,50888b0 <__lshift+0x130>
 50888d8:	003fe206 	br	5088864 <__lshift+0xe4>

050888dc <__mcmp>:
 50888dc:	20800417 	ldw	r2,16(r4)
 50888e0:	28c00417 	ldw	r3,16(r5)
 50888e4:	10c5c83a 	sub	r2,r2,r3
 50888e8:	10000f1e 	bne	r2,zero,5088928 <__mcmp+0x4c>
 50888ec:	18c00144 	addi	r3,r3,5
 50888f0:	18c7883a 	add	r3,r3,r3
 50888f4:	18c7883a 	add	r3,r3,r3
 50888f8:	21c00504 	addi	r7,r4,20
 50888fc:	28cb883a 	add	r5,r5,r3
 5088900:	20c9883a 	add	r4,r4,r3
 5088904:	213fff04 	addi	r4,r4,-4
 5088908:	297fff04 	addi	r5,r5,-4
 508890c:	21800017 	ldw	r6,0(r4)
 5088910:	28c00017 	ldw	r3,0(r5)
 5088914:	30c0021e 	bne	r6,r3,5088920 <__mcmp+0x44>
 5088918:	393ffa36 	bltu	r7,r4,5088904 <__mcmp+0x28>
 508891c:	f800283a 	ret
 5088920:	30c00236 	bltu	r6,r3,508892c <__mcmp+0x50>
 5088924:	00800044 	movi	r2,1
 5088928:	f800283a 	ret
 508892c:	00bfffc4 	movi	r2,-1
 5088930:	f800283a 	ret

05088934 <__mdiff>:
 5088934:	defffb04 	addi	sp,sp,-20
 5088938:	dc000015 	stw	r16,0(sp)
 508893c:	2821883a 	mov	r16,r5
 5088940:	dc800215 	stw	r18,8(sp)
 5088944:	300b883a 	mov	r5,r6
 5088948:	2025883a 	mov	r18,r4
 508894c:	8009883a 	mov	r4,r16
 5088950:	dc400115 	stw	r17,4(sp)
 5088954:	dfc00415 	stw	ra,16(sp)
 5088958:	dcc00315 	stw	r19,12(sp)
 508895c:	3023883a 	mov	r17,r6
 5088960:	50888dc0 	call	50888dc <__mcmp>
 5088964:	10005026 	beq	r2,zero,5088aa8 <__mdiff+0x174>
 5088968:	10004a16 	blt	r2,zero,5088a94 <__mdiff+0x160>
 508896c:	0027883a 	mov	r19,zero
 5088970:	81400117 	ldw	r5,4(r16)
 5088974:	9009883a 	mov	r4,r18
 5088978:	50880380 	call	5088038 <_Balloc>
 508897c:	82400417 	ldw	r9,16(r16)
 5088980:	89800417 	ldw	r6,16(r17)
 5088984:	14c00315 	stw	r19,12(r2)
 5088988:	4b800144 	addi	r14,r9,5
 508898c:	31800144 	addi	r6,r6,5
 5088990:	739d883a 	add	r14,r14,r14
 5088994:	318d883a 	add	r6,r6,r6
 5088998:	739d883a 	add	r14,r14,r14
 508899c:	318d883a 	add	r6,r6,r6
 50889a0:	81c00504 	addi	r7,r16,20
 50889a4:	839d883a 	add	r14,r16,r14
 50889a8:	8a000504 	addi	r8,r17,20
 50889ac:	898d883a 	add	r6,r17,r6
 50889b0:	10c00504 	addi	r3,r2,20
 50889b4:	0009883a 	mov	r4,zero
 50889b8:	3b000017 	ldw	r12,0(r7)
 50889bc:	42c00017 	ldw	r11,0(r8)
 50889c0:	42000104 	addi	r8,r8,4
 50889c4:	62bfffcc 	andi	r10,r12,65535
 50889c8:	5b7fffcc 	andi	r13,r11,65535
 50889cc:	5109883a 	add	r4,r10,r4
 50889d0:	2355c83a 	sub	r10,r4,r13
 50889d4:	5816d43a 	srli	r11,r11,16
 50889d8:	6008d43a 	srli	r4,r12,16
 50889dc:	501bd43a 	srai	r13,r10,16
 50889e0:	1a80000d 	sth	r10,0(r3)
 50889e4:	22c9c83a 	sub	r4,r4,r11
 50889e8:	2349883a 	add	r4,r4,r13
 50889ec:	1900008d 	sth	r4,2(r3)
 50889f0:	39c00104 	addi	r7,r7,4
 50889f4:	2009d43a 	srai	r4,r4,16
 50889f8:	18c00104 	addi	r3,r3,4
 50889fc:	41bfee36 	bltu	r8,r6,50889b8 <__mdiff+0x84>
 5088a00:	180b883a 	mov	r5,r3
 5088a04:	3815883a 	mov	r10,r7
 5088a08:	3b80132e 	bgeu	r7,r14,5088a58 <__mdiff+0x124>
 5088a0c:	3a000017 	ldw	r8,0(r7)
 5088a10:	18c00104 	addi	r3,r3,4
 5088a14:	39c00104 	addi	r7,r7,4
 5088a18:	41bfffcc 	andi	r6,r8,65535
 5088a1c:	310d883a 	add	r6,r6,r4
 5088a20:	3009d43a 	srai	r4,r6,16
 5088a24:	4010d43a 	srli	r8,r8,16
 5088a28:	19bfff0d 	sth	r6,-4(r3)
 5088a2c:	2209883a 	add	r4,r4,r8
 5088a30:	193fff8d 	sth	r4,-2(r3)
 5088a34:	2009d43a 	srai	r4,r4,16
 5088a38:	3bbff436 	bltu	r7,r14,5088a0c <__mdiff+0xd8>
 5088a3c:	0286303a 	nor	r3,zero,r10
 5088a40:	1b87883a 	add	r3,r3,r14
 5088a44:	1806d0ba 	srli	r3,r3,2
 5088a48:	18c00044 	addi	r3,r3,1
 5088a4c:	18c7883a 	add	r3,r3,r3
 5088a50:	18c7883a 	add	r3,r3,r3
 5088a54:	28c7883a 	add	r3,r5,r3
 5088a58:	193fff17 	ldw	r4,-4(r3)
 5088a5c:	18ffff04 	addi	r3,r3,-4
 5088a60:	2000041e 	bne	r4,zero,5088a74 <__mdiff+0x140>
 5088a64:	18ffff04 	addi	r3,r3,-4
 5088a68:	19000017 	ldw	r4,0(r3)
 5088a6c:	4a7fffc4 	addi	r9,r9,-1
 5088a70:	203ffc26 	beq	r4,zero,5088a64 <__mdiff+0x130>
 5088a74:	12400415 	stw	r9,16(r2)
 5088a78:	dfc00417 	ldw	ra,16(sp)
 5088a7c:	dcc00317 	ldw	r19,12(sp)
 5088a80:	dc800217 	ldw	r18,8(sp)
 5088a84:	dc400117 	ldw	r17,4(sp)
 5088a88:	dc000017 	ldw	r16,0(sp)
 5088a8c:	dec00504 	addi	sp,sp,20
 5088a90:	f800283a 	ret
 5088a94:	8005883a 	mov	r2,r16
 5088a98:	04c00044 	movi	r19,1
 5088a9c:	8821883a 	mov	r16,r17
 5088aa0:	1023883a 	mov	r17,r2
 5088aa4:	003fb206 	br	5088970 <__mdiff+0x3c>
 5088aa8:	9009883a 	mov	r4,r18
 5088aac:	000b883a 	mov	r5,zero
 5088ab0:	50880380 	call	5088038 <_Balloc>
 5088ab4:	00c00044 	movi	r3,1
 5088ab8:	10c00415 	stw	r3,16(r2)
 5088abc:	10000515 	stw	zero,20(r2)
 5088ac0:	dfc00417 	ldw	ra,16(sp)
 5088ac4:	dcc00317 	ldw	r19,12(sp)
 5088ac8:	dc800217 	ldw	r18,8(sp)
 5088acc:	dc400117 	ldw	r17,4(sp)
 5088ad0:	dc000017 	ldw	r16,0(sp)
 5088ad4:	dec00504 	addi	sp,sp,20
 5088ad8:	f800283a 	ret

05088adc <__ulp>:
 5088adc:	295ffc2c 	andhi	r5,r5,32752
 5088ae0:	00bf3034 	movhi	r2,64704
 5088ae4:	2887883a 	add	r3,r5,r2
 5088ae8:	00c0020e 	bge	zero,r3,5088af4 <__ulp+0x18>
 5088aec:	0005883a 	mov	r2,zero
 5088af0:	f800283a 	ret
 5088af4:	00c7c83a 	sub	r3,zero,r3
 5088af8:	1805d53a 	srai	r2,r3,20
 5088afc:	00c004c4 	movi	r3,19
 5088b00:	18800a0e 	bge	r3,r2,5088b2c <__ulp+0x50>
 5088b04:	01000c84 	movi	r4,50
 5088b08:	0007883a 	mov	r3,zero
 5088b0c:	20800516 	blt	r4,r2,5088b24 <__ulp+0x48>
 5088b10:	01000cc4 	movi	r4,51
 5088b14:	2085c83a 	sub	r2,r4,r2
 5088b18:	01000044 	movi	r4,1
 5088b1c:	2084983a 	sll	r2,r4,r2
 5088b20:	f800283a 	ret
 5088b24:	00800044 	movi	r2,1
 5088b28:	f800283a 	ret
 5088b2c:	00c00234 	movhi	r3,8
 5088b30:	1887d83a 	sra	r3,r3,r2
 5088b34:	0005883a 	mov	r2,zero
 5088b38:	f800283a 	ret

05088b3c <__b2d>:
 5088b3c:	defffa04 	addi	sp,sp,-24
 5088b40:	dc000015 	stw	r16,0(sp)
 5088b44:	24000417 	ldw	r16,16(r4)
 5088b48:	dc400115 	stw	r17,4(sp)
 5088b4c:	dcc00315 	stw	r19,12(sp)
 5088b50:	84000144 	addi	r16,r16,5
 5088b54:	8421883a 	add	r16,r16,r16
 5088b58:	8421883a 	add	r16,r16,r16
 5088b5c:	2421883a 	add	r16,r4,r16
 5088b60:	847fff17 	ldw	r17,-4(r16)
 5088b64:	24c00504 	addi	r19,r4,20
 5088b68:	dd000415 	stw	r20,16(sp)
 5088b6c:	8809883a 	mov	r4,r17
 5088b70:	dc800215 	stw	r18,8(sp)
 5088b74:	2829883a 	mov	r20,r5
 5088b78:	dfc00515 	stw	ra,20(sp)
 5088b7c:	50883200 	call	5088320 <__hi0bits>
 5088b80:	00c00804 	movi	r3,32
 5088b84:	1887c83a 	sub	r3,r3,r2
 5088b88:	a0c00015 	stw	r3,0(r20)
 5088b8c:	00c00284 	movi	r3,10
 5088b90:	84bfff04 	addi	r18,r16,-4
 5088b94:	18801216 	blt	r3,r2,5088be0 <__b2d+0xa4>
 5088b98:	010002c4 	movi	r4,11
 5088b9c:	2089c83a 	sub	r4,r4,r2
 5088ba0:	8906d83a 	srl	r3,r17,r4
 5088ba4:	18cffc34 	orhi	r3,r3,16368
 5088ba8:	9c80322e 	bgeu	r19,r18,5088c74 <__b2d+0x138>
 5088bac:	817ffe17 	ldw	r5,-8(r16)
 5088bb0:	2908d83a 	srl	r4,r5,r4
 5088bb4:	10800544 	addi	r2,r2,21
 5088bb8:	88a2983a 	sll	r17,r17,r2
 5088bbc:	2444b03a 	or	r2,r4,r17
 5088bc0:	dfc00517 	ldw	ra,20(sp)
 5088bc4:	dd000417 	ldw	r20,16(sp)
 5088bc8:	dcc00317 	ldw	r19,12(sp)
 5088bcc:	dc800217 	ldw	r18,8(sp)
 5088bd0:	dc400117 	ldw	r17,4(sp)
 5088bd4:	dc000017 	ldw	r16,0(sp)
 5088bd8:	dec00604 	addi	sp,sp,24
 5088bdc:	f800283a 	ret
 5088be0:	9c801636 	bltu	r19,r18,5088c3c <__b2d+0x100>
 5088be4:	113ffd44 	addi	r4,r2,-11
 5088be8:	000b883a 	mov	r5,zero
 5088bec:	20001726 	beq	r4,zero,5088c4c <__b2d+0x110>
 5088bf0:	00c00ac4 	movi	r3,43
 5088bf4:	1885c83a 	sub	r2,r3,r2
 5088bf8:	8906983a 	sll	r3,r17,r4
 5088bfc:	288cd83a 	srl	r6,r5,r2
 5088c00:	18cffc34 	orhi	r3,r3,16368
 5088c04:	1986b03a 	or	r3,r3,r6
 5088c08:	9c801c2e 	bgeu	r19,r18,5088c7c <__b2d+0x140>
 5088c0c:	91bfff17 	ldw	r6,-4(r18)
 5088c10:	3084d83a 	srl	r2,r6,r2
 5088c14:	2908983a 	sll	r4,r5,r4
 5088c18:	1104b03a 	or	r2,r2,r4
 5088c1c:	dfc00517 	ldw	ra,20(sp)
 5088c20:	dd000417 	ldw	r20,16(sp)
 5088c24:	dcc00317 	ldw	r19,12(sp)
 5088c28:	dc800217 	ldw	r18,8(sp)
 5088c2c:	dc400117 	ldw	r17,4(sp)
 5088c30:	dc000017 	ldw	r16,0(sp)
 5088c34:	dec00604 	addi	sp,sp,24
 5088c38:	f800283a 	ret
 5088c3c:	113ffd44 	addi	r4,r2,-11
 5088c40:	84bffe04 	addi	r18,r16,-8
 5088c44:	817ffe17 	ldw	r5,-8(r16)
 5088c48:	203fe91e 	bne	r4,zero,5088bf0 <__b2d+0xb4>
 5088c4c:	88cffc34 	orhi	r3,r17,16368
 5088c50:	2805883a 	mov	r2,r5
 5088c54:	dfc00517 	ldw	ra,20(sp)
 5088c58:	dd000417 	ldw	r20,16(sp)
 5088c5c:	dcc00317 	ldw	r19,12(sp)
 5088c60:	dc800217 	ldw	r18,8(sp)
 5088c64:	dc400117 	ldw	r17,4(sp)
 5088c68:	dc000017 	ldw	r16,0(sp)
 5088c6c:	dec00604 	addi	sp,sp,24
 5088c70:	f800283a 	ret
 5088c74:	0009883a 	mov	r4,zero
 5088c78:	003fce06 	br	5088bb4 <__b2d+0x78>
 5088c7c:	0005883a 	mov	r2,zero
 5088c80:	003fe406 	br	5088c14 <__b2d+0xd8>

05088c84 <__d2b>:
 5088c84:	defff804 	addi	sp,sp,-32
 5088c88:	dc400315 	stw	r17,12(sp)
 5088c8c:	3023883a 	mov	r17,r6
 5088c90:	dc800415 	stw	r18,16(sp)
 5088c94:	8824907a 	slli	r18,r17,1
 5088c98:	dcc00515 	stw	r19,20(sp)
 5088c9c:	2827883a 	mov	r19,r5
 5088ca0:	9024d57a 	srli	r18,r18,21
 5088ca4:	01400044 	movi	r5,1
 5088ca8:	dd000615 	stw	r20,24(sp)
 5088cac:	dc000215 	stw	r16,8(sp)
 5088cb0:	dfc00715 	stw	ra,28(sp)
 5088cb4:	3829883a 	mov	r20,r7
 5088cb8:	50880380 	call	5088038 <_Balloc>
 5088cbc:	1021883a 	mov	r16,r2
 5088cc0:	00800434 	movhi	r2,16
 5088cc4:	10bfffc4 	addi	r2,r2,-1
 5088cc8:	88a2703a 	and	r17,r17,r2
 5088ccc:	90000126 	beq	r18,zero,5088cd4 <__d2b+0x50>
 5088cd0:	8c400434 	orhi	r17,r17,16
 5088cd4:	dc400015 	stw	r17,0(sp)
 5088cd8:	98002226 	beq	r19,zero,5088d64 <__d2b+0xe0>
 5088cdc:	d9000104 	addi	r4,sp,4
 5088ce0:	dcc00115 	stw	r19,4(sp)
 5088ce4:	50883880 	call	5088388 <__lo0bits>
 5088ce8:	d8c00017 	ldw	r3,0(sp)
 5088cec:	10002d1e 	bne	r2,zero,5088da4 <__d2b+0x120>
 5088cf0:	d9000117 	ldw	r4,4(sp)
 5088cf4:	81000515 	stw	r4,20(r16)
 5088cf8:	1823003a 	cmpeq	r17,r3,zero
 5088cfc:	01000084 	movi	r4,2
 5088d00:	2463c83a 	sub	r17,r4,r17
 5088d04:	80c00615 	stw	r3,24(r16)
 5088d08:	84400415 	stw	r17,16(r16)
 5088d0c:	90001d1e 	bne	r18,zero,5088d84 <__d2b+0x100>
 5088d10:	88c00104 	addi	r3,r17,4
 5088d14:	18c7883a 	add	r3,r3,r3
 5088d18:	18c7883a 	add	r3,r3,r3
 5088d1c:	80c7883a 	add	r3,r16,r3
 5088d20:	19000017 	ldw	r4,0(r3)
 5088d24:	10bef384 	addi	r2,r2,-1074
 5088d28:	a0800015 	stw	r2,0(r20)
 5088d2c:	50883200 	call	5088320 <__hi0bits>
 5088d30:	8822917a 	slli	r17,r17,5
 5088d34:	d8c00817 	ldw	r3,32(sp)
 5088d38:	8885c83a 	sub	r2,r17,r2
 5088d3c:	18800015 	stw	r2,0(r3)
 5088d40:	8005883a 	mov	r2,r16
 5088d44:	dfc00717 	ldw	ra,28(sp)
 5088d48:	dd000617 	ldw	r20,24(sp)
 5088d4c:	dcc00517 	ldw	r19,20(sp)
 5088d50:	dc800417 	ldw	r18,16(sp)
 5088d54:	dc400317 	ldw	r17,12(sp)
 5088d58:	dc000217 	ldw	r16,8(sp)
 5088d5c:	dec00804 	addi	sp,sp,32
 5088d60:	f800283a 	ret
 5088d64:	d809883a 	mov	r4,sp
 5088d68:	50883880 	call	5088388 <__lo0bits>
 5088d6c:	d8c00017 	ldw	r3,0(sp)
 5088d70:	04400044 	movi	r17,1
 5088d74:	84400415 	stw	r17,16(r16)
 5088d78:	80c00515 	stw	r3,20(r16)
 5088d7c:	10800804 	addi	r2,r2,32
 5088d80:	903fe326 	beq	r18,zero,5088d10 <__d2b+0x8c>
 5088d84:	00c00d44 	movi	r3,53
 5088d88:	94bef344 	addi	r18,r18,-1075
 5088d8c:	90a5883a 	add	r18,r18,r2
 5088d90:	1885c83a 	sub	r2,r3,r2
 5088d94:	d8c00817 	ldw	r3,32(sp)
 5088d98:	a4800015 	stw	r18,0(r20)
 5088d9c:	18800015 	stw	r2,0(r3)
 5088da0:	003fe706 	br	5088d40 <__d2b+0xbc>
 5088da4:	01000804 	movi	r4,32
 5088da8:	2089c83a 	sub	r4,r4,r2
 5088dac:	1908983a 	sll	r4,r3,r4
 5088db0:	d9400117 	ldw	r5,4(sp)
 5088db4:	1886d83a 	srl	r3,r3,r2
 5088db8:	2148b03a 	or	r4,r4,r5
 5088dbc:	81000515 	stw	r4,20(r16)
 5088dc0:	d8c00015 	stw	r3,0(sp)
 5088dc4:	003fcc06 	br	5088cf8 <__d2b+0x74>

05088dc8 <__ratio>:
 5088dc8:	defff904 	addi	sp,sp,-28
 5088dcc:	dc400315 	stw	r17,12(sp)
 5088dd0:	2823883a 	mov	r17,r5
 5088dd4:	d9400104 	addi	r5,sp,4
 5088dd8:	dfc00615 	stw	ra,24(sp)
 5088ddc:	dcc00515 	stw	r19,20(sp)
 5088de0:	dc800415 	stw	r18,16(sp)
 5088de4:	2027883a 	mov	r19,r4
 5088de8:	dc000215 	stw	r16,8(sp)
 5088dec:	5088b3c0 	call	5088b3c <__b2d>
 5088df0:	8809883a 	mov	r4,r17
 5088df4:	d80b883a 	mov	r5,sp
 5088df8:	1025883a 	mov	r18,r2
 5088dfc:	1821883a 	mov	r16,r3
 5088e00:	5088b3c0 	call	5088b3c <__b2d>
 5088e04:	99400417 	ldw	r5,16(r19)
 5088e08:	89000417 	ldw	r4,16(r17)
 5088e0c:	d9800117 	ldw	r6,4(sp)
 5088e10:	2909c83a 	sub	r4,r5,r4
 5088e14:	d9400017 	ldw	r5,0(sp)
 5088e18:	2008917a 	slli	r4,r4,5
 5088e1c:	314bc83a 	sub	r5,r6,r5
 5088e20:	290b883a 	add	r5,r5,r4
 5088e24:	01400e0e 	bge	zero,r5,5088e60 <__ratio+0x98>
 5088e28:	280a953a 	slli	r5,r5,20
 5088e2c:	2c21883a 	add	r16,r5,r16
 5088e30:	9009883a 	mov	r4,r18
 5088e34:	800b883a 	mov	r5,r16
 5088e38:	100d883a 	mov	r6,r2
 5088e3c:	180f883a 	mov	r7,r3
 5088e40:	508af480 	call	508af48 <__divdf3>
 5088e44:	dfc00617 	ldw	ra,24(sp)
 5088e48:	dcc00517 	ldw	r19,20(sp)
 5088e4c:	dc800417 	ldw	r18,16(sp)
 5088e50:	dc400317 	ldw	r17,12(sp)
 5088e54:	dc000217 	ldw	r16,8(sp)
 5088e58:	dec00704 	addi	sp,sp,28
 5088e5c:	f800283a 	ret
 5088e60:	280a953a 	slli	r5,r5,20
 5088e64:	1947c83a 	sub	r3,r3,r5
 5088e68:	003ff106 	br	5088e30 <__ratio+0x68>

05088e6c <_mprec_log10>:
 5088e6c:	defffe04 	addi	sp,sp,-8
 5088e70:	dc000015 	stw	r16,0(sp)
 5088e74:	dfc00115 	stw	ra,4(sp)
 5088e78:	008005c4 	movi	r2,23
 5088e7c:	2021883a 	mov	r16,r4
 5088e80:	11000d0e 	bge	r2,r4,5088eb8 <_mprec_log10+0x4c>
 5088e84:	0005883a 	mov	r2,zero
 5088e88:	00cffc34 	movhi	r3,16368
 5088e8c:	843fffc4 	addi	r16,r16,-1
 5088e90:	1009883a 	mov	r4,r2
 5088e94:	180b883a 	mov	r5,r3
 5088e98:	000d883a 	mov	r6,zero
 5088e9c:	01d00934 	movhi	r7,16420
 5088ea0:	508ac640 	call	508ac64 <__muldf3>
 5088ea4:	803ff91e 	bne	r16,zero,5088e8c <_mprec_log10+0x20>
 5088ea8:	dfc00117 	ldw	ra,4(sp)
 5088eac:	dc000017 	ldw	r16,0(sp)
 5088eb0:	dec00204 	addi	sp,sp,8
 5088eb4:	f800283a 	ret
 5088eb8:	202090fa 	slli	r16,r4,3
 5088ebc:	00814274 	movhi	r2,1289
 5088ec0:	10bc7b04 	addi	r2,r2,-3604
 5088ec4:	1421883a 	add	r16,r2,r16
 5088ec8:	80800017 	ldw	r2,0(r16)
 5088ecc:	80c00117 	ldw	r3,4(r16)
 5088ed0:	dfc00117 	ldw	ra,4(sp)
 5088ed4:	dc000017 	ldw	r16,0(sp)
 5088ed8:	dec00204 	addi	sp,sp,8
 5088edc:	f800283a 	ret

05088ee0 <__copybits>:
 5088ee0:	297fffc4 	addi	r5,r5,-1
 5088ee4:	31c00417 	ldw	r7,16(r6)
 5088ee8:	2811d17a 	srai	r8,r5,5
 5088eec:	30800504 	addi	r2,r6,20
 5088ef0:	39c00144 	addi	r7,r7,5
 5088ef4:	42000044 	addi	r8,r8,1
 5088ef8:	39cf883a 	add	r7,r7,r7
 5088efc:	4211883a 	add	r8,r8,r8
 5088f00:	39cf883a 	add	r7,r7,r7
 5088f04:	4211883a 	add	r8,r8,r8
 5088f08:	31cf883a 	add	r7,r6,r7
 5088f0c:	2211883a 	add	r8,r4,r8
 5088f10:	11c00d2e 	bgeu	r2,r7,5088f48 <__copybits+0x68>
 5088f14:	2007883a 	mov	r3,r4
 5088f18:	11400017 	ldw	r5,0(r2)
 5088f1c:	18c00104 	addi	r3,r3,4
 5088f20:	10800104 	addi	r2,r2,4
 5088f24:	197fff15 	stw	r5,-4(r3)
 5088f28:	11fffb36 	bltu	r2,r7,5088f18 <__copybits+0x38>
 5088f2c:	3985c83a 	sub	r2,r7,r6
 5088f30:	10bffac4 	addi	r2,r2,-21
 5088f34:	1004d0ba 	srli	r2,r2,2
 5088f38:	10800044 	addi	r2,r2,1
 5088f3c:	1085883a 	add	r2,r2,r2
 5088f40:	1085883a 	add	r2,r2,r2
 5088f44:	2089883a 	add	r4,r4,r2
 5088f48:	2200032e 	bgeu	r4,r8,5088f58 <__copybits+0x78>
 5088f4c:	20000015 	stw	zero,0(r4)
 5088f50:	21000104 	addi	r4,r4,4
 5088f54:	223ffd36 	bltu	r4,r8,5088f4c <__copybits+0x6c>
 5088f58:	f800283a 	ret

05088f5c <__any_on>:
 5088f5c:	21800417 	ldw	r6,16(r4)
 5088f60:	2805d17a 	srai	r2,r5,5
 5088f64:	20c00504 	addi	r3,r4,20
 5088f68:	30800f0e 	bge	r6,r2,5088fa8 <__any_on+0x4c>
 5088f6c:	3005883a 	mov	r2,r6
 5088f70:	10800144 	addi	r2,r2,5
 5088f74:	1085883a 	add	r2,r2,r2
 5088f78:	1085883a 	add	r2,r2,r2
 5088f7c:	2089883a 	add	r4,r4,r2
 5088f80:	1900152e 	bgeu	r3,r4,5088fd8 <__any_on+0x7c>
 5088f84:	20bfff17 	ldw	r2,-4(r4)
 5088f88:	213fff04 	addi	r4,r4,-4
 5088f8c:	1000041e 	bne	r2,zero,5088fa0 <__any_on+0x44>
 5088f90:	1900112e 	bgeu	r3,r4,5088fd8 <__any_on+0x7c>
 5088f94:	213fff04 	addi	r4,r4,-4
 5088f98:	20800017 	ldw	r2,0(r4)
 5088f9c:	103ffc26 	beq	r2,zero,5088f90 <__any_on+0x34>
 5088fa0:	00800044 	movi	r2,1
 5088fa4:	f800283a 	ret
 5088fa8:	11bff10e 	bge	r2,r6,5088f70 <__any_on+0x14>
 5088fac:	294007cc 	andi	r5,r5,31
 5088fb0:	283fef26 	beq	r5,zero,5088f70 <__any_on+0x14>
 5088fb4:	11800144 	addi	r6,r2,5
 5088fb8:	318d883a 	add	r6,r6,r6
 5088fbc:	318d883a 	add	r6,r6,r6
 5088fc0:	218d883a 	add	r6,r4,r6
 5088fc4:	31800017 	ldw	r6,0(r6)
 5088fc8:	314ed83a 	srl	r7,r6,r5
 5088fcc:	394a983a 	sll	r5,r7,r5
 5088fd0:	29bff31e 	bne	r5,r6,5088fa0 <__any_on+0x44>
 5088fd4:	003fe606 	br	5088f70 <__any_on+0x14>
 5088fd8:	0005883a 	mov	r2,zero
 5088fdc:	f800283a 	ret

05088fe0 <_realloc_r>:
 5088fe0:	defff504 	addi	sp,sp,-44
 5088fe4:	dd400615 	stw	r21,24(sp)
 5088fe8:	dc800315 	stw	r18,12(sp)
 5088fec:	dc000115 	stw	r16,4(sp)
 5088ff0:	dfc00a15 	stw	ra,40(sp)
 5088ff4:	df000915 	stw	fp,36(sp)
 5088ff8:	ddc00815 	stw	r23,32(sp)
 5088ffc:	dd800715 	stw	r22,28(sp)
 5089000:	dd000515 	stw	r20,20(sp)
 5089004:	dcc00415 	stw	r19,16(sp)
 5089008:	dc400215 	stw	r17,8(sp)
 508900c:	2821883a 	mov	r16,r5
 5089010:	202b883a 	mov	r21,r4
 5089014:	3025883a 	mov	r18,r6
 5089018:	28009626 	beq	r5,zero,5089274 <_realloc_r+0x294>
 508901c:	508c28c0 	call	508c28c <__malloc_lock>
 5089020:	80bfff17 	ldw	r2,-4(r16)
 5089024:	04ffff04 	movi	r19,-4
 5089028:	90c002c4 	addi	r3,r18,11
 508902c:	01000584 	movi	r4,22
 5089030:	85bffe04 	addi	r22,r16,-8
 5089034:	14e6703a 	and	r19,r2,r19
 5089038:	20c0372e 	bgeu	r4,r3,5089118 <_realloc_r+0x138>
 508903c:	047ffe04 	movi	r17,-8
 5089040:	1c62703a 	and	r17,r3,r17
 5089044:	8807883a 	mov	r3,r17
 5089048:	88005a16 	blt	r17,zero,50891b4 <_realloc_r+0x1d4>
 508904c:	8c805936 	bltu	r17,r18,50891b4 <_realloc_r+0x1d4>
 5089050:	98c0340e 	bge	r19,r3,5089124 <_realloc_r+0x144>
 5089054:	07014274 	movhi	fp,1289
 5089058:	e73e0704 	addi	fp,fp,-2020
 508905c:	e1400217 	ldw	r5,8(fp)
 5089060:	b4c9883a 	add	r4,r22,r19
 5089064:	29009026 	beq	r5,r4,50892a8 <_realloc_r+0x2c8>
 5089068:	21800117 	ldw	r6,4(r4)
 508906c:	01ffff84 	movi	r7,-2
 5089070:	31ce703a 	and	r7,r6,r7
 5089074:	21cf883a 	add	r7,r4,r7
 5089078:	39c00117 	ldw	r7,4(r7)
 508907c:	39c0004c 	andi	r7,r7,1
 5089080:	38004326 	beq	r7,zero,5089190 <_realloc_r+0x1b0>
 5089084:	000d883a 	mov	r6,zero
 5089088:	0009883a 	mov	r4,zero
 508908c:	1080004c 	andi	r2,r2,1
 5089090:	10005a1e 	bne	r2,zero,50891fc <_realloc_r+0x21c>
 5089094:	85fffe17 	ldw	r23,-8(r16)
 5089098:	00bfff04 	movi	r2,-4
 508909c:	b5efc83a 	sub	r23,r22,r23
 50890a0:	b9c00117 	ldw	r7,4(r23)
 50890a4:	388e703a 	and	r7,r7,r2
 50890a8:	3ccf883a 	add	r7,r7,r19
 50890ac:	20005226 	beq	r4,zero,50891f8 <_realloc_r+0x218>
 50890b0:	31e9883a 	add	r20,r6,r7
 50890b4:	2140c726 	beq	r4,r5,50893d4 <_realloc_r+0x3f4>
 50890b8:	a0c04f16 	blt	r20,r3,50891f8 <_realloc_r+0x218>
 50890bc:	20800317 	ldw	r2,12(r4)
 50890c0:	20c00217 	ldw	r3,8(r4)
 50890c4:	99bfff04 	addi	r6,r19,-4
 50890c8:	01000904 	movi	r4,36
 50890cc:	18800315 	stw	r2,12(r3)
 50890d0:	10c00215 	stw	r3,8(r2)
 50890d4:	b8c00217 	ldw	r3,8(r23)
 50890d8:	b8800317 	ldw	r2,12(r23)
 50890dc:	bc800204 	addi	r18,r23,8
 50890e0:	18800315 	stw	r2,12(r3)
 50890e4:	10c00215 	stw	r3,8(r2)
 50890e8:	2180ed36 	bltu	r4,r6,50894a0 <_realloc_r+0x4c0>
 50890ec:	008004c4 	movi	r2,19
 50890f0:	11809b2e 	bgeu	r2,r6,5089360 <_realloc_r+0x380>
 50890f4:	80800017 	ldw	r2,0(r16)
 50890f8:	b8800215 	stw	r2,8(r23)
 50890fc:	80800117 	ldw	r2,4(r16)
 5089100:	b8800315 	stw	r2,12(r23)
 5089104:	008006c4 	movi	r2,27
 5089108:	1180f936 	bltu	r2,r6,50894f0 <_realloc_r+0x510>
 508910c:	b8800404 	addi	r2,r23,16
 5089110:	80c00204 	addi	r3,r16,8
 5089114:	00009406 	br	5089368 <_realloc_r+0x388>
 5089118:	00c00404 	movi	r3,16
 508911c:	1823883a 	mov	r17,r3
 5089120:	003fca06 	br	508904c <_realloc_r+0x6c>
 5089124:	9829883a 	mov	r20,r19
 5089128:	a447c83a 	sub	r3,r20,r17
 508912c:	010003c4 	movi	r4,15
 5089130:	1080004c 	andi	r2,r2,1
 5089134:	20c02336 	bltu	r4,r3,50891c4 <_realloc_r+0x1e4>
 5089138:	1504b03a 	or	r2,r2,r20
 508913c:	b0800115 	stw	r2,4(r22)
 5089140:	b52d883a 	add	r22,r22,r20
 5089144:	b0800117 	ldw	r2,4(r22)
 5089148:	10800054 	ori	r2,r2,1
 508914c:	b0800115 	stw	r2,4(r22)
 5089150:	a809883a 	mov	r4,r21
 5089154:	508c2ac0 	call	508c2ac <__malloc_unlock>
 5089158:	8025883a 	mov	r18,r16
 508915c:	9005883a 	mov	r2,r18
 5089160:	dfc00a17 	ldw	ra,40(sp)
 5089164:	df000917 	ldw	fp,36(sp)
 5089168:	ddc00817 	ldw	r23,32(sp)
 508916c:	dd800717 	ldw	r22,28(sp)
 5089170:	dd400617 	ldw	r21,24(sp)
 5089174:	dd000517 	ldw	r20,20(sp)
 5089178:	dcc00417 	ldw	r19,16(sp)
 508917c:	dc800317 	ldw	r18,12(sp)
 5089180:	dc400217 	ldw	r17,8(sp)
 5089184:	dc000117 	ldw	r16,4(sp)
 5089188:	dec00b04 	addi	sp,sp,44
 508918c:	f800283a 	ret
 5089190:	01ffff04 	movi	r7,-4
 5089194:	31cc703a 	and	r6,r6,r7
 5089198:	34e9883a 	add	r20,r6,r19
 508919c:	a0ffbb16 	blt	r20,r3,508908c <_realloc_r+0xac>
 50891a0:	20c00317 	ldw	r3,12(r4)
 50891a4:	21000217 	ldw	r4,8(r4)
 50891a8:	20c00315 	stw	r3,12(r4)
 50891ac:	19000215 	stw	r4,8(r3)
 50891b0:	003fdd06 	br	5089128 <_realloc_r+0x148>
 50891b4:	00800304 	movi	r2,12
 50891b8:	a8800015 	stw	r2,0(r21)
 50891bc:	0025883a 	mov	r18,zero
 50891c0:	003fe606 	br	508915c <_realloc_r+0x17c>
 50891c4:	1444b03a 	or	r2,r2,r17
 50891c8:	b0800115 	stw	r2,4(r22)
 50891cc:	b44b883a 	add	r5,r22,r17
 50891d0:	18800054 	ori	r2,r3,1
 50891d4:	28800115 	stw	r2,4(r5)
 50891d8:	28c7883a 	add	r3,r5,r3
 50891dc:	18800117 	ldw	r2,4(r3)
 50891e0:	a809883a 	mov	r4,r21
 50891e4:	29400204 	addi	r5,r5,8
 50891e8:	10800054 	ori	r2,r2,1
 50891ec:	18800115 	stw	r2,4(r3)
 50891f0:	50869280 	call	5086928 <_free_r>
 50891f4:	003fd606 	br	5089150 <_realloc_r+0x170>
 50891f8:	38c0330e 	bge	r7,r3,50892c8 <_realloc_r+0x2e8>
 50891fc:	900b883a 	mov	r5,r18
 5089200:	a809883a 	mov	r4,r21
 5089204:	50874c00 	call	50874c0 <_malloc_r>
 5089208:	1025883a 	mov	r18,r2
 508920c:	10001626 	beq	r2,zero,5089268 <_realloc_r+0x288>
 5089210:	80bfff17 	ldw	r2,-4(r16)
 5089214:	00ffff84 	movi	r3,-2
 5089218:	913ffe04 	addi	r4,r18,-8
 508921c:	10c6703a 	and	r3,r2,r3
 5089220:	b0c7883a 	add	r3,r22,r3
 5089224:	20c09926 	beq	r4,r3,508948c <_realloc_r+0x4ac>
 5089228:	99bfff04 	addi	r6,r19,-4
 508922c:	00800904 	movi	r2,36
 5089230:	11806436 	bltu	r2,r6,50893c4 <_realloc_r+0x3e4>
 5089234:	00c004c4 	movi	r3,19
 5089238:	19804036 	bltu	r3,r6,508933c <_realloc_r+0x35c>
 508923c:	9005883a 	mov	r2,r18
 5089240:	8007883a 	mov	r3,r16
 5089244:	19000017 	ldw	r4,0(r3)
 5089248:	11000015 	stw	r4,0(r2)
 508924c:	19000117 	ldw	r4,4(r3)
 5089250:	11000115 	stw	r4,4(r2)
 5089254:	18c00217 	ldw	r3,8(r3)
 5089258:	10c00215 	stw	r3,8(r2)
 508925c:	a809883a 	mov	r4,r21
 5089260:	800b883a 	mov	r5,r16
 5089264:	50869280 	call	5086928 <_free_r>
 5089268:	a809883a 	mov	r4,r21
 508926c:	508c2ac0 	call	508c2ac <__malloc_unlock>
 5089270:	003fba06 	br	508915c <_realloc_r+0x17c>
 5089274:	300b883a 	mov	r5,r6
 5089278:	dfc00a17 	ldw	ra,40(sp)
 508927c:	df000917 	ldw	fp,36(sp)
 5089280:	ddc00817 	ldw	r23,32(sp)
 5089284:	dd800717 	ldw	r22,28(sp)
 5089288:	dd400617 	ldw	r21,24(sp)
 508928c:	dd000517 	ldw	r20,20(sp)
 5089290:	dcc00417 	ldw	r19,16(sp)
 5089294:	dc800317 	ldw	r18,12(sp)
 5089298:	dc400217 	ldw	r17,8(sp)
 508929c:	dc000117 	ldw	r16,4(sp)
 50892a0:	dec00b04 	addi	sp,sp,44
 50892a4:	50874c01 	jmpi	50874c0 <_malloc_r>
 50892a8:	29800117 	ldw	r6,4(r5)
 50892ac:	013fff04 	movi	r4,-4
 50892b0:	89c00404 	addi	r7,r17,16
 50892b4:	310c703a 	and	r6,r6,r4
 50892b8:	34c9883a 	add	r4,r6,r19
 50892bc:	21c0340e 	bge	r4,r7,5089390 <_realloc_r+0x3b0>
 50892c0:	2809883a 	mov	r4,r5
 50892c4:	003f7106 	br	508908c <_realloc_r+0xac>
 50892c8:	b8800317 	ldw	r2,12(r23)
 50892cc:	b8c00217 	ldw	r3,8(r23)
 50892d0:	99bfff04 	addi	r6,r19,-4
 50892d4:	01000904 	movi	r4,36
 50892d8:	18800315 	stw	r2,12(r3)
 50892dc:	10c00215 	stw	r3,8(r2)
 50892e0:	bc800204 	addi	r18,r23,8
 50892e4:	21807836 	bltu	r4,r6,50894c8 <_realloc_r+0x4e8>
 50892e8:	008004c4 	movi	r2,19
 50892ec:	1180732e 	bgeu	r2,r6,50894bc <_realloc_r+0x4dc>
 50892f0:	80800017 	ldw	r2,0(r16)
 50892f4:	b8800215 	stw	r2,8(r23)
 50892f8:	80800117 	ldw	r2,4(r16)
 50892fc:	b8800315 	stw	r2,12(r23)
 5089300:	008006c4 	movi	r2,27
 5089304:	11808936 	bltu	r2,r6,508952c <_realloc_r+0x54c>
 5089308:	b8800404 	addi	r2,r23,16
 508930c:	80c00204 	addi	r3,r16,8
 5089310:	19000017 	ldw	r4,0(r3)
 5089314:	9021883a 	mov	r16,r18
 5089318:	3829883a 	mov	r20,r7
 508931c:	11000015 	stw	r4,0(r2)
 5089320:	19000117 	ldw	r4,4(r3)
 5089324:	b82d883a 	mov	r22,r23
 5089328:	11000115 	stw	r4,4(r2)
 508932c:	18c00217 	ldw	r3,8(r3)
 5089330:	10c00215 	stw	r3,8(r2)
 5089334:	b8800117 	ldw	r2,4(r23)
 5089338:	003f7b06 	br	5089128 <_realloc_r+0x148>
 508933c:	80c00017 	ldw	r3,0(r16)
 5089340:	90c00015 	stw	r3,0(r18)
 5089344:	80c00117 	ldw	r3,4(r16)
 5089348:	90c00115 	stw	r3,4(r18)
 508934c:	00c006c4 	movi	r3,27
 5089350:	19804636 	bltu	r3,r6,508946c <_realloc_r+0x48c>
 5089354:	90800204 	addi	r2,r18,8
 5089358:	80c00204 	addi	r3,r16,8
 508935c:	003fb906 	br	5089244 <_realloc_r+0x264>
 5089360:	9005883a 	mov	r2,r18
 5089364:	8007883a 	mov	r3,r16
 5089368:	19000017 	ldw	r4,0(r3)
 508936c:	9021883a 	mov	r16,r18
 5089370:	b82d883a 	mov	r22,r23
 5089374:	11000015 	stw	r4,0(r2)
 5089378:	19000117 	ldw	r4,4(r3)
 508937c:	11000115 	stw	r4,4(r2)
 5089380:	18c00217 	ldw	r3,8(r3)
 5089384:	10c00215 	stw	r3,8(r2)
 5089388:	b8800117 	ldw	r2,4(r23)
 508938c:	003f6606 	br	5089128 <_realloc_r+0x148>
 5089390:	2445c83a 	sub	r2,r4,r17
 5089394:	b46d883a 	add	r22,r22,r17
 5089398:	10800054 	ori	r2,r2,1
 508939c:	b0800115 	stw	r2,4(r22)
 50893a0:	80bfff17 	ldw	r2,-4(r16)
 50893a4:	a809883a 	mov	r4,r21
 50893a8:	e5800215 	stw	r22,8(fp)
 50893ac:	1080004c 	andi	r2,r2,1
 50893b0:	88a2b03a 	or	r17,r17,r2
 50893b4:	847fff15 	stw	r17,-4(r16)
 50893b8:	508c2ac0 	call	508c2ac <__malloc_unlock>
 50893bc:	8025883a 	mov	r18,r16
 50893c0:	003f6606 	br	508915c <_realloc_r+0x17c>
 50893c4:	9009883a 	mov	r4,r18
 50893c8:	800b883a 	mov	r5,r16
 50893cc:	5087e340 	call	5087e34 <memmove>
 50893d0:	003fa206 	br	508925c <_realloc_r+0x27c>
 50893d4:	88800404 	addi	r2,r17,16
 50893d8:	a0bf8716 	blt	r20,r2,50891f8 <_realloc_r+0x218>
 50893dc:	b8800317 	ldw	r2,12(r23)
 50893e0:	b8c00217 	ldw	r3,8(r23)
 50893e4:	99bfff04 	addi	r6,r19,-4
 50893e8:	01000904 	movi	r4,36
 50893ec:	18800315 	stw	r2,12(r3)
 50893f0:	10c00215 	stw	r3,8(r2)
 50893f4:	bc800204 	addi	r18,r23,8
 50893f8:	21806536 	bltu	r4,r6,5089590 <_realloc_r+0x5b0>
 50893fc:	008004c4 	movi	r2,19
 5089400:	1180592e 	bgeu	r2,r6,5089568 <_realloc_r+0x588>
 5089404:	80800017 	ldw	r2,0(r16)
 5089408:	b8800215 	stw	r2,8(r23)
 508940c:	80800117 	ldw	r2,4(r16)
 5089410:	b8800315 	stw	r2,12(r23)
 5089414:	008006c4 	movi	r2,27
 5089418:	11806136 	bltu	r2,r6,50895a0 <_realloc_r+0x5c0>
 508941c:	b8800404 	addi	r2,r23,16
 5089420:	80c00204 	addi	r3,r16,8
 5089424:	19000017 	ldw	r4,0(r3)
 5089428:	11000015 	stw	r4,0(r2)
 508942c:	19000117 	ldw	r4,4(r3)
 5089430:	11000115 	stw	r4,4(r2)
 5089434:	18c00217 	ldw	r3,8(r3)
 5089438:	10c00215 	stw	r3,8(r2)
 508943c:	a447c83a 	sub	r3,r20,r17
 5089440:	bc45883a 	add	r2,r23,r17
 5089444:	18c00054 	ori	r3,r3,1
 5089448:	10c00115 	stw	r3,4(r2)
 508944c:	b8c00117 	ldw	r3,4(r23)
 5089450:	e0800215 	stw	r2,8(fp)
 5089454:	a809883a 	mov	r4,r21
 5089458:	1880004c 	andi	r2,r3,1
 508945c:	88a2b03a 	or	r17,r17,r2
 5089460:	bc400115 	stw	r17,4(r23)
 5089464:	508c2ac0 	call	508c2ac <__malloc_unlock>
 5089468:	003f3c06 	br	508915c <_realloc_r+0x17c>
 508946c:	80c00217 	ldw	r3,8(r16)
 5089470:	90c00215 	stw	r3,8(r18)
 5089474:	80c00317 	ldw	r3,12(r16)
 5089478:	90c00315 	stw	r3,12(r18)
 508947c:	30802426 	beq	r6,r2,5089510 <_realloc_r+0x530>
 5089480:	90800404 	addi	r2,r18,16
 5089484:	80c00404 	addi	r3,r16,16
 5089488:	003f6e06 	br	5089244 <_realloc_r+0x264>
 508948c:	953fff17 	ldw	r20,-4(r18)
 5089490:	00ffff04 	movi	r3,-4
 5089494:	a0e8703a 	and	r20,r20,r3
 5089498:	a4e9883a 	add	r20,r20,r19
 508949c:	003f2206 	br	5089128 <_realloc_r+0x148>
 50894a0:	800b883a 	mov	r5,r16
 50894a4:	9009883a 	mov	r4,r18
 50894a8:	5087e340 	call	5087e34 <memmove>
 50894ac:	9021883a 	mov	r16,r18
 50894b0:	b8800117 	ldw	r2,4(r23)
 50894b4:	b82d883a 	mov	r22,r23
 50894b8:	003f1b06 	br	5089128 <_realloc_r+0x148>
 50894bc:	9005883a 	mov	r2,r18
 50894c0:	8007883a 	mov	r3,r16
 50894c4:	003f9206 	br	5089310 <_realloc_r+0x330>
 50894c8:	800b883a 	mov	r5,r16
 50894cc:	9009883a 	mov	r4,r18
 50894d0:	d9c00015 	stw	r7,0(sp)
 50894d4:	5087e340 	call	5087e34 <memmove>
 50894d8:	d9c00017 	ldw	r7,0(sp)
 50894dc:	9021883a 	mov	r16,r18
 50894e0:	b8800117 	ldw	r2,4(r23)
 50894e4:	3829883a 	mov	r20,r7
 50894e8:	b82d883a 	mov	r22,r23
 50894ec:	003f0e06 	br	5089128 <_realloc_r+0x148>
 50894f0:	80800217 	ldw	r2,8(r16)
 50894f4:	b8800415 	stw	r2,16(r23)
 50894f8:	80800317 	ldw	r2,12(r16)
 50894fc:	b8800515 	stw	r2,20(r23)
 5089500:	31001226 	beq	r6,r4,508954c <_realloc_r+0x56c>
 5089504:	b8800604 	addi	r2,r23,24
 5089508:	80c00404 	addi	r3,r16,16
 508950c:	003f9606 	br	5089368 <_realloc_r+0x388>
 5089510:	81000417 	ldw	r4,16(r16)
 5089514:	90800604 	addi	r2,r18,24
 5089518:	80c00604 	addi	r3,r16,24
 508951c:	91000415 	stw	r4,16(r18)
 5089520:	81000517 	ldw	r4,20(r16)
 5089524:	91000515 	stw	r4,20(r18)
 5089528:	003f4606 	br	5089244 <_realloc_r+0x264>
 508952c:	80800217 	ldw	r2,8(r16)
 5089530:	b8800415 	stw	r2,16(r23)
 5089534:	80800317 	ldw	r2,12(r16)
 5089538:	b8800515 	stw	r2,20(r23)
 508953c:	31000d26 	beq	r6,r4,5089574 <_realloc_r+0x594>
 5089540:	b8800604 	addi	r2,r23,24
 5089544:	80c00404 	addi	r3,r16,16
 5089548:	003f7106 	br	5089310 <_realloc_r+0x330>
 508954c:	81000417 	ldw	r4,16(r16)
 5089550:	b8800804 	addi	r2,r23,32
 5089554:	80c00604 	addi	r3,r16,24
 5089558:	b9000615 	stw	r4,24(r23)
 508955c:	81000517 	ldw	r4,20(r16)
 5089560:	b9000715 	stw	r4,28(r23)
 5089564:	003f8006 	br	5089368 <_realloc_r+0x388>
 5089568:	9005883a 	mov	r2,r18
 508956c:	8007883a 	mov	r3,r16
 5089570:	003fac06 	br	5089424 <_realloc_r+0x444>
 5089574:	81000417 	ldw	r4,16(r16)
 5089578:	b8800804 	addi	r2,r23,32
 508957c:	80c00604 	addi	r3,r16,24
 5089580:	b9000615 	stw	r4,24(r23)
 5089584:	81000517 	ldw	r4,20(r16)
 5089588:	b9000715 	stw	r4,28(r23)
 508958c:	003f6006 	br	5089310 <_realloc_r+0x330>
 5089590:	9009883a 	mov	r4,r18
 5089594:	800b883a 	mov	r5,r16
 5089598:	5087e340 	call	5087e34 <memmove>
 508959c:	003fa706 	br	508943c <_realloc_r+0x45c>
 50895a0:	80800217 	ldw	r2,8(r16)
 50895a4:	b8800415 	stw	r2,16(r23)
 50895a8:	80800317 	ldw	r2,12(r16)
 50895ac:	b8800515 	stw	r2,20(r23)
 50895b0:	31000326 	beq	r6,r4,50895c0 <_realloc_r+0x5e0>
 50895b4:	b8800604 	addi	r2,r23,24
 50895b8:	80c00404 	addi	r3,r16,16
 50895bc:	003f9906 	br	5089424 <_realloc_r+0x444>
 50895c0:	81000417 	ldw	r4,16(r16)
 50895c4:	b8800804 	addi	r2,r23,32
 50895c8:	80c00604 	addi	r3,r16,24
 50895cc:	b9000615 	stw	r4,24(r23)
 50895d0:	81000517 	ldw	r4,20(r16)
 50895d4:	b9000715 	stw	r4,28(r23)
 50895d8:	003f9206 	br	5089424 <_realloc_r+0x444>

050895dc <__isinfd>:
 50895dc:	0105c83a 	sub	r2,zero,r4
 50895e0:	1108b03a 	or	r4,r2,r4
 50895e4:	2004d7fa 	srli	r2,r4,31
 50895e8:	00e00034 	movhi	r3,32768
 50895ec:	18ffffc4 	addi	r3,r3,-1
 50895f0:	28ca703a 	and	r5,r5,r3
 50895f4:	1144b03a 	or	r2,r2,r5
 50895f8:	00dffc34 	movhi	r3,32752
 50895fc:	1885c83a 	sub	r2,r3,r2
 5089600:	0087c83a 	sub	r3,zero,r2
 5089604:	1884b03a 	or	r2,r3,r2
 5089608:	1005d7fa 	srai	r2,r2,31
 508960c:	10800044 	addi	r2,r2,1
 5089610:	f800283a 	ret

05089614 <__isnand>:
 5089614:	0105c83a 	sub	r2,zero,r4
 5089618:	1108b03a 	or	r4,r2,r4
 508961c:	2004d7fa 	srli	r2,r4,31
 5089620:	00e00034 	movhi	r3,32768
 5089624:	18ffffc4 	addi	r3,r3,-1
 5089628:	28ca703a 	and	r5,r5,r3
 508962c:	1144b03a 	or	r2,r2,r5
 5089630:	00dffc34 	movhi	r3,32752
 5089634:	1885c83a 	sub	r2,r3,r2
 5089638:	1004d7fa 	srli	r2,r2,31
 508963c:	f800283a 	ret

05089640 <_sbrk_r>:
 5089640:	defffd04 	addi	sp,sp,-12
 5089644:	dc400115 	stw	r17,4(sp)
 5089648:	dc000015 	stw	r16,0(sp)
 508964c:	2023883a 	mov	r17,r4
 5089650:	04014274 	movhi	r16,1289
 5089654:	840a3d04 	addi	r16,r16,10484
 5089658:	2809883a 	mov	r4,r5
 508965c:	dfc00215 	stw	ra,8(sp)
 5089660:	80000015 	stw	zero,0(r16)
 5089664:	508c46c0 	call	508c46c <sbrk>
 5089668:	00ffffc4 	movi	r3,-1
 508966c:	10c00526 	beq	r2,r3,5089684 <_sbrk_r+0x44>
 5089670:	dfc00217 	ldw	ra,8(sp)
 5089674:	dc400117 	ldw	r17,4(sp)
 5089678:	dc000017 	ldw	r16,0(sp)
 508967c:	dec00304 	addi	sp,sp,12
 5089680:	f800283a 	ret
 5089684:	80c00017 	ldw	r3,0(r16)
 5089688:	183ff926 	beq	r3,zero,5089670 <_sbrk_r+0x30>
 508968c:	88c00015 	stw	r3,0(r17)
 5089690:	dfc00217 	ldw	ra,8(sp)
 5089694:	dc400117 	ldw	r17,4(sp)
 5089698:	dc000017 	ldw	r16,0(sp)
 508969c:	dec00304 	addi	sp,sp,12
 50896a0:	f800283a 	ret

050896a4 <__sread>:
 50896a4:	defffe04 	addi	sp,sp,-8
 50896a8:	dc000015 	stw	r16,0(sp)
 50896ac:	2821883a 	mov	r16,r5
 50896b0:	2940038f 	ldh	r5,14(r5)
 50896b4:	dfc00115 	stw	ra,4(sp)
 50896b8:	5089c9c0 	call	5089c9c <_read_r>
 50896bc:	10000716 	blt	r2,zero,50896dc <__sread+0x38>
 50896c0:	80c01417 	ldw	r3,80(r16)
 50896c4:	1887883a 	add	r3,r3,r2
 50896c8:	80c01415 	stw	r3,80(r16)
 50896cc:	dfc00117 	ldw	ra,4(sp)
 50896d0:	dc000017 	ldw	r16,0(sp)
 50896d4:	dec00204 	addi	sp,sp,8
 50896d8:	f800283a 	ret
 50896dc:	80c0030b 	ldhu	r3,12(r16)
 50896e0:	18fbffcc 	andi	r3,r3,61439
 50896e4:	80c0030d 	sth	r3,12(r16)
 50896e8:	dfc00117 	ldw	ra,4(sp)
 50896ec:	dc000017 	ldw	r16,0(sp)
 50896f0:	dec00204 	addi	sp,sp,8
 50896f4:	f800283a 	ret

050896f8 <__swrite>:
 50896f8:	2880030b 	ldhu	r2,12(r5)
 50896fc:	defffb04 	addi	sp,sp,-20
 5089700:	dcc00315 	stw	r19,12(sp)
 5089704:	10c0400c 	andi	r3,r2,256
 5089708:	18ffffcc 	andi	r3,r3,65535
 508970c:	18e0001c 	xori	r3,r3,32768
 5089710:	dc800215 	stw	r18,8(sp)
 5089714:	dc400115 	stw	r17,4(sp)
 5089718:	dc000015 	stw	r16,0(sp)
 508971c:	dfc00415 	stw	ra,16(sp)
 5089720:	18e00004 	addi	r3,r3,-32768
 5089724:	2821883a 	mov	r16,r5
 5089728:	2027883a 	mov	r19,r4
 508972c:	3025883a 	mov	r18,r6
 5089730:	3823883a 	mov	r17,r7
 5089734:	18000526 	beq	r3,zero,508974c <__swrite+0x54>
 5089738:	2940038f 	ldh	r5,14(r5)
 508973c:	000d883a 	mov	r6,zero
 5089740:	01c00084 	movi	r7,2
 5089744:	5089c300 	call	5089c30 <_lseek_r>
 5089748:	8080030b 	ldhu	r2,12(r16)
 508974c:	8140038f 	ldh	r5,14(r16)
 5089750:	10bbffcc 	andi	r2,r2,61439
 5089754:	9809883a 	mov	r4,r19
 5089758:	900d883a 	mov	r6,r18
 508975c:	880f883a 	mov	r7,r17
 5089760:	8080030d 	sth	r2,12(r16)
 5089764:	dfc00417 	ldw	ra,16(sp)
 5089768:	dcc00317 	ldw	r19,12(sp)
 508976c:	dc800217 	ldw	r18,8(sp)
 5089770:	dc400117 	ldw	r17,4(sp)
 5089774:	dc000017 	ldw	r16,0(sp)
 5089778:	dec00504 	addi	sp,sp,20
 508977c:	50898881 	jmpi	5089888 <_write_r>

05089780 <__sseek>:
 5089780:	defffe04 	addi	sp,sp,-8
 5089784:	dc000015 	stw	r16,0(sp)
 5089788:	2821883a 	mov	r16,r5
 508978c:	2940038f 	ldh	r5,14(r5)
 5089790:	dfc00115 	stw	ra,4(sp)
 5089794:	5089c300 	call	5089c30 <_lseek_r>
 5089798:	00ffffc4 	movi	r3,-1
 508979c:	10c00826 	beq	r2,r3,50897c0 <__sseek+0x40>
 50897a0:	80c0030b 	ldhu	r3,12(r16)
 50897a4:	80801415 	stw	r2,80(r16)
 50897a8:	18c40014 	ori	r3,r3,4096
 50897ac:	80c0030d 	sth	r3,12(r16)
 50897b0:	dfc00117 	ldw	ra,4(sp)
 50897b4:	dc000017 	ldw	r16,0(sp)
 50897b8:	dec00204 	addi	sp,sp,8
 50897bc:	f800283a 	ret
 50897c0:	80c0030b 	ldhu	r3,12(r16)
 50897c4:	18fbffcc 	andi	r3,r3,61439
 50897c8:	80c0030d 	sth	r3,12(r16)
 50897cc:	dfc00117 	ldw	ra,4(sp)
 50897d0:	dc000017 	ldw	r16,0(sp)
 50897d4:	dec00204 	addi	sp,sp,8
 50897d8:	f800283a 	ret

050897dc <__sclose>:
 50897dc:	2940038f 	ldh	r5,14(r5)
 50897e0:	50899b01 	jmpi	50899b0 <_close_r>

050897e4 <strcmp>:
 50897e4:	2904b03a 	or	r2,r5,r4
 50897e8:	108000cc 	andi	r2,r2,3
 50897ec:	1000171e 	bne	r2,zero,508984c <strcmp+0x68>
 50897f0:	20800017 	ldw	r2,0(r4)
 50897f4:	28c00017 	ldw	r3,0(r5)
 50897f8:	10c0141e 	bne	r2,r3,508984c <strcmp+0x68>
 50897fc:	027fbff4 	movhi	r9,65279
 5089800:	4a7fbfc4 	addi	r9,r9,-257
 5089804:	1247883a 	add	r3,r2,r9
 5089808:	0084303a 	nor	r2,zero,r2
 508980c:	1884703a 	and	r2,r3,r2
 5089810:	02202074 	movhi	r8,32897
 5089814:	42202004 	addi	r8,r8,-32640
 5089818:	1204703a 	and	r2,r2,r8
 508981c:	10000226 	beq	r2,zero,5089828 <strcmp+0x44>
 5089820:	00001706 	br	5089880 <strcmp+0x9c>
 5089824:	3000161e 	bne	r6,zero,5089880 <strcmp+0x9c>
 5089828:	21000104 	addi	r4,r4,4
 508982c:	20800017 	ldw	r2,0(r4)
 5089830:	29400104 	addi	r5,r5,4
 5089834:	28c00017 	ldw	r3,0(r5)
 5089838:	124f883a 	add	r7,r2,r9
 508983c:	008c303a 	nor	r6,zero,r2
 5089840:	398c703a 	and	r6,r7,r6
 5089844:	320c703a 	and	r6,r6,r8
 5089848:	10fff626 	beq	r2,r3,5089824 <strcmp+0x40>
 508984c:	20800007 	ldb	r2,0(r4)
 5089850:	1000051e 	bne	r2,zero,5089868 <strcmp+0x84>
 5089854:	00000606 	br	5089870 <strcmp+0x8c>
 5089858:	21000044 	addi	r4,r4,1
 508985c:	20800007 	ldb	r2,0(r4)
 5089860:	29400044 	addi	r5,r5,1
 5089864:	10000226 	beq	r2,zero,5089870 <strcmp+0x8c>
 5089868:	28c00007 	ldb	r3,0(r5)
 508986c:	10fffa26 	beq	r2,r3,5089858 <strcmp+0x74>
 5089870:	20c00003 	ldbu	r3,0(r4)
 5089874:	28800003 	ldbu	r2,0(r5)
 5089878:	1885c83a 	sub	r2,r3,r2
 508987c:	f800283a 	ret
 5089880:	0005883a 	mov	r2,zero
 5089884:	f800283a 	ret

05089888 <_write_r>:
 5089888:	defffd04 	addi	sp,sp,-12
 508988c:	dc400115 	stw	r17,4(sp)
 5089890:	dc000015 	stw	r16,0(sp)
 5089894:	2023883a 	mov	r17,r4
 5089898:	04014274 	movhi	r16,1289
 508989c:	840a3d04 	addi	r16,r16,10484
 50898a0:	2809883a 	mov	r4,r5
 50898a4:	300b883a 	mov	r5,r6
 50898a8:	380d883a 	mov	r6,r7
 50898ac:	dfc00215 	stw	ra,8(sp)
 50898b0:	80000015 	stw	zero,0(r16)
 50898b4:	508c59c0 	call	508c59c <write>
 50898b8:	00ffffc4 	movi	r3,-1
 50898bc:	10c00526 	beq	r2,r3,50898d4 <_write_r+0x4c>
 50898c0:	dfc00217 	ldw	ra,8(sp)
 50898c4:	dc400117 	ldw	r17,4(sp)
 50898c8:	dc000017 	ldw	r16,0(sp)
 50898cc:	dec00304 	addi	sp,sp,12
 50898d0:	f800283a 	ret
 50898d4:	80c00017 	ldw	r3,0(r16)
 50898d8:	183ff926 	beq	r3,zero,50898c0 <_write_r+0x38>
 50898dc:	88c00015 	stw	r3,0(r17)
 50898e0:	dfc00217 	ldw	ra,8(sp)
 50898e4:	dc400117 	ldw	r17,4(sp)
 50898e8:	dc000017 	ldw	r16,0(sp)
 50898ec:	dec00304 	addi	sp,sp,12
 50898f0:	f800283a 	ret

050898f4 <_calloc_r>:
 50898f4:	314b383a 	mul	r5,r6,r5
 50898f8:	defffe04 	addi	sp,sp,-8
 50898fc:	dc000015 	stw	r16,0(sp)
 5089900:	dfc00115 	stw	ra,4(sp)
 5089904:	50874c00 	call	50874c0 <_malloc_r>
 5089908:	1021883a 	mov	r16,r2
 508990c:	10000c26 	beq	r2,zero,5089940 <_calloc_r+0x4c>
 5089910:	11bfff17 	ldw	r6,-4(r2)
 5089914:	00ffff04 	movi	r3,-4
 5089918:	00800904 	movi	r2,36
 508991c:	30cc703a 	and	r6,r6,r3
 5089920:	30cd883a 	add	r6,r6,r3
 5089924:	11801436 	bltu	r2,r6,5089978 <_calloc_r+0x84>
 5089928:	00c004c4 	movi	r3,19
 508992c:	19800936 	bltu	r3,r6,5089954 <_calloc_r+0x60>
 5089930:	8005883a 	mov	r2,r16
 5089934:	10000015 	stw	zero,0(r2)
 5089938:	10000115 	stw	zero,4(r2)
 508993c:	10000215 	stw	zero,8(r2)
 5089940:	8005883a 	mov	r2,r16
 5089944:	dfc00117 	ldw	ra,4(sp)
 5089948:	dc000017 	ldw	r16,0(sp)
 508994c:	dec00204 	addi	sp,sp,8
 5089950:	f800283a 	ret
 5089954:	80000015 	stw	zero,0(r16)
 5089958:	80000115 	stw	zero,4(r16)
 508995c:	00c006c4 	movi	r3,27
 5089960:	19800d2e 	bgeu	r3,r6,5089998 <_calloc_r+0xa4>
 5089964:	80000215 	stw	zero,8(r16)
 5089968:	80000315 	stw	zero,12(r16)
 508996c:	30800c26 	beq	r6,r2,50899a0 <_calloc_r+0xac>
 5089970:	80800404 	addi	r2,r16,16
 5089974:	003fef06 	br	5089934 <_calloc_r+0x40>
 5089978:	8009883a 	mov	r4,r16
 508997c:	000b883a 	mov	r5,zero
 5089980:	5087f5c0 	call	5087f5c <memset>
 5089984:	8005883a 	mov	r2,r16
 5089988:	dfc00117 	ldw	ra,4(sp)
 508998c:	dc000017 	ldw	r16,0(sp)
 5089990:	dec00204 	addi	sp,sp,8
 5089994:	f800283a 	ret
 5089998:	80800204 	addi	r2,r16,8
 508999c:	003fe506 	br	5089934 <_calloc_r+0x40>
 50899a0:	80000415 	stw	zero,16(r16)
 50899a4:	80000515 	stw	zero,20(r16)
 50899a8:	80800604 	addi	r2,r16,24
 50899ac:	003fe106 	br	5089934 <_calloc_r+0x40>

050899b0 <_close_r>:
 50899b0:	defffd04 	addi	sp,sp,-12
 50899b4:	dc400115 	stw	r17,4(sp)
 50899b8:	dc000015 	stw	r16,0(sp)
 50899bc:	2023883a 	mov	r17,r4
 50899c0:	04014274 	movhi	r16,1289
 50899c4:	840a3d04 	addi	r16,r16,10484
 50899c8:	2809883a 	mov	r4,r5
 50899cc:	dfc00215 	stw	ra,8(sp)
 50899d0:	80000015 	stw	zero,0(r16)
 50899d4:	508bb780 	call	508bb78 <close>
 50899d8:	00ffffc4 	movi	r3,-1
 50899dc:	10c00526 	beq	r2,r3,50899f4 <_close_r+0x44>
 50899e0:	dfc00217 	ldw	ra,8(sp)
 50899e4:	dc400117 	ldw	r17,4(sp)
 50899e8:	dc000017 	ldw	r16,0(sp)
 50899ec:	dec00304 	addi	sp,sp,12
 50899f0:	f800283a 	ret
 50899f4:	80c00017 	ldw	r3,0(r16)
 50899f8:	183ff926 	beq	r3,zero,50899e0 <_close_r+0x30>
 50899fc:	88c00015 	stw	r3,0(r17)
 5089a00:	dfc00217 	ldw	ra,8(sp)
 5089a04:	dc400117 	ldw	r17,4(sp)
 5089a08:	dc000017 	ldw	r16,0(sp)
 5089a0c:	dec00304 	addi	sp,sp,12
 5089a10:	f800283a 	ret

05089a14 <_fclose_r>:
 5089a14:	defffc04 	addi	sp,sp,-16
 5089a18:	dc400115 	stw	r17,4(sp)
 5089a1c:	dc000015 	stw	r16,0(sp)
 5089a20:	dfc00315 	stw	ra,12(sp)
 5089a24:	dc800215 	stw	r18,8(sp)
 5089a28:	2821883a 	mov	r16,r5
 5089a2c:	2023883a 	mov	r17,r4
 5089a30:	28003426 	beq	r5,zero,5089b04 <_fclose_r+0xf0>
 5089a34:	50867ac0 	call	50867ac <__sfp_lock_acquire>
 5089a38:	88000226 	beq	r17,zero,5089a44 <_fclose_r+0x30>
 5089a3c:	88800e17 	ldw	r2,56(r17)
 5089a40:	10003826 	beq	r2,zero,5089b24 <_fclose_r+0x110>
 5089a44:	8080030f 	ldh	r2,12(r16)
 5089a48:	10002526 	beq	r2,zero,5089ae0 <_fclose_r+0xcc>
 5089a4c:	8809883a 	mov	r4,r17
 5089a50:	800b883a 	mov	r5,r16
 5089a54:	50862fc0 	call	50862fc <_fflush_r>
 5089a58:	1025883a 	mov	r18,r2
 5089a5c:	80800b17 	ldw	r2,44(r16)
 5089a60:	10000426 	beq	r2,zero,5089a74 <_fclose_r+0x60>
 5089a64:	81400717 	ldw	r5,28(r16)
 5089a68:	8809883a 	mov	r4,r17
 5089a6c:	103ee83a 	callr	r2
 5089a70:	10003516 	blt	r2,zero,5089b48 <_fclose_r+0x134>
 5089a74:	8080030b 	ldhu	r2,12(r16)
 5089a78:	1080200c 	andi	r2,r2,128
 5089a7c:	10bfffcc 	andi	r2,r2,65535
 5089a80:	10a0001c 	xori	r2,r2,32768
 5089a84:	10a00004 	addi	r2,r2,-32768
 5089a88:	10002b1e 	bne	r2,zero,5089b38 <_fclose_r+0x124>
 5089a8c:	81400c17 	ldw	r5,48(r16)
 5089a90:	28000526 	beq	r5,zero,5089aa8 <_fclose_r+0x94>
 5089a94:	80801004 	addi	r2,r16,64
 5089a98:	28800226 	beq	r5,r2,5089aa4 <_fclose_r+0x90>
 5089a9c:	8809883a 	mov	r4,r17
 5089aa0:	50869280 	call	5086928 <_free_r>
 5089aa4:	80000c15 	stw	zero,48(r16)
 5089aa8:	81401117 	ldw	r5,68(r16)
 5089aac:	28000326 	beq	r5,zero,5089abc <_fclose_r+0xa8>
 5089ab0:	8809883a 	mov	r4,r17
 5089ab4:	50869280 	call	5086928 <_free_r>
 5089ab8:	80001115 	stw	zero,68(r16)
 5089abc:	8000030d 	sth	zero,12(r16)
 5089ac0:	50867b00 	call	50867b0 <__sfp_lock_release>
 5089ac4:	9005883a 	mov	r2,r18
 5089ac8:	dfc00317 	ldw	ra,12(sp)
 5089acc:	dc800217 	ldw	r18,8(sp)
 5089ad0:	dc400117 	ldw	r17,4(sp)
 5089ad4:	dc000017 	ldw	r16,0(sp)
 5089ad8:	dec00404 	addi	sp,sp,16
 5089adc:	f800283a 	ret
 5089ae0:	50867b00 	call	50867b0 <__sfp_lock_release>
 5089ae4:	0025883a 	mov	r18,zero
 5089ae8:	9005883a 	mov	r2,r18
 5089aec:	dfc00317 	ldw	ra,12(sp)
 5089af0:	dc800217 	ldw	r18,8(sp)
 5089af4:	dc400117 	ldw	r17,4(sp)
 5089af8:	dc000017 	ldw	r16,0(sp)
 5089afc:	dec00404 	addi	sp,sp,16
 5089b00:	f800283a 	ret
 5089b04:	0025883a 	mov	r18,zero
 5089b08:	9005883a 	mov	r2,r18
 5089b0c:	dfc00317 	ldw	ra,12(sp)
 5089b10:	dc800217 	ldw	r18,8(sp)
 5089b14:	dc400117 	ldw	r17,4(sp)
 5089b18:	dc000017 	ldw	r16,0(sp)
 5089b1c:	dec00404 	addi	sp,sp,16
 5089b20:	f800283a 	ret
 5089b24:	8809883a 	mov	r4,r17
 5089b28:	50865a40 	call	50865a4 <__sinit>
 5089b2c:	8080030f 	ldh	r2,12(r16)
 5089b30:	103fc61e 	bne	r2,zero,5089a4c <_fclose_r+0x38>
 5089b34:	003fea06 	br	5089ae0 <_fclose_r+0xcc>
 5089b38:	81400417 	ldw	r5,16(r16)
 5089b3c:	8809883a 	mov	r4,r17
 5089b40:	50869280 	call	5086928 <_free_r>
 5089b44:	003fd106 	br	5089a8c <_fclose_r+0x78>
 5089b48:	04bfffc4 	movi	r18,-1
 5089b4c:	003fc906 	br	5089a74 <_fclose_r+0x60>

05089b50 <fclose>:
 5089b50:	00814274 	movhi	r2,1289
 5089b54:	10838c04 	addi	r2,r2,3632
 5089b58:	200b883a 	mov	r5,r4
 5089b5c:	11000017 	ldw	r4,0(r2)
 5089b60:	5089a141 	jmpi	5089a14 <_fclose_r>

05089b64 <_fstat_r>:
 5089b64:	defffd04 	addi	sp,sp,-12
 5089b68:	dc400115 	stw	r17,4(sp)
 5089b6c:	dc000015 	stw	r16,0(sp)
 5089b70:	2023883a 	mov	r17,r4
 5089b74:	04014274 	movhi	r16,1289
 5089b78:	840a3d04 	addi	r16,r16,10484
 5089b7c:	2809883a 	mov	r4,r5
 5089b80:	300b883a 	mov	r5,r6
 5089b84:	dfc00215 	stw	ra,8(sp)
 5089b88:	80000015 	stw	zero,0(r16)
 5089b8c:	508bcbc0 	call	508bcbc <fstat>
 5089b90:	00ffffc4 	movi	r3,-1
 5089b94:	10c00526 	beq	r2,r3,5089bac <_fstat_r+0x48>
 5089b98:	dfc00217 	ldw	ra,8(sp)
 5089b9c:	dc400117 	ldw	r17,4(sp)
 5089ba0:	dc000017 	ldw	r16,0(sp)
 5089ba4:	dec00304 	addi	sp,sp,12
 5089ba8:	f800283a 	ret
 5089bac:	80c00017 	ldw	r3,0(r16)
 5089bb0:	183ff926 	beq	r3,zero,5089b98 <_fstat_r+0x34>
 5089bb4:	88c00015 	stw	r3,0(r17)
 5089bb8:	dfc00217 	ldw	ra,8(sp)
 5089bbc:	dc400117 	ldw	r17,4(sp)
 5089bc0:	dc000017 	ldw	r16,0(sp)
 5089bc4:	dec00304 	addi	sp,sp,12
 5089bc8:	f800283a 	ret

05089bcc <_isatty_r>:
 5089bcc:	defffd04 	addi	sp,sp,-12
 5089bd0:	dc400115 	stw	r17,4(sp)
 5089bd4:	dc000015 	stw	r16,0(sp)
 5089bd8:	2023883a 	mov	r17,r4
 5089bdc:	04014274 	movhi	r16,1289
 5089be0:	840a3d04 	addi	r16,r16,10484
 5089be4:	2809883a 	mov	r4,r5
 5089be8:	dfc00215 	stw	ra,8(sp)
 5089bec:	80000015 	stw	zero,0(r16)
 5089bf0:	508bf680 	call	508bf68 <isatty>
 5089bf4:	00ffffc4 	movi	r3,-1
 5089bf8:	10c00526 	beq	r2,r3,5089c10 <_isatty_r+0x44>
 5089bfc:	dfc00217 	ldw	ra,8(sp)
 5089c00:	dc400117 	ldw	r17,4(sp)
 5089c04:	dc000017 	ldw	r16,0(sp)
 5089c08:	dec00304 	addi	sp,sp,12
 5089c0c:	f800283a 	ret
 5089c10:	80c00017 	ldw	r3,0(r16)
 5089c14:	183ff926 	beq	r3,zero,5089bfc <_isatty_r+0x30>
 5089c18:	88c00015 	stw	r3,0(r17)
 5089c1c:	dfc00217 	ldw	ra,8(sp)
 5089c20:	dc400117 	ldw	r17,4(sp)
 5089c24:	dc000017 	ldw	r16,0(sp)
 5089c28:	dec00304 	addi	sp,sp,12
 5089c2c:	f800283a 	ret

05089c30 <_lseek_r>:
 5089c30:	defffd04 	addi	sp,sp,-12
 5089c34:	dc400115 	stw	r17,4(sp)
 5089c38:	dc000015 	stw	r16,0(sp)
 5089c3c:	2023883a 	mov	r17,r4
 5089c40:	04014274 	movhi	r16,1289
 5089c44:	840a3d04 	addi	r16,r16,10484
 5089c48:	2809883a 	mov	r4,r5
 5089c4c:	300b883a 	mov	r5,r6
 5089c50:	380d883a 	mov	r6,r7
 5089c54:	dfc00215 	stw	ra,8(sp)
 5089c58:	80000015 	stw	zero,0(r16)
 5089c5c:	508c1440 	call	508c144 <lseek>
 5089c60:	00ffffc4 	movi	r3,-1
 5089c64:	10c00526 	beq	r2,r3,5089c7c <_lseek_r+0x4c>
 5089c68:	dfc00217 	ldw	ra,8(sp)
 5089c6c:	dc400117 	ldw	r17,4(sp)
 5089c70:	dc000017 	ldw	r16,0(sp)
 5089c74:	dec00304 	addi	sp,sp,12
 5089c78:	f800283a 	ret
 5089c7c:	80c00017 	ldw	r3,0(r16)
 5089c80:	183ff926 	beq	r3,zero,5089c68 <_lseek_r+0x38>
 5089c84:	88c00015 	stw	r3,0(r17)
 5089c88:	dfc00217 	ldw	ra,8(sp)
 5089c8c:	dc400117 	ldw	r17,4(sp)
 5089c90:	dc000017 	ldw	r16,0(sp)
 5089c94:	dec00304 	addi	sp,sp,12
 5089c98:	f800283a 	ret

05089c9c <_read_r>:
 5089c9c:	defffd04 	addi	sp,sp,-12
 5089ca0:	dc400115 	stw	r17,4(sp)
 5089ca4:	dc000015 	stw	r16,0(sp)
 5089ca8:	2023883a 	mov	r17,r4
 5089cac:	04014274 	movhi	r16,1289
 5089cb0:	840a3d04 	addi	r16,r16,10484
 5089cb4:	2809883a 	mov	r4,r5
 5089cb8:	300b883a 	mov	r5,r6
 5089cbc:	380d883a 	mov	r6,r7
 5089cc0:	dfc00215 	stw	ra,8(sp)
 5089cc4:	80000015 	stw	zero,0(r16)
 5089cc8:	508c31c0 	call	508c31c <read>
 5089ccc:	00ffffc4 	movi	r3,-1
 5089cd0:	10c00526 	beq	r2,r3,5089ce8 <_read_r+0x4c>
 5089cd4:	dfc00217 	ldw	ra,8(sp)
 5089cd8:	dc400117 	ldw	r17,4(sp)
 5089cdc:	dc000017 	ldw	r16,0(sp)
 5089ce0:	dec00304 	addi	sp,sp,12
 5089ce4:	f800283a 	ret
 5089ce8:	80c00017 	ldw	r3,0(r16)
 5089cec:	183ff926 	beq	r3,zero,5089cd4 <_read_r+0x38>
 5089cf0:	88c00015 	stw	r3,0(r17)
 5089cf4:	dfc00217 	ldw	ra,8(sp)
 5089cf8:	dc400117 	ldw	r17,4(sp)
 5089cfc:	dc000017 	ldw	r16,0(sp)
 5089d00:	dec00304 	addi	sp,sp,12
 5089d04:	f800283a 	ret

05089d08 <__udivdi3>:
 5089d08:	defff504 	addi	sp,sp,-44
 5089d0c:	dd000515 	stw	r20,20(sp)
 5089d10:	dcc00415 	stw	r19,16(sp)
 5089d14:	dc800315 	stw	r18,12(sp)
 5089d18:	dc400215 	stw	r17,8(sp)
 5089d1c:	dc000115 	stw	r16,4(sp)
 5089d20:	dfc00a15 	stw	ra,40(sp)
 5089d24:	df000915 	stw	fp,36(sp)
 5089d28:	ddc00815 	stw	r23,32(sp)
 5089d2c:	dd800715 	stw	r22,28(sp)
 5089d30:	dd400615 	stw	r21,24(sp)
 5089d34:	2025883a 	mov	r18,r4
 5089d38:	2823883a 	mov	r17,r5
 5089d3c:	3021883a 	mov	r16,r6
 5089d40:	2027883a 	mov	r19,r4
 5089d44:	2829883a 	mov	r20,r5
 5089d48:	3800401e 	bne	r7,zero,5089e4c <__udivdi3+0x144>
 5089d4c:	2980602e 	bgeu	r5,r6,5089ed0 <__udivdi3+0x1c8>
 5089d50:	00bfffd4 	movui	r2,65535
 5089d54:	1180aa36 	bltu	r2,r6,508a000 <__udivdi3+0x2f8>
 5089d58:	00803fc4 	movi	r2,255
 5089d5c:	11814436 	bltu	r2,r6,508a270 <__udivdi3+0x568>
 5089d60:	0005883a 	mov	r2,zero
 5089d64:	0007883a 	mov	r3,zero
 5089d68:	3084d83a 	srl	r2,r6,r2
 5089d6c:	01014274 	movhi	r4,1289
 5089d70:	213cb504 	addi	r4,r4,-3372
 5089d74:	2085883a 	add	r2,r4,r2
 5089d78:	10800003 	ldbu	r2,0(r2)
 5089d7c:	10c7883a 	add	r3,r2,r3
 5089d80:	00800804 	movi	r2,32
 5089d84:	10c5c83a 	sub	r2,r2,r3
 5089d88:	10000526 	beq	r2,zero,5089da0 <__udivdi3+0x98>
 5089d8c:	88a2983a 	sll	r17,r17,r2
 5089d90:	90c6d83a 	srl	r3,r18,r3
 5089d94:	30a0983a 	sll	r16,r6,r2
 5089d98:	90a6983a 	sll	r19,r18,r2
 5089d9c:	88e8b03a 	or	r20,r17,r3
 5089da0:	8022d43a 	srli	r17,r16,16
 5089da4:	a009883a 	mov	r4,r20
 5089da8:	857fffcc 	andi	r21,r16,65535
 5089dac:	880b883a 	mov	r5,r17
 5089db0:	50827d00 	call	50827d0 <__umodsi3>
 5089db4:	a009883a 	mov	r4,r20
 5089db8:	880b883a 	mov	r5,r17
 5089dbc:	102d883a 	mov	r22,r2
 5089dc0:	50827c80 	call	50827c8 <__udivsi3>
 5089dc4:	b02c943a 	slli	r22,r22,16
 5089dc8:	9806d43a 	srli	r3,r19,16
 5089dcc:	1549383a 	mul	r4,r2,r21
 5089dd0:	1025883a 	mov	r18,r2
 5089dd4:	b0c6b03a 	or	r3,r22,r3
 5089dd8:	1900052e 	bgeu	r3,r4,5089df0 <__udivdi3+0xe8>
 5089ddc:	1c07883a 	add	r3,r3,r16
 5089de0:	10bfffc4 	addi	r2,r2,-1
 5089de4:	1c000136 	bltu	r3,r16,5089dec <__udivdi3+0xe4>
 5089de8:	19013636 	bltu	r3,r4,508a2c4 <__udivdi3+0x5bc>
 5089dec:	1025883a 	mov	r18,r2
 5089df0:	1929c83a 	sub	r20,r3,r4
 5089df4:	a009883a 	mov	r4,r20
 5089df8:	880b883a 	mov	r5,r17
 5089dfc:	50827d00 	call	50827d0 <__umodsi3>
 5089e00:	102d883a 	mov	r22,r2
 5089e04:	a009883a 	mov	r4,r20
 5089e08:	880b883a 	mov	r5,r17
 5089e0c:	50827c80 	call	50827c8 <__udivsi3>
 5089e10:	b02c943a 	slli	r22,r22,16
 5089e14:	156b383a 	mul	r21,r2,r21
 5089e18:	9cffffcc 	andi	r19,r19,65535
 5089e1c:	b4e6b03a 	or	r19,r22,r19
 5089e20:	1009883a 	mov	r4,r2
 5089e24:	9d40052e 	bgeu	r19,r21,5089e3c <__udivdi3+0x134>
 5089e28:	9c27883a 	add	r19,r19,r16
 5089e2c:	10bfffc4 	addi	r2,r2,-1
 5089e30:	9c00f736 	bltu	r19,r16,508a210 <__udivdi3+0x508>
 5089e34:	9d40f62e 	bgeu	r19,r21,508a210 <__udivdi3+0x508>
 5089e38:	213fff84 	addi	r4,r4,-2
 5089e3c:	9004943a 	slli	r2,r18,16
 5089e40:	0007883a 	mov	r3,zero
 5089e44:	2084b03a 	or	r2,r4,r2
 5089e48:	00001506 	br	5089ea0 <__udivdi3+0x198>
 5089e4c:	29c06536 	bltu	r5,r7,5089fe4 <__udivdi3+0x2dc>
 5089e50:	00bfffd4 	movui	r2,65535
 5089e54:	11c0652e 	bgeu	r2,r7,5089fec <__udivdi3+0x2e4>
 5089e58:	00804034 	movhi	r2,256
 5089e5c:	10bfffc4 	addi	r2,r2,-1
 5089e60:	11c0f736 	bltu	r2,r7,508a240 <__udivdi3+0x538>
 5089e64:	00c00404 	movi	r3,16
 5089e68:	180b883a 	mov	r5,r3
 5089e6c:	38c6d83a 	srl	r3,r7,r3
 5089e70:	01014274 	movhi	r4,1289
 5089e74:	213cb504 	addi	r4,r4,-3372
 5089e78:	04000804 	movi	r16,32
 5089e7c:	20c7883a 	add	r3,r4,r3
 5089e80:	18800003 	ldbu	r2,0(r3)
 5089e84:	1145883a 	add	r2,r2,r5
 5089e88:	80a1c83a 	sub	r16,r16,r2
 5089e8c:	8000691e 	bne	r16,zero,508a034 <__udivdi3+0x32c>
 5089e90:	0007883a 	mov	r3,zero
 5089e94:	3c406536 	bltu	r7,r17,508a02c <__udivdi3+0x324>
 5089e98:	9180642e 	bgeu	r18,r6,508a02c <__udivdi3+0x324>
 5089e9c:	0005883a 	mov	r2,zero
 5089ea0:	dfc00a17 	ldw	ra,40(sp)
 5089ea4:	df000917 	ldw	fp,36(sp)
 5089ea8:	ddc00817 	ldw	r23,32(sp)
 5089eac:	dd800717 	ldw	r22,28(sp)
 5089eb0:	dd400617 	ldw	r21,24(sp)
 5089eb4:	dd000517 	ldw	r20,20(sp)
 5089eb8:	dcc00417 	ldw	r19,16(sp)
 5089ebc:	dc800317 	ldw	r18,12(sp)
 5089ec0:	dc400217 	ldw	r17,8(sp)
 5089ec4:	dc000117 	ldw	r16,4(sp)
 5089ec8:	dec00b04 	addi	sp,sp,44
 5089ecc:	f800283a 	ret
 5089ed0:	3000041e 	bne	r6,zero,5089ee4 <__udivdi3+0x1dc>
 5089ed4:	01000044 	movi	r4,1
 5089ed8:	000b883a 	mov	r5,zero
 5089edc:	50827c80 	call	50827c8 <__udivsi3>
 5089ee0:	1021883a 	mov	r16,r2
 5089ee4:	00bfffd4 	movui	r2,65535
 5089ee8:	14004b2e 	bgeu	r2,r16,508a018 <__udivdi3+0x310>
 5089eec:	00804034 	movhi	r2,256
 5089ef0:	10bfffc4 	addi	r2,r2,-1
 5089ef4:	1400d836 	bltu	r2,r16,508a258 <__udivdi3+0x550>
 5089ef8:	00800404 	movi	r2,16
 5089efc:	1007883a 	mov	r3,r2
 5089f00:	8084d83a 	srl	r2,r16,r2
 5089f04:	01014274 	movhi	r4,1289
 5089f08:	213cb504 	addi	r4,r4,-3372
 5089f0c:	2085883a 	add	r2,r4,r2
 5089f10:	10800003 	ldbu	r2,0(r2)
 5089f14:	10c7883a 	add	r3,r2,r3
 5089f18:	00800804 	movi	r2,32
 5089f1c:	10c5c83a 	sub	r2,r2,r3
 5089f20:	1000891e 	bne	r2,zero,508a148 <__udivdi3+0x440>
 5089f24:	8028d43a 	srli	r20,r16,16
 5089f28:	8c23c83a 	sub	r17,r17,r16
 5089f2c:	84bfffcc 	andi	r18,r16,65535
 5089f30:	00c00044 	movi	r3,1
 5089f34:	8809883a 	mov	r4,r17
 5089f38:	a00b883a 	mov	r5,r20
 5089f3c:	d8c00015 	stw	r3,0(sp)
 5089f40:	50827d00 	call	50827d0 <__umodsi3>
 5089f44:	8809883a 	mov	r4,r17
 5089f48:	a00b883a 	mov	r5,r20
 5089f4c:	102b883a 	mov	r21,r2
 5089f50:	50827c80 	call	50827c8 <__udivsi3>
 5089f54:	a82a943a 	slli	r21,r21,16
 5089f58:	9808d43a 	srli	r4,r19,16
 5089f5c:	148b383a 	mul	r5,r2,r18
 5089f60:	1023883a 	mov	r17,r2
 5089f64:	a908b03a 	or	r4,r21,r4
 5089f68:	d8c00017 	ldw	r3,0(sp)
 5089f6c:	2140052e 	bgeu	r4,r5,5089f84 <__udivdi3+0x27c>
 5089f70:	2409883a 	add	r4,r4,r16
 5089f74:	10bfffc4 	addi	r2,r2,-1
 5089f78:	24000136 	bltu	r4,r16,5089f80 <__udivdi3+0x278>
 5089f7c:	2140ce36 	bltu	r4,r5,508a2b8 <__udivdi3+0x5b0>
 5089f80:	1023883a 	mov	r17,r2
 5089f84:	216bc83a 	sub	r21,r4,r5
 5089f88:	a809883a 	mov	r4,r21
 5089f8c:	a00b883a 	mov	r5,r20
 5089f90:	d8c00015 	stw	r3,0(sp)
 5089f94:	50827d00 	call	50827d0 <__umodsi3>
 5089f98:	102d883a 	mov	r22,r2
 5089f9c:	a809883a 	mov	r4,r21
 5089fa0:	a00b883a 	mov	r5,r20
 5089fa4:	50827c80 	call	50827c8 <__udivsi3>
 5089fa8:	b02c943a 	slli	r22,r22,16
 5089fac:	14a5383a 	mul	r18,r2,r18
 5089fb0:	9cffffcc 	andi	r19,r19,65535
 5089fb4:	b4e6b03a 	or	r19,r22,r19
 5089fb8:	1009883a 	mov	r4,r2
 5089fbc:	d8c00017 	ldw	r3,0(sp)
 5089fc0:	9c80052e 	bgeu	r19,r18,5089fd8 <__udivdi3+0x2d0>
 5089fc4:	9c27883a 	add	r19,r19,r16
 5089fc8:	10bfffc4 	addi	r2,r2,-1
 5089fcc:	9c009236 	bltu	r19,r16,508a218 <__udivdi3+0x510>
 5089fd0:	9c80912e 	bgeu	r19,r18,508a218 <__udivdi3+0x510>
 5089fd4:	213fff84 	addi	r4,r4,-2
 5089fd8:	8804943a 	slli	r2,r17,16
 5089fdc:	2084b03a 	or	r2,r4,r2
 5089fe0:	003faf06 	br	5089ea0 <__udivdi3+0x198>
 5089fe4:	0007883a 	mov	r3,zero
 5089fe8:	003fac06 	br	5089e9c <__udivdi3+0x194>
 5089fec:	00803fc4 	movi	r2,255
 5089ff0:	11c09636 	bltu	r2,r7,508a24c <__udivdi3+0x544>
 5089ff4:	0007883a 	mov	r3,zero
 5089ff8:	000b883a 	mov	r5,zero
 5089ffc:	003f9b06 	br	5089e6c <__udivdi3+0x164>
 508a000:	00804034 	movhi	r2,256
 508a004:	10bfffc4 	addi	r2,r2,-1
 508a008:	11809636 	bltu	r2,r6,508a264 <__udivdi3+0x55c>
 508a00c:	00800404 	movi	r2,16
 508a010:	1007883a 	mov	r3,r2
 508a014:	003f5406 	br	5089d68 <__udivdi3+0x60>
 508a018:	00803fc4 	movi	r2,255
 508a01c:	14009736 	bltu	r2,r16,508a27c <__udivdi3+0x574>
 508a020:	0005883a 	mov	r2,zero
 508a024:	0007883a 	mov	r3,zero
 508a028:	003fb506 	br	5089f00 <__udivdi3+0x1f8>
 508a02c:	00800044 	movi	r2,1
 508a030:	003f9b06 	br	5089ea0 <__udivdi3+0x198>
 508a034:	3086d83a 	srl	r3,r6,r2
 508a038:	3c0e983a 	sll	r7,r7,r16
 508a03c:	88aad83a 	srl	r21,r17,r2
 508a040:	9084d83a 	srl	r2,r18,r2
 508a044:	38e6b03a 	or	r19,r7,r3
 508a048:	9828d43a 	srli	r20,r19,16
 508a04c:	8c22983a 	sll	r17,r17,r16
 508a050:	a809883a 	mov	r4,r21
 508a054:	a00b883a 	mov	r5,r20
 508a058:	342c983a 	sll	r22,r6,r16
 508a05c:	88a2b03a 	or	r17,r17,r2
 508a060:	50827d00 	call	50827d0 <__umodsi3>
 508a064:	a809883a 	mov	r4,r21
 508a068:	a00b883a 	mov	r5,r20
 508a06c:	1039883a 	mov	fp,r2
 508a070:	50827c80 	call	50827c8 <__udivsi3>
 508a074:	102b883a 	mov	r21,r2
 508a078:	9dffffcc 	andi	r23,r19,65535
 508a07c:	e008943a 	slli	r4,fp,16
 508a080:	8804d43a 	srli	r2,r17,16
 508a084:	adcd383a 	mul	r6,r21,r23
 508a088:	2088b03a 	or	r4,r4,r2
 508a08c:	2180042e 	bgeu	r4,r6,508a0a0 <__udivdi3+0x398>
 508a090:	24c9883a 	add	r4,r4,r19
 508a094:	a8bfffc4 	addi	r2,r21,-1
 508a098:	24c07f2e 	bgeu	r4,r19,508a298 <__udivdi3+0x590>
 508a09c:	102b883a 	mov	r21,r2
 508a0a0:	21b9c83a 	sub	fp,r4,r6
 508a0a4:	e009883a 	mov	r4,fp
 508a0a8:	a00b883a 	mov	r5,r20
 508a0ac:	50827d00 	call	50827d0 <__umodsi3>
 508a0b0:	e009883a 	mov	r4,fp
 508a0b4:	a00b883a 	mov	r5,r20
 508a0b8:	d8800015 	stw	r2,0(sp)
 508a0bc:	50827c80 	call	50827c8 <__udivsi3>
 508a0c0:	d8c00017 	ldw	r3,0(sp)
 508a0c4:	15cb383a 	mul	r5,r2,r23
 508a0c8:	8c7fffcc 	andi	r17,r17,65535
 508a0cc:	1806943a 	slli	r3,r3,16
 508a0d0:	1009883a 	mov	r4,r2
 508a0d4:	1c46b03a 	or	r3,r3,r17
 508a0d8:	1940042e 	bgeu	r3,r5,508a0ec <__udivdi3+0x3e4>
 508a0dc:	1cc7883a 	add	r3,r3,r19
 508a0e0:	10bfffc4 	addi	r2,r2,-1
 508a0e4:	1cc0682e 	bgeu	r3,r19,508a288 <__udivdi3+0x580>
 508a0e8:	1009883a 	mov	r4,r2
 508a0ec:	a804943a 	slli	r2,r21,16
 508a0f0:	b1ffffcc 	andi	r7,r22,65535
 508a0f4:	b02cd43a 	srli	r22,r22,16
 508a0f8:	2084b03a 	or	r2,r4,r2
 508a0fc:	113fffcc 	andi	r4,r2,65535
 508a100:	100cd43a 	srli	r6,r2,16
 508a104:	21d1383a 	mul	r8,r4,r7
 508a108:	2589383a 	mul	r4,r4,r22
 508a10c:	31cf383a 	mul	r7,r6,r7
 508a110:	4012d43a 	srli	r9,r8,16
 508a114:	1947c83a 	sub	r3,r3,r5
 508a118:	3909883a 	add	r4,r7,r4
 508a11c:	2249883a 	add	r4,r4,r9
 508a120:	35ad383a 	mul	r22,r6,r22
 508a124:	21c0022e 	bgeu	r4,r7,508a130 <__udivdi3+0x428>
 508a128:	01400074 	movhi	r5,1
 508a12c:	b16d883a 	add	r22,r22,r5
 508a130:	200ad43a 	srli	r5,r4,16
 508a134:	b16d883a 	add	r22,r22,r5
 508a138:	1d803e36 	bltu	r3,r22,508a234 <__udivdi3+0x52c>
 508a13c:	1d803826 	beq	r3,r22,508a220 <__udivdi3+0x518>
 508a140:	0007883a 	mov	r3,zero
 508a144:	003f5606 	br	5089ea0 <__udivdi3+0x198>
 508a148:	80a0983a 	sll	r16,r16,r2
 508a14c:	88ead83a 	srl	r21,r17,r3
 508a150:	90c6d83a 	srl	r3,r18,r3
 508a154:	8028d43a 	srli	r20,r16,16
 508a158:	88a2983a 	sll	r17,r17,r2
 508a15c:	a809883a 	mov	r4,r21
 508a160:	a00b883a 	mov	r5,r20
 508a164:	88ecb03a 	or	r22,r17,r3
 508a168:	90a6983a 	sll	r19,r18,r2
 508a16c:	50827d00 	call	50827d0 <__umodsi3>
 508a170:	a809883a 	mov	r4,r21
 508a174:	a00b883a 	mov	r5,r20
 508a178:	1023883a 	mov	r17,r2
 508a17c:	50827c80 	call	50827c8 <__udivsi3>
 508a180:	102b883a 	mov	r21,r2
 508a184:	84bfffcc 	andi	r18,r16,65535
 508a188:	8808943a 	slli	r4,r17,16
 508a18c:	b004d43a 	srli	r2,r22,16
 508a190:	ac87383a 	mul	r3,r21,r18
 508a194:	2088b03a 	or	r4,r4,r2
 508a198:	20c0062e 	bgeu	r4,r3,508a1b4 <__udivdi3+0x4ac>
 508a19c:	2409883a 	add	r4,r4,r16
 508a1a0:	a8bfffc4 	addi	r2,r21,-1
 508a1a4:	24004236 	bltu	r4,r16,508a2b0 <__udivdi3+0x5a8>
 508a1a8:	20c0412e 	bgeu	r4,r3,508a2b0 <__udivdi3+0x5a8>
 508a1ac:	ad7fff84 	addi	r21,r21,-2
 508a1b0:	2409883a 	add	r4,r4,r16
 508a1b4:	20efc83a 	sub	r23,r4,r3
 508a1b8:	b809883a 	mov	r4,r23
 508a1bc:	a00b883a 	mov	r5,r20
 508a1c0:	50827d00 	call	50827d0 <__umodsi3>
 508a1c4:	1023883a 	mov	r17,r2
 508a1c8:	a00b883a 	mov	r5,r20
 508a1cc:	b809883a 	mov	r4,r23
 508a1d0:	50827c80 	call	50827c8 <__udivsi3>
 508a1d4:	8822943a 	slli	r17,r17,16
 508a1d8:	148b383a 	mul	r5,r2,r18
 508a1dc:	b5bfffcc 	andi	r22,r22,65535
 508a1e0:	8da2b03a 	or	r17,r17,r22
 508a1e4:	8940062e 	bgeu	r17,r5,508a200 <__udivdi3+0x4f8>
 508a1e8:	8c23883a 	add	r17,r17,r16
 508a1ec:	10ffffc4 	addi	r3,r2,-1
 508a1f0:	8c002d36 	bltu	r17,r16,508a2a8 <__udivdi3+0x5a0>
 508a1f4:	89402c2e 	bgeu	r17,r5,508a2a8 <__udivdi3+0x5a0>
 508a1f8:	10bfff84 	addi	r2,r2,-2
 508a1fc:	8c23883a 	add	r17,r17,r16
 508a200:	a806943a 	slli	r3,r21,16
 508a204:	8963c83a 	sub	r17,r17,r5
 508a208:	10c6b03a 	or	r3,r2,r3
 508a20c:	003f4906 	br	5089f34 <__udivdi3+0x22c>
 508a210:	1009883a 	mov	r4,r2
 508a214:	003f0906 	br	5089e3c <__udivdi3+0x134>
 508a218:	1009883a 	mov	r4,r2
 508a21c:	003f6e06 	br	5089fd8 <__udivdi3+0x2d0>
 508a220:	2008943a 	slli	r4,r4,16
 508a224:	9420983a 	sll	r16,r18,r16
 508a228:	423fffcc 	andi	r8,r8,65535
 508a22c:	2209883a 	add	r4,r4,r8
 508a230:	813fc32e 	bgeu	r16,r4,508a140 <__udivdi3+0x438>
 508a234:	10bfffc4 	addi	r2,r2,-1
 508a238:	0007883a 	mov	r3,zero
 508a23c:	003f1806 	br	5089ea0 <__udivdi3+0x198>
 508a240:	00c00604 	movi	r3,24
 508a244:	180b883a 	mov	r5,r3
 508a248:	003f0806 	br	5089e6c <__udivdi3+0x164>
 508a24c:	00c00204 	movi	r3,8
 508a250:	180b883a 	mov	r5,r3
 508a254:	003f0506 	br	5089e6c <__udivdi3+0x164>
 508a258:	00800604 	movi	r2,24
 508a25c:	1007883a 	mov	r3,r2
 508a260:	003f2706 	br	5089f00 <__udivdi3+0x1f8>
 508a264:	00800604 	movi	r2,24
 508a268:	1007883a 	mov	r3,r2
 508a26c:	003ebe06 	br	5089d68 <__udivdi3+0x60>
 508a270:	00800204 	movi	r2,8
 508a274:	1007883a 	mov	r3,r2
 508a278:	003ebb06 	br	5089d68 <__udivdi3+0x60>
 508a27c:	00800204 	movi	r2,8
 508a280:	1007883a 	mov	r3,r2
 508a284:	003f1e06 	br	5089f00 <__udivdi3+0x1f8>
 508a288:	197f972e 	bgeu	r3,r5,508a0e8 <__udivdi3+0x3e0>
 508a28c:	213fff84 	addi	r4,r4,-2
 508a290:	1cc7883a 	add	r3,r3,r19
 508a294:	003f9506 	br	508a0ec <__udivdi3+0x3e4>
 508a298:	21bf802e 	bgeu	r4,r6,508a09c <__udivdi3+0x394>
 508a29c:	ad7fff84 	addi	r21,r21,-2
 508a2a0:	24c9883a 	add	r4,r4,r19
 508a2a4:	003f7e06 	br	508a0a0 <__udivdi3+0x398>
 508a2a8:	1805883a 	mov	r2,r3
 508a2ac:	003fd406 	br	508a200 <__udivdi3+0x4f8>
 508a2b0:	102b883a 	mov	r21,r2
 508a2b4:	003fbf06 	br	508a1b4 <__udivdi3+0x4ac>
 508a2b8:	8c7fff84 	addi	r17,r17,-2
 508a2bc:	2409883a 	add	r4,r4,r16
 508a2c0:	003f3006 	br	5089f84 <__udivdi3+0x27c>
 508a2c4:	94bfff84 	addi	r18,r18,-2
 508a2c8:	1c07883a 	add	r3,r3,r16
 508a2cc:	003ec806 	br	5089df0 <__udivdi3+0xe8>

0508a2d0 <__umoddi3>:
 508a2d0:	defff504 	addi	sp,sp,-44
 508a2d4:	dd000515 	stw	r20,20(sp)
 508a2d8:	dcc00415 	stw	r19,16(sp)
 508a2dc:	dc800315 	stw	r18,12(sp)
 508a2e0:	dc400215 	stw	r17,8(sp)
 508a2e4:	dc000115 	stw	r16,4(sp)
 508a2e8:	dfc00a15 	stw	ra,40(sp)
 508a2ec:	df000915 	stw	fp,36(sp)
 508a2f0:	ddc00815 	stw	r23,32(sp)
 508a2f4:	dd800715 	stw	r22,28(sp)
 508a2f8:	dd400615 	stw	r21,24(sp)
 508a2fc:	2025883a 	mov	r18,r4
 508a300:	2823883a 	mov	r17,r5
 508a304:	3021883a 	mov	r16,r6
 508a308:	2027883a 	mov	r19,r4
 508a30c:	2829883a 	mov	r20,r5
 508a310:	3800351e 	bne	r7,zero,508a3e8 <__umoddi3+0x118>
 508a314:	29804d2e 	bgeu	r5,r6,508a44c <__umoddi3+0x17c>
 508a318:	00bfffd4 	movui	r2,65535
 508a31c:	11809a36 	bltu	r2,r6,508a588 <__umoddi3+0x2b8>
 508a320:	00803fc4 	movi	r2,255
 508a324:	11813936 	bltu	r2,r6,508a80c <__umoddi3+0x53c>
 508a328:	0005883a 	mov	r2,zero
 508a32c:	0009883a 	mov	r4,zero
 508a330:	3084d83a 	srl	r2,r6,r2
 508a334:	00c14274 	movhi	r3,1289
 508a338:	18fcb504 	addi	r3,r3,-3372
 508a33c:	05400804 	movi	r21,32
 508a340:	1885883a 	add	r2,r3,r2
 508a344:	10800003 	ldbu	r2,0(r2)
 508a348:	1109883a 	add	r4,r2,r4
 508a34c:	a92bc83a 	sub	r21,r21,r4
 508a350:	a800ec26 	beq	r21,zero,508a704 <__umoddi3+0x434>
 508a354:	8d62983a 	sll	r17,r17,r21
 508a358:	9108d83a 	srl	r4,r18,r4
 508a35c:	3560983a 	sll	r16,r6,r21
 508a360:	9566983a 	sll	r19,r18,r21
 508a364:	8928b03a 	or	r20,r17,r4
 508a368:	8022d43a 	srli	r17,r16,16
 508a36c:	a009883a 	mov	r4,r20
 508a370:	84bfffcc 	andi	r18,r16,65535
 508a374:	880b883a 	mov	r5,r17
 508a378:	50827d00 	call	50827d0 <__umodsi3>
 508a37c:	a009883a 	mov	r4,r20
 508a380:	880b883a 	mov	r5,r17
 508a384:	102d883a 	mov	r22,r2
 508a388:	50827c80 	call	50827c8 <__udivsi3>
 508a38c:	b02c943a 	slli	r22,r22,16
 508a390:	9806d43a 	srli	r3,r19,16
 508a394:	1485383a 	mul	r2,r2,r18
 508a398:	b0c6b03a 	or	r3,r22,r3
 508a39c:	1880042e 	bgeu	r3,r2,508a3b0 <__umoddi3+0xe0>
 508a3a0:	1c07883a 	add	r3,r3,r16
 508a3a4:	1c000236 	bltu	r3,r16,508a3b0 <__umoddi3+0xe0>
 508a3a8:	1880012e 	bgeu	r3,r2,508a3b0 <__umoddi3+0xe0>
 508a3ac:	1c07883a 	add	r3,r3,r16
 508a3b0:	18a9c83a 	sub	r20,r3,r2
 508a3b4:	a009883a 	mov	r4,r20
 508a3b8:	880b883a 	mov	r5,r17
 508a3bc:	50827d00 	call	50827d0 <__umodsi3>
 508a3c0:	102d883a 	mov	r22,r2
 508a3c4:	a009883a 	mov	r4,r20
 508a3c8:	880b883a 	mov	r5,r17
 508a3cc:	50827c80 	call	50827c8 <__udivsi3>
 508a3d0:	b02c943a 	slli	r22,r22,16
 508a3d4:	1485383a 	mul	r2,r2,r18
 508a3d8:	9cffffcc 	andi	r19,r19,65535
 508a3dc:	b4e6b03a 	or	r19,r22,r19
 508a3e0:	9880522e 	bgeu	r19,r2,508a52c <__umoddi3+0x25c>
 508a3e4:	00004d06 	br	508a51c <__umoddi3+0x24c>
 508a3e8:	29c05436 	bltu	r5,r7,508a53c <__umoddi3+0x26c>
 508a3ec:	00bfffd4 	movui	r2,65535
 508a3f0:	11c0602e 	bgeu	r2,r7,508a574 <__umoddi3+0x2a4>
 508a3f4:	00804034 	movhi	r2,256
 508a3f8:	10bfffc4 	addi	r2,r2,-1
 508a3fc:	11c0f736 	bltu	r2,r7,508a7dc <__umoddi3+0x50c>
 508a400:	00c00404 	movi	r3,16
 508a404:	1827883a 	mov	r19,r3
 508a408:	38c6d83a 	srl	r3,r7,r3
 508a40c:	01014274 	movhi	r4,1289
 508a410:	213cb504 	addi	r4,r4,-3372
 508a414:	04000804 	movi	r16,32
 508a418:	20c7883a 	add	r3,r4,r3
 508a41c:	18800003 	ldbu	r2,0(r3)
 508a420:	14e7883a 	add	r19,r2,r19
 508a424:	84e1c83a 	sub	r16,r16,r19
 508a428:	8000621e 	bne	r16,zero,508a5b4 <__umoddi3+0x2e4>
 508a42c:	3c400136 	bltu	r7,r17,508a434 <__umoddi3+0x164>
 508a430:	91810336 	bltu	r18,r6,508a840 <__umoddi3+0x570>
 508a434:	9185c83a 	sub	r2,r18,r6
 508a438:	89e3c83a 	sub	r17,r17,r7
 508a43c:	90a5803a 	cmpltu	r18,r18,r2
 508a440:	8ca9c83a 	sub	r20,r17,r18
 508a444:	a007883a 	mov	r3,r20
 508a448:	00003e06 	br	508a544 <__umoddi3+0x274>
 508a44c:	3000041e 	bne	r6,zero,508a460 <__umoddi3+0x190>
 508a450:	01000044 	movi	r4,1
 508a454:	000b883a 	mov	r5,zero
 508a458:	50827c80 	call	50827c8 <__udivsi3>
 508a45c:	1021883a 	mov	r16,r2
 508a460:	00bfffd4 	movui	r2,65535
 508a464:	14004e2e 	bgeu	r2,r16,508a5a0 <__umoddi3+0x2d0>
 508a468:	00804034 	movhi	r2,256
 508a46c:	10bfffc4 	addi	r2,r2,-1
 508a470:	1400e336 	bltu	r2,r16,508a800 <__umoddi3+0x530>
 508a474:	00800404 	movi	r2,16
 508a478:	1007883a 	mov	r3,r2
 508a47c:	8084d83a 	srl	r2,r16,r2
 508a480:	01014274 	movhi	r4,1289
 508a484:	213cb504 	addi	r4,r4,-3372
 508a488:	05400804 	movi	r21,32
 508a48c:	2085883a 	add	r2,r4,r2
 508a490:	10800003 	ldbu	r2,0(r2)
 508a494:	10c7883a 	add	r3,r2,r3
 508a498:	a8ebc83a 	sub	r21,r21,r3
 508a49c:	a8009b1e 	bne	r21,zero,508a70c <__umoddi3+0x43c>
 508a4a0:	8028d43a 	srli	r20,r16,16
 508a4a4:	8c23c83a 	sub	r17,r17,r16
 508a4a8:	85bfffcc 	andi	r22,r16,65535
 508a4ac:	8809883a 	mov	r4,r17
 508a4b0:	a00b883a 	mov	r5,r20
 508a4b4:	50827d00 	call	50827d0 <__umodsi3>
 508a4b8:	8809883a 	mov	r4,r17
 508a4bc:	a00b883a 	mov	r5,r20
 508a4c0:	1025883a 	mov	r18,r2
 508a4c4:	50827c80 	call	50827c8 <__udivsi3>
 508a4c8:	9024943a 	slli	r18,r18,16
 508a4cc:	9806d43a 	srli	r3,r19,16
 508a4d0:	1585383a 	mul	r2,r2,r22
 508a4d4:	90c6b03a 	or	r3,r18,r3
 508a4d8:	1880032e 	bgeu	r3,r2,508a4e8 <__umoddi3+0x218>
 508a4dc:	1c07883a 	add	r3,r3,r16
 508a4e0:	1c000136 	bltu	r3,r16,508a4e8 <__umoddi3+0x218>
 508a4e4:	1880d436 	bltu	r3,r2,508a838 <__umoddi3+0x568>
 508a4e8:	18a3c83a 	sub	r17,r3,r2
 508a4ec:	8809883a 	mov	r4,r17
 508a4f0:	a00b883a 	mov	r5,r20
 508a4f4:	50827d00 	call	50827d0 <__umodsi3>
 508a4f8:	1025883a 	mov	r18,r2
 508a4fc:	8809883a 	mov	r4,r17
 508a500:	a00b883a 	mov	r5,r20
 508a504:	50827c80 	call	50827c8 <__udivsi3>
 508a508:	9024943a 	slli	r18,r18,16
 508a50c:	1585383a 	mul	r2,r2,r22
 508a510:	9cffffcc 	andi	r19,r19,65535
 508a514:	94e6b03a 	or	r19,r18,r19
 508a518:	9880042e 	bgeu	r19,r2,508a52c <__umoddi3+0x25c>
 508a51c:	9c27883a 	add	r19,r19,r16
 508a520:	9c000236 	bltu	r19,r16,508a52c <__umoddi3+0x25c>
 508a524:	9880012e 	bgeu	r19,r2,508a52c <__umoddi3+0x25c>
 508a528:	9c27883a 	add	r19,r19,r16
 508a52c:	98a7c83a 	sub	r19,r19,r2
 508a530:	9d44d83a 	srl	r2,r19,r21
 508a534:	0007883a 	mov	r3,zero
 508a538:	00000206 	br	508a544 <__umoddi3+0x274>
 508a53c:	2005883a 	mov	r2,r4
 508a540:	2807883a 	mov	r3,r5
 508a544:	dfc00a17 	ldw	ra,40(sp)
 508a548:	df000917 	ldw	fp,36(sp)
 508a54c:	ddc00817 	ldw	r23,32(sp)
 508a550:	dd800717 	ldw	r22,28(sp)
 508a554:	dd400617 	ldw	r21,24(sp)
 508a558:	dd000517 	ldw	r20,20(sp)
 508a55c:	dcc00417 	ldw	r19,16(sp)
 508a560:	dc800317 	ldw	r18,12(sp)
 508a564:	dc400217 	ldw	r17,8(sp)
 508a568:	dc000117 	ldw	r16,4(sp)
 508a56c:	dec00b04 	addi	sp,sp,44
 508a570:	f800283a 	ret
 508a574:	00803fc4 	movi	r2,255
 508a578:	11c09536 	bltu	r2,r7,508a7d0 <__umoddi3+0x500>
 508a57c:	0007883a 	mov	r3,zero
 508a580:	0027883a 	mov	r19,zero
 508a584:	003fa006 	br	508a408 <__umoddi3+0x138>
 508a588:	00804034 	movhi	r2,256
 508a58c:	10bfffc4 	addi	r2,r2,-1
 508a590:	11809536 	bltu	r2,r6,508a7e8 <__umoddi3+0x518>
 508a594:	00800404 	movi	r2,16
 508a598:	1009883a 	mov	r4,r2
 508a59c:	003f6406 	br	508a330 <__umoddi3+0x60>
 508a5a0:	00803fc4 	movi	r2,255
 508a5a4:	14009336 	bltu	r2,r16,508a7f4 <__umoddi3+0x524>
 508a5a8:	0005883a 	mov	r2,zero
 508a5ac:	0007883a 	mov	r3,zero
 508a5b0:	003fb206 	br	508a47c <__umoddi3+0x1ac>
 508a5b4:	34c4d83a 	srl	r2,r6,r19
 508a5b8:	3c0e983a 	sll	r7,r7,r16
 508a5bc:	8ceed83a 	srl	r23,r17,r19
 508a5c0:	8c22983a 	sll	r17,r17,r16
 508a5c4:	38a8b03a 	or	r20,r7,r2
 508a5c8:	a02ad43a 	srli	r21,r20,16
 508a5cc:	94c4d83a 	srl	r2,r18,r19
 508a5d0:	b809883a 	mov	r4,r23
 508a5d4:	a80b883a 	mov	r5,r21
 508a5d8:	88a2b03a 	or	r17,r17,r2
 508a5dc:	342c983a 	sll	r22,r6,r16
 508a5e0:	50827d00 	call	50827d0 <__umodsi3>
 508a5e4:	b809883a 	mov	r4,r23
 508a5e8:	a80b883a 	mov	r5,r21
 508a5ec:	d8800015 	stw	r2,0(sp)
 508a5f0:	50827c80 	call	50827c8 <__udivsi3>
 508a5f4:	d8c00017 	ldw	r3,0(sp)
 508a5f8:	102f883a 	mov	r23,r2
 508a5fc:	a73fffcc 	andi	fp,r20,65535
 508a600:	180a943a 	slli	r5,r3,16
 508a604:	8804d43a 	srli	r2,r17,16
 508a608:	bf09383a 	mul	r4,r23,fp
 508a60c:	9424983a 	sll	r18,r18,r16
 508a610:	288ab03a 	or	r5,r5,r2
 508a614:	2900042e 	bgeu	r5,r4,508a628 <__umoddi3+0x358>
 508a618:	2d0b883a 	add	r5,r5,r20
 508a61c:	b8bfffc4 	addi	r2,r23,-1
 508a620:	2d00812e 	bgeu	r5,r20,508a828 <__umoddi3+0x558>
 508a624:	102f883a 	mov	r23,r2
 508a628:	2907c83a 	sub	r3,r5,r4
 508a62c:	1809883a 	mov	r4,r3
 508a630:	a80b883a 	mov	r5,r21
 508a634:	d8c00015 	stw	r3,0(sp)
 508a638:	50827d00 	call	50827d0 <__umodsi3>
 508a63c:	d8c00017 	ldw	r3,0(sp)
 508a640:	a80b883a 	mov	r5,r21
 508a644:	d8800015 	stw	r2,0(sp)
 508a648:	1809883a 	mov	r4,r3
 508a64c:	50827c80 	call	50827c8 <__udivsi3>
 508a650:	d9800017 	ldw	r6,0(sp)
 508a654:	8c7fffcc 	andi	r17,r17,65535
 508a658:	3008943a 	slli	r4,r6,16
 508a65c:	170d383a 	mul	r6,r2,fp
 508a660:	2448b03a 	or	r4,r4,r17
 508a664:	2180042e 	bgeu	r4,r6,508a678 <__umoddi3+0x3a8>
 508a668:	2509883a 	add	r4,r4,r20
 508a66c:	10ffffc4 	addi	r3,r2,-1
 508a670:	2500692e 	bgeu	r4,r20,508a818 <__umoddi3+0x548>
 508a674:	1805883a 	mov	r2,r3
 508a678:	b82e943a 	slli	r23,r23,16
 508a67c:	b010d43a 	srli	r8,r22,16
 508a680:	b1ffffcc 	andi	r7,r22,65535
 508a684:	15eeb03a 	or	r23,r2,r23
 508a688:	b8bfffcc 	andi	r2,r23,65535
 508a68c:	b82ed43a 	srli	r23,r23,16
 508a690:	11c7383a 	mul	r3,r2,r7
 508a694:	1205383a 	mul	r2,r2,r8
 508a698:	b9cf383a 	mul	r7,r23,r7
 508a69c:	400b883a 	mov	r5,r8
 508a6a0:	1810d43a 	srli	r8,r3,16
 508a6a4:	3885883a 	add	r2,r7,r2
 508a6a8:	2189c83a 	sub	r4,r4,r6
 508a6ac:	1205883a 	add	r2,r2,r8
 508a6b0:	b94b383a 	mul	r5,r23,r5
 508a6b4:	11c0022e 	bgeu	r2,r7,508a6c0 <__umoddi3+0x3f0>
 508a6b8:	01800074 	movhi	r6,1
 508a6bc:	298b883a 	add	r5,r5,r6
 508a6c0:	100cd43a 	srli	r6,r2,16
 508a6c4:	1004943a 	slli	r2,r2,16
 508a6c8:	18ffffcc 	andi	r3,r3,65535
 508a6cc:	298b883a 	add	r5,r5,r6
 508a6d0:	10c5883a 	add	r2,r2,r3
 508a6d4:	21403836 	bltu	r4,r5,508a7b8 <__umoddi3+0x4e8>
 508a6d8:	21405c26 	beq	r4,r5,508a84c <__umoddi3+0x57c>
 508a6dc:	2147c83a 	sub	r3,r4,r5
 508a6e0:	102d883a 	mov	r22,r2
 508a6e4:	95adc83a 	sub	r22,r18,r22
 508a6e8:	95a5803a 	cmpltu	r18,r18,r22
 508a6ec:	1c87c83a 	sub	r3,r3,r18
 508a6f0:	1cc4983a 	sll	r2,r3,r19
 508a6f4:	b42cd83a 	srl	r22,r22,r16
 508a6f8:	1c06d83a 	srl	r3,r3,r16
 508a6fc:	1584b03a 	or	r2,r2,r22
 508a700:	003f9006 	br	508a544 <__umoddi3+0x274>
 508a704:	002b883a 	mov	r21,zero
 508a708:	003f1706 	br	508a368 <__umoddi3+0x98>
 508a70c:	8560983a 	sll	r16,r16,r21
 508a710:	88e6d83a 	srl	r19,r17,r3
 508a714:	90c6d83a 	srl	r3,r18,r3
 508a718:	8028d43a 	srli	r20,r16,16
 508a71c:	8d62983a 	sll	r17,r17,r21
 508a720:	9809883a 	mov	r4,r19
 508a724:	a00b883a 	mov	r5,r20
 508a728:	88eeb03a 	or	r23,r17,r3
 508a72c:	50827d00 	call	50827d0 <__umodsi3>
 508a730:	9809883a 	mov	r4,r19
 508a734:	a00b883a 	mov	r5,r20
 508a738:	1023883a 	mov	r17,r2
 508a73c:	50827c80 	call	50827c8 <__udivsi3>
 508a740:	85bfffcc 	andi	r22,r16,65535
 508a744:	880a943a 	slli	r5,r17,16
 508a748:	b806d43a 	srli	r3,r23,16
 508a74c:	1585383a 	mul	r2,r2,r22
 508a750:	9566983a 	sll	r19,r18,r21
 508a754:	28cab03a 	or	r5,r5,r3
 508a758:	2880042e 	bgeu	r5,r2,508a76c <__umoddi3+0x49c>
 508a75c:	2c0b883a 	add	r5,r5,r16
 508a760:	2c000236 	bltu	r5,r16,508a76c <__umoddi3+0x49c>
 508a764:	2880012e 	bgeu	r5,r2,508a76c <__umoddi3+0x49c>
 508a768:	2c0b883a 	add	r5,r5,r16
 508a76c:	28a5c83a 	sub	r18,r5,r2
 508a770:	9009883a 	mov	r4,r18
 508a774:	a00b883a 	mov	r5,r20
 508a778:	50827d00 	call	50827d0 <__umodsi3>
 508a77c:	1023883a 	mov	r17,r2
 508a780:	9009883a 	mov	r4,r18
 508a784:	a00b883a 	mov	r5,r20
 508a788:	50827c80 	call	50827c8 <__udivsi3>
 508a78c:	8822943a 	slli	r17,r17,16
 508a790:	1585383a 	mul	r2,r2,r22
 508a794:	bdffffcc 	andi	r23,r23,65535
 508a798:	8de2b03a 	or	r17,r17,r23
 508a79c:	8880042e 	bgeu	r17,r2,508a7b0 <__umoddi3+0x4e0>
 508a7a0:	8c23883a 	add	r17,r17,r16
 508a7a4:	8c000236 	bltu	r17,r16,508a7b0 <__umoddi3+0x4e0>
 508a7a8:	8880012e 	bgeu	r17,r2,508a7b0 <__umoddi3+0x4e0>
 508a7ac:	8c23883a 	add	r17,r17,r16
 508a7b0:	88a3c83a 	sub	r17,r17,r2
 508a7b4:	003f3d06 	br	508a4ac <__umoddi3+0x1dc>
 508a7b8:	15adc83a 	sub	r22,r2,r22
 508a7bc:	2d07c83a 	sub	r3,r5,r20
 508a7c0:	1585803a 	cmpltu	r2,r2,r22
 508a7c4:	1887c83a 	sub	r3,r3,r2
 508a7c8:	20c7c83a 	sub	r3,r4,r3
 508a7cc:	003fc506 	br	508a6e4 <__umoddi3+0x414>
 508a7d0:	00c00204 	movi	r3,8
 508a7d4:	1827883a 	mov	r19,r3
 508a7d8:	003f0b06 	br	508a408 <__umoddi3+0x138>
 508a7dc:	00c00604 	movi	r3,24
 508a7e0:	1827883a 	mov	r19,r3
 508a7e4:	003f0806 	br	508a408 <__umoddi3+0x138>
 508a7e8:	00800604 	movi	r2,24
 508a7ec:	1009883a 	mov	r4,r2
 508a7f0:	003ecf06 	br	508a330 <__umoddi3+0x60>
 508a7f4:	00800204 	movi	r2,8
 508a7f8:	1007883a 	mov	r3,r2
 508a7fc:	003f1f06 	br	508a47c <__umoddi3+0x1ac>
 508a800:	00800604 	movi	r2,24
 508a804:	1007883a 	mov	r3,r2
 508a808:	003f1c06 	br	508a47c <__umoddi3+0x1ac>
 508a80c:	00800204 	movi	r2,8
 508a810:	1009883a 	mov	r4,r2
 508a814:	003ec606 	br	508a330 <__umoddi3+0x60>
 508a818:	21bf962e 	bgeu	r4,r6,508a674 <__umoddi3+0x3a4>
 508a81c:	10bfff84 	addi	r2,r2,-2
 508a820:	2509883a 	add	r4,r4,r20
 508a824:	003f9406 	br	508a678 <__umoddi3+0x3a8>
 508a828:	293f7e2e 	bgeu	r5,r4,508a624 <__umoddi3+0x354>
 508a82c:	bdffff84 	addi	r23,r23,-2
 508a830:	2d0b883a 	add	r5,r5,r20
 508a834:	003f7c06 	br	508a628 <__umoddi3+0x358>
 508a838:	1c07883a 	add	r3,r3,r16
 508a83c:	003f2a06 	br	508a4e8 <__umoddi3+0x218>
 508a840:	9005883a 	mov	r2,r18
 508a844:	a007883a 	mov	r3,r20
 508a848:	003f3e06 	br	508a544 <__umoddi3+0x274>
 508a84c:	90bfda36 	bltu	r18,r2,508a7b8 <__umoddi3+0x4e8>
 508a850:	102d883a 	mov	r22,r2
 508a854:	0007883a 	mov	r3,zero
 508a858:	003fa206 	br	508a6e4 <__umoddi3+0x414>

0508a85c <_fpadd_parts>:
 508a85c:	2005883a 	mov	r2,r4
 508a860:	21000017 	ldw	r4,0(r4)
 508a864:	01c00044 	movi	r7,1
 508a868:	3900622e 	bgeu	r7,r4,508a9f4 <_fpadd_parts+0x198>
 508a86c:	28c00017 	ldw	r3,0(r5)
 508a870:	38c05f2e 	bgeu	r7,r3,508a9f0 <_fpadd_parts+0x194>
 508a874:	01c00104 	movi	r7,4
 508a878:	21c0c626 	beq	r4,r7,508ab94 <_fpadd_parts+0x338>
 508a87c:	19c05c26 	beq	r3,r7,508a9f0 <_fpadd_parts+0x194>
 508a880:	01c00084 	movi	r7,2
 508a884:	19c06b26 	beq	r3,r7,508aa34 <_fpadd_parts+0x1d8>
 508a888:	21c05926 	beq	r4,r7,508a9f0 <_fpadd_parts+0x194>
 508a88c:	11c00217 	ldw	r7,8(r2)
 508a890:	2ac00217 	ldw	r11,8(r5)
 508a894:	13000317 	ldw	r12,12(r2)
 508a898:	13400417 	ldw	r13,16(r2)
 508a89c:	3ac9c83a 	sub	r4,r7,r11
 508a8a0:	2a000317 	ldw	r8,12(r5)
 508a8a4:	2a400417 	ldw	r9,16(r5)
 508a8a8:	2015883a 	mov	r10,r4
 508a8ac:	20007516 	blt	r4,zero,508aa84 <_fpadd_parts+0x228>
 508a8b0:	00c00fc4 	movi	r3,63
 508a8b4:	1a805016 	blt	r3,r10,508a9f8 <_fpadd_parts+0x19c>
 508a8b8:	0100870e 	bge	zero,r4,508aad8 <_fpadd_parts+0x27c>
 508a8bc:	50fff804 	addi	r3,r10,-32
 508a8c0:	18009916 	blt	r3,zero,508ab28 <_fpadd_parts+0x2cc>
 508a8c4:	48d6d83a 	srl	r11,r9,r3
 508a8c8:	001d883a 	mov	r14,zero
 508a8cc:	18009e16 	blt	r3,zero,508ab48 <_fpadd_parts+0x2ec>
 508a8d0:	01000044 	movi	r4,1
 508a8d4:	20c6983a 	sll	r3,r4,r3
 508a8d8:	0015883a 	mov	r10,zero
 508a8dc:	513fffc4 	addi	r4,r10,-1
 508a8e0:	2295403a 	cmpgeu	r10,r4,r10
 508a8e4:	1a87c83a 	sub	r3,r3,r10
 508a8e8:	1a52703a 	and	r9,r3,r9
 508a8ec:	2210703a 	and	r8,r4,r8
 508a8f0:	4250b03a 	or	r8,r8,r9
 508a8f4:	4010c03a 	cmpne	r8,r8,zero
 508a8f8:	42d0b03a 	or	r8,r8,r11
 508a8fc:	7013883a 	mov	r9,r14
 508a900:	11000117 	ldw	r4,4(r2)
 508a904:	28800117 	ldw	r2,4(r5)
 508a908:	20804126 	beq	r4,r2,508aa10 <_fpadd_parts+0x1b4>
 508a90c:	20006326 	beq	r4,zero,508aa9c <_fpadd_parts+0x240>
 508a910:	4305c83a 	sub	r2,r8,r12
 508a914:	4091803a 	cmpltu	r8,r8,r2
 508a918:	4b47c83a 	sub	r3,r9,r13
 508a91c:	1a07c83a 	sub	r3,r3,r8
 508a920:	18006316 	blt	r3,zero,508aab0 <_fpadd_parts+0x254>
 508a924:	30000115 	stw	zero,4(r6)
 508a928:	31c00215 	stw	r7,8(r6)
 508a92c:	30800315 	stw	r2,12(r6)
 508a930:	30c00415 	stw	r3,16(r6)
 508a934:	11ffffc4 	addi	r7,r2,-1
 508a938:	388b403a 	cmpgeu	r5,r7,r2
 508a93c:	194bc83a 	sub	r5,r3,r5
 508a940:	01040034 	movhi	r4,4096
 508a944:	213fffc4 	addi	r4,r4,-1
 508a948:	21401736 	bltu	r4,r5,508a9a8 <_fpadd_parts+0x14c>
 508a94c:	29008226 	beq	r5,r4,508ab58 <_fpadd_parts+0x2fc>
 508a950:	31400217 	ldw	r5,8(r6)
 508a954:	02840034 	movhi	r10,4096
 508a958:	52bfffc4 	addi	r10,r10,-1
 508a95c:	033fff84 	movi	r12,-2
 508a960:	297fffc4 	addi	r5,r5,-1
 508a964:	00000106 	br	508a96c <_fpadd_parts+0x110>
 508a968:	3a804a26 	beq	r7,r10,508aa94 <_fpadd_parts+0x238>
 508a96c:	1089883a 	add	r4,r2,r2
 508a970:	2091803a 	cmpltu	r8,r4,r2
 508a974:	18c7883a 	add	r3,r3,r3
 508a978:	227fffc4 	addi	r9,r4,-1
 508a97c:	40d1883a 	add	r8,r8,r3
 508a980:	490f403a 	cmpgeu	r7,r9,r4
 508a984:	41cfc83a 	sub	r7,r8,r7
 508a988:	2817883a 	mov	r11,r5
 508a98c:	2005883a 	mov	r2,r4
 508a990:	4007883a 	mov	r3,r8
 508a994:	297fffc4 	addi	r5,r5,-1
 508a998:	51fff32e 	bgeu	r10,r7,508a968 <_fpadd_parts+0x10c>
 508a99c:	31000315 	stw	r4,12(r6)
 508a9a0:	32000415 	stw	r8,16(r6)
 508a9a4:	32c00215 	stw	r11,8(r6)
 508a9a8:	010000c4 	movi	r4,3
 508a9ac:	31000015 	stw	r4,0(r6)
 508a9b0:	01080034 	movhi	r4,8192
 508a9b4:	213fffc4 	addi	r4,r4,-1
 508a9b8:	20c00b2e 	bgeu	r4,r3,508a9e8 <_fpadd_parts+0x18c>
 508a9bc:	180e97fa 	slli	r7,r3,31
 508a9c0:	1008d07a 	srli	r4,r2,1
 508a9c4:	31400217 	ldw	r5,8(r6)
 508a9c8:	1806d07a 	srli	r3,r3,1
 508a9cc:	1080004c 	andi	r2,r2,1
 508a9d0:	3908b03a 	or	r4,r7,r4
 508a9d4:	1108b03a 	or	r4,r2,r4
 508a9d8:	29400044 	addi	r5,r5,1
 508a9dc:	31000315 	stw	r4,12(r6)
 508a9e0:	30c00415 	stw	r3,16(r6)
 508a9e4:	31400215 	stw	r5,8(r6)
 508a9e8:	3005883a 	mov	r2,r6
 508a9ec:	f800283a 	ret
 508a9f0:	2805883a 	mov	r2,r5
 508a9f4:	f800283a 	ret
 508a9f8:	59c01e0e 	bge	r11,r7,508aa74 <_fpadd_parts+0x218>
 508a9fc:	11000117 	ldw	r4,4(r2)
 508aa00:	28800117 	ldw	r2,4(r5)
 508aa04:	0011883a 	mov	r8,zero
 508aa08:	0013883a 	mov	r9,zero
 508aa0c:	20bfbf1e 	bne	r4,r2,508a90c <_fpadd_parts+0xb0>
 508aa10:	4305883a 	add	r2,r8,r12
 508aa14:	1207803a 	cmpltu	r3,r2,r8
 508aa18:	4b53883a 	add	r9,r9,r13
 508aa1c:	1a47883a 	add	r3,r3,r9
 508aa20:	31000115 	stw	r4,4(r6)
 508aa24:	31c00215 	stw	r7,8(r6)
 508aa28:	30800315 	stw	r2,12(r6)
 508aa2c:	30c00415 	stw	r3,16(r6)
 508aa30:	003fdd06 	br	508a9a8 <_fpadd_parts+0x14c>
 508aa34:	20ffef1e 	bne	r4,r3,508a9f4 <_fpadd_parts+0x198>
 508aa38:	31000015 	stw	r4,0(r6)
 508aa3c:	10c00117 	ldw	r3,4(r2)
 508aa40:	30c00115 	stw	r3,4(r6)
 508aa44:	10c00217 	ldw	r3,8(r2)
 508aa48:	11000117 	ldw	r4,4(r2)
 508aa4c:	29400117 	ldw	r5,4(r5)
 508aa50:	30c00215 	stw	r3,8(r6)
 508aa54:	10c00317 	ldw	r3,12(r2)
 508aa58:	2908703a 	and	r4,r5,r4
 508aa5c:	30c00315 	stw	r3,12(r6)
 508aa60:	10c00417 	ldw	r3,16(r2)
 508aa64:	31000115 	stw	r4,4(r6)
 508aa68:	3005883a 	mov	r2,r6
 508aa6c:	30c00415 	stw	r3,16(r6)
 508aa70:	f800283a 	ret
 508aa74:	580f883a 	mov	r7,r11
 508aa78:	0019883a 	mov	r12,zero
 508aa7c:	001b883a 	mov	r13,zero
 508aa80:	003f9f06 	br	508a900 <_fpadd_parts+0xa4>
 508aa84:	0115c83a 	sub	r10,zero,r4
 508aa88:	00c00fc4 	movi	r3,63
 508aa8c:	1abfda16 	blt	r3,r10,508a9f8 <_fpadd_parts+0x19c>
 508aa90:	003f8906 	br	508a8b8 <_fpadd_parts+0x5c>
 508aa94:	627fb52e 	bgeu	r12,r9,508a96c <_fpadd_parts+0x110>
 508aa98:	003fc006 	br	508a99c <_fpadd_parts+0x140>
 508aa9c:	6205c83a 	sub	r2,r12,r8
 508aaa0:	6099803a 	cmpltu	r12,r12,r2
 508aaa4:	6a47c83a 	sub	r3,r13,r9
 508aaa8:	1b07c83a 	sub	r3,r3,r12
 508aaac:	183f9d0e 	bge	r3,zero,508a924 <_fpadd_parts+0xc8>
 508aab0:	0085c83a 	sub	r2,zero,r2
 508aab4:	1008c03a 	cmpne	r4,r2,zero
 508aab8:	00c7c83a 	sub	r3,zero,r3
 508aabc:	1907c83a 	sub	r3,r3,r4
 508aac0:	01000044 	movi	r4,1
 508aac4:	31000115 	stw	r4,4(r6)
 508aac8:	31c00215 	stw	r7,8(r6)
 508aacc:	30800315 	stw	r2,12(r6)
 508aad0:	30c00415 	stw	r3,16(r6)
 508aad4:	003f9706 	br	508a934 <_fpadd_parts+0xd8>
 508aad8:	203f8926 	beq	r4,zero,508a900 <_fpadd_parts+0xa4>
 508aadc:	50fff804 	addi	r3,r10,-32
 508aae0:	3a8f883a 	add	r7,r7,r10
 508aae4:	18002316 	blt	r3,zero,508ab74 <_fpadd_parts+0x318>
 508aae8:	68d6d83a 	srl	r11,r13,r3
 508aaec:	001d883a 	mov	r14,zero
 508aaf0:	18001c16 	blt	r3,zero,508ab64 <_fpadd_parts+0x308>
 508aaf4:	01000044 	movi	r4,1
 508aaf8:	20c6983a 	sll	r3,r4,r3
 508aafc:	0015883a 	mov	r10,zero
 508ab00:	513fffc4 	addi	r4,r10,-1
 508ab04:	2295403a 	cmpgeu	r10,r4,r10
 508ab08:	1a87c83a 	sub	r3,r3,r10
 508ab0c:	1b5a703a 	and	r13,r3,r13
 508ab10:	2318703a 	and	r12,r4,r12
 508ab14:	6358b03a 	or	r12,r12,r13
 508ab18:	6018c03a 	cmpne	r12,r12,zero
 508ab1c:	62d8b03a 	or	r12,r12,r11
 508ab20:	701b883a 	mov	r13,r14
 508ab24:	003f7606 	br	508a900 <_fpadd_parts+0xa4>
 508ab28:	4808907a 	slli	r4,r9,1
 508ab2c:	02c007c4 	movi	r11,31
 508ab30:	5a97c83a 	sub	r11,r11,r10
 508ab34:	22c8983a 	sll	r4,r4,r11
 508ab38:	4296d83a 	srl	r11,r8,r10
 508ab3c:	4a9cd83a 	srl	r14,r9,r10
 508ab40:	22d6b03a 	or	r11,r4,r11
 508ab44:	003f6106 	br	508a8cc <_fpadd_parts+0x70>
 508ab48:	00c00044 	movi	r3,1
 508ab4c:	1a94983a 	sll	r10,r3,r10
 508ab50:	0007883a 	mov	r3,zero
 508ab54:	003f6106 	br	508a8dc <_fpadd_parts+0x80>
 508ab58:	013fff84 	movi	r4,-2
 508ab5c:	21ff7c2e 	bgeu	r4,r7,508a950 <_fpadd_parts+0xf4>
 508ab60:	003f9106 	br	508a9a8 <_fpadd_parts+0x14c>
 508ab64:	00c00044 	movi	r3,1
 508ab68:	1a94983a 	sll	r10,r3,r10
 508ab6c:	0007883a 	mov	r3,zero
 508ab70:	003fe306 	br	508ab00 <_fpadd_parts+0x2a4>
 508ab74:	6816907a 	slli	r11,r13,1
 508ab78:	010007c4 	movi	r4,31
 508ab7c:	2289c83a 	sub	r4,r4,r10
 508ab80:	5908983a 	sll	r4,r11,r4
 508ab84:	6296d83a 	srl	r11,r12,r10
 508ab88:	6a9cd83a 	srl	r14,r13,r10
 508ab8c:	22d6b03a 	or	r11,r4,r11
 508ab90:	003fd706 	br	508aaf0 <_fpadd_parts+0x294>
 508ab94:	193f971e 	bne	r3,r4,508a9f4 <_fpadd_parts+0x198>
 508ab98:	11000117 	ldw	r4,4(r2)
 508ab9c:	28c00117 	ldw	r3,4(r5)
 508aba0:	20ff9426 	beq	r4,r3,508a9f4 <_fpadd_parts+0x198>
 508aba4:	00814274 	movhi	r2,1289
 508aba8:	10bcb004 	addi	r2,r2,-3392
 508abac:	f800283a 	ret

0508abb0 <__adddf3>:
 508abb0:	deffec04 	addi	sp,sp,-80
 508abb4:	d9001115 	stw	r4,68(sp)
 508abb8:	d9401215 	stw	r5,72(sp)
 508abbc:	d9001104 	addi	r4,sp,68
 508abc0:	d9400a04 	addi	r5,sp,40
 508abc4:	dfc01315 	stw	ra,76(sp)
 508abc8:	d9c01015 	stw	r7,64(sp)
 508abcc:	d9800f15 	stw	r6,60(sp)
 508abd0:	508b8cc0 	call	508b8cc <__unpack_d>
 508abd4:	d9000f04 	addi	r4,sp,60
 508abd8:	d9400504 	addi	r5,sp,20
 508abdc:	508b8cc0 	call	508b8cc <__unpack_d>
 508abe0:	d9000a04 	addi	r4,sp,40
 508abe4:	d9400504 	addi	r5,sp,20
 508abe8:	d80d883a 	mov	r6,sp
 508abec:	508a85c0 	call	508a85c <_fpadd_parts>
 508abf0:	1009883a 	mov	r4,r2
 508abf4:	508b6a80 	call	508b6a8 <__pack_d>
 508abf8:	dfc01317 	ldw	ra,76(sp)
 508abfc:	dec01404 	addi	sp,sp,80
 508ac00:	f800283a 	ret

0508ac04 <__subdf3>:
 508ac04:	deffec04 	addi	sp,sp,-80
 508ac08:	d9001115 	stw	r4,68(sp)
 508ac0c:	d9401215 	stw	r5,72(sp)
 508ac10:	d9001104 	addi	r4,sp,68
 508ac14:	d9400a04 	addi	r5,sp,40
 508ac18:	dfc01315 	stw	ra,76(sp)
 508ac1c:	d9c01015 	stw	r7,64(sp)
 508ac20:	d9800f15 	stw	r6,60(sp)
 508ac24:	508b8cc0 	call	508b8cc <__unpack_d>
 508ac28:	d9000f04 	addi	r4,sp,60
 508ac2c:	d9400504 	addi	r5,sp,20
 508ac30:	508b8cc0 	call	508b8cc <__unpack_d>
 508ac34:	d8800617 	ldw	r2,24(sp)
 508ac38:	d9000a04 	addi	r4,sp,40
 508ac3c:	d9400504 	addi	r5,sp,20
 508ac40:	d80d883a 	mov	r6,sp
 508ac44:	1080005c 	xori	r2,r2,1
 508ac48:	d8800615 	stw	r2,24(sp)
 508ac4c:	508a85c0 	call	508a85c <_fpadd_parts>
 508ac50:	1009883a 	mov	r4,r2
 508ac54:	508b6a80 	call	508b6a8 <__pack_d>
 508ac58:	dfc01317 	ldw	ra,76(sp)
 508ac5c:	dec01404 	addi	sp,sp,80
 508ac60:	f800283a 	ret

0508ac64 <__muldf3>:
 508ac64:	deffe404 	addi	sp,sp,-112
 508ac68:	d9001115 	stw	r4,68(sp)
 508ac6c:	d9401215 	stw	r5,72(sp)
 508ac70:	d9001104 	addi	r4,sp,68
 508ac74:	d9400a04 	addi	r5,sp,40
 508ac78:	dfc01b15 	stw	ra,108(sp)
 508ac7c:	d9800f15 	stw	r6,60(sp)
 508ac80:	d9c01015 	stw	r7,64(sp)
 508ac84:	ddc01a15 	stw	r23,104(sp)
 508ac88:	dd801915 	stw	r22,100(sp)
 508ac8c:	dd401815 	stw	r21,96(sp)
 508ac90:	dd001715 	stw	r20,92(sp)
 508ac94:	dcc01615 	stw	r19,88(sp)
 508ac98:	dc801515 	stw	r18,84(sp)
 508ac9c:	dc401415 	stw	r17,80(sp)
 508aca0:	dc001315 	stw	r16,76(sp)
 508aca4:	508b8cc0 	call	508b8cc <__unpack_d>
 508aca8:	d9000f04 	addi	r4,sp,60
 508acac:	d9400504 	addi	r5,sp,20
 508acb0:	508b8cc0 	call	508b8cc <__unpack_d>
 508acb4:	d8c00a17 	ldw	r3,40(sp)
 508acb8:	00800044 	movi	r2,1
 508acbc:	10c01136 	bltu	r2,r3,508ad04 <__muldf3+0xa0>
 508acc0:	d8c00b17 	ldw	r3,44(sp)
 508acc4:	d8800617 	ldw	r2,24(sp)
 508acc8:	d9000a04 	addi	r4,sp,40
 508accc:	1884c03a 	cmpne	r2,r3,r2
 508acd0:	d8800b15 	stw	r2,44(sp)
 508acd4:	508b6a80 	call	508b6a8 <__pack_d>
 508acd8:	dfc01b17 	ldw	ra,108(sp)
 508acdc:	ddc01a17 	ldw	r23,104(sp)
 508ace0:	dd801917 	ldw	r22,100(sp)
 508ace4:	dd401817 	ldw	r21,96(sp)
 508ace8:	dd001717 	ldw	r20,92(sp)
 508acec:	dcc01617 	ldw	r19,88(sp)
 508acf0:	dc801517 	ldw	r18,84(sp)
 508acf4:	dc401417 	ldw	r17,80(sp)
 508acf8:	dc001317 	ldw	r16,76(sp)
 508acfc:	dec01c04 	addi	sp,sp,112
 508ad00:	f800283a 	ret
 508ad04:	d9000517 	ldw	r4,20(sp)
 508ad08:	11000636 	bltu	r2,r4,508ad24 <__muldf3+0xc0>
 508ad0c:	d8800617 	ldw	r2,24(sp)
 508ad10:	d8c00b17 	ldw	r3,44(sp)
 508ad14:	d9000504 	addi	r4,sp,20
 508ad18:	1884c03a 	cmpne	r2,r3,r2
 508ad1c:	d8800615 	stw	r2,24(sp)
 508ad20:	003fec06 	br	508acd4 <__muldf3+0x70>
 508ad24:	00800104 	movi	r2,4
 508ad28:	1880051e 	bne	r3,r2,508ad40 <__muldf3+0xdc>
 508ad2c:	00800084 	movi	r2,2
 508ad30:	20bfe31e 	bne	r4,r2,508acc0 <__muldf3+0x5c>
 508ad34:	01014274 	movhi	r4,1289
 508ad38:	213cb004 	addi	r4,r4,-3392
 508ad3c:	003fe506 	br	508acd4 <__muldf3+0x70>
 508ad40:	2080031e 	bne	r4,r2,508ad50 <__muldf3+0xec>
 508ad44:	00800084 	movi	r2,2
 508ad48:	18bffa26 	beq	r3,r2,508ad34 <__muldf3+0xd0>
 508ad4c:	003fef06 	br	508ad0c <__muldf3+0xa8>
 508ad50:	00800084 	movi	r2,2
 508ad54:	18bfda26 	beq	r3,r2,508acc0 <__muldf3+0x5c>
 508ad58:	20bfec26 	beq	r4,r2,508ad0c <__muldf3+0xa8>
 508ad5c:	dc000d17 	ldw	r16,52(sp)
 508ad60:	dd000817 	ldw	r20,32(sp)
 508ad64:	dc800917 	ldw	r18,36(sp)
 508ad68:	8009883a 	mov	r4,r16
 508ad6c:	000b883a 	mov	r5,zero
 508ad70:	a00d883a 	mov	r6,r20
 508ad74:	000f883a 	mov	r7,zero
 508ad78:	508b59c0 	call	508b59c <__muldi3>
 508ad7c:	dc400e17 	ldw	r17,56(sp)
 508ad80:	9009883a 	mov	r4,r18
 508ad84:	800d883a 	mov	r6,r16
 508ad88:	000b883a 	mov	r5,zero
 508ad8c:	000f883a 	mov	r7,zero
 508ad90:	102f883a 	mov	r23,r2
 508ad94:	1827883a 	mov	r19,r3
 508ad98:	508b59c0 	call	508b59c <__muldi3>
 508ad9c:	900d883a 	mov	r6,r18
 508ada0:	8809883a 	mov	r4,r17
 508ada4:	000b883a 	mov	r5,zero
 508ada8:	000f883a 	mov	r7,zero
 508adac:	102b883a 	mov	r21,r2
 508adb0:	1821883a 	mov	r16,r3
 508adb4:	508b59c0 	call	508b59c <__muldi3>
 508adb8:	8809883a 	mov	r4,r17
 508adbc:	000b883a 	mov	r5,zero
 508adc0:	a00d883a 	mov	r6,r20
 508adc4:	000f883a 	mov	r7,zero
 508adc8:	102d883a 	mov	r22,r2
 508adcc:	1825883a 	mov	r18,r3
 508add0:	508b59c0 	call	508b59c <__muldi3>
 508add4:	154b883a 	add	r5,r2,r21
 508add8:	2889803a 	cmpltu	r4,r5,r2
 508addc:	1c07883a 	add	r3,r3,r16
 508ade0:	20c9883a 	add	r4,r4,r3
 508ade4:	24004b36 	bltu	r4,r16,508af14 <__muldf3+0x2b0>
 508ade8:	8100011e 	bne	r16,r4,508adf0 <__muldf3+0x18c>
 508adec:	2d404936 	bltu	r5,r21,508af14 <__muldf3+0x2b0>
 508adf0:	0011883a 	mov	r8,zero
 508adf4:	0007883a 	mov	r3,zero
 508adf8:	2ccb883a 	add	r5,r5,r19
 508adfc:	b80d883a 	mov	r6,r23
 508ae00:	2cc0012e 	bgeu	r5,r19,508ae08 <__muldf3+0x1a4>
 508ae04:	02000044 	movi	r8,1
 508ae08:	258f883a 	add	r7,r4,r22
 508ae0c:	3909803a 	cmpltu	r4,r7,r4
 508ae10:	da400c17 	ldw	r9,48(sp)
 508ae14:	2489883a 	add	r4,r4,r18
 508ae18:	d8800717 	ldw	r2,28(sp)
 508ae1c:	20c9883a 	add	r4,r4,r3
 508ae20:	da800b17 	ldw	r10,44(sp)
 508ae24:	d8c00617 	ldw	r3,24(sp)
 508ae28:	3a11883a 	add	r8,r7,r8
 508ae2c:	4885883a 	add	r2,r9,r2
 508ae30:	50c6c03a 	cmpne	r3,r10,r3
 508ae34:	41cf803a 	cmpltu	r7,r8,r7
 508ae38:	12400104 	addi	r9,r2,4
 508ae3c:	d8c00115 	stw	r3,4(sp)
 508ae40:	3909883a 	add	r4,r7,r4
 508ae44:	da400215 	stw	r9,8(sp)
 508ae48:	03480034 	movhi	r13,8192
 508ae4c:	6b7fffc4 	addi	r13,r13,-1
 508ae50:	4007883a 	mov	r3,r8
 508ae54:	6900102e 	bgeu	r13,r4,508ae98 <__muldf3+0x234>
 508ae58:	10800144 	addi	r2,r2,5
 508ae5c:	180ed07a 	srli	r7,r3,1
 508ae60:	18c0004c 	andi	r3,r3,1
 508ae64:	201097fa 	slli	r8,r4,31
 508ae68:	281697fa 	slli	r11,r5,31
 508ae6c:	2008d07a 	srli	r4,r4,1
 508ae70:	3014d07a 	srli	r10,r6,1
 508ae74:	2812d07a 	srli	r9,r5,1
 508ae78:	1019883a 	mov	r12,r2
 508ae7c:	18000226 	beq	r3,zero,508ae88 <__muldf3+0x224>
 508ae80:	5a8cb03a 	or	r6,r11,r10
 508ae84:	49600034 	orhi	r5,r9,32768
 508ae88:	41c6b03a 	or	r3,r8,r7
 508ae8c:	10800044 	addi	r2,r2,1
 508ae90:	693ff236 	bltu	r13,r4,508ae5c <__muldf3+0x1f8>
 508ae94:	db000215 	stw	r12,8(sp)
 508ae98:	03440034 	movhi	r13,4096
 508ae9c:	6b7fffc4 	addi	r13,r13,-1
 508aea0:	69001336 	bltu	r13,r4,508aef0 <__muldf3+0x28c>
 508aea4:	d8800217 	ldw	r2,8(sp)
 508aea8:	10bfffc4 	addi	r2,r2,-1
 508aeac:	18d3883a 	add	r9,r3,r3
 508aeb0:	48c7803a 	cmpltu	r3,r9,r3
 508aeb4:	2109883a 	add	r4,r4,r4
 508aeb8:	190f883a 	add	r7,r3,r4
 508aebc:	3191883a 	add	r8,r6,r6
 508aec0:	4197803a 	cmpltu	r11,r8,r6
 508aec4:	2955883a 	add	r10,r5,r5
 508aec8:	1019883a 	mov	r12,r2
 508aecc:	4807883a 	mov	r3,r9
 508aed0:	3809883a 	mov	r4,r7
 508aed4:	2800010e 	bge	r5,zero,508aedc <__muldf3+0x278>
 508aed8:	48c00054 	ori	r3,r9,1
 508aedc:	400d883a 	mov	r6,r8
 508aee0:	5a8b883a 	add	r5,r11,r10
 508aee4:	10bfffc4 	addi	r2,r2,-1
 508aee8:	69fff02e 	bgeu	r13,r7,508aeac <__muldf3+0x248>
 508aeec:	db000215 	stw	r12,8(sp)
 508aef0:	18803fcc 	andi	r2,r3,255
 508aef4:	01c02004 	movi	r7,128
 508aef8:	11c00926 	beq	r2,r7,508af20 <__muldf3+0x2bc>
 508aefc:	008000c4 	movi	r2,3
 508af00:	d9000415 	stw	r4,16(sp)
 508af04:	d8c00315 	stw	r3,12(sp)
 508af08:	d8800015 	stw	r2,0(sp)
 508af0c:	d809883a 	mov	r4,sp
 508af10:	003f7006 	br	508acd4 <__muldf3+0x70>
 508af14:	0011883a 	mov	r8,zero
 508af18:	00c00044 	movi	r3,1
 508af1c:	003fb606 	br	508adf8 <__muldf3+0x194>
 508af20:	19c0400c 	andi	r7,r3,256
 508af24:	383ff51e 	bne	r7,zero,508aefc <__muldf3+0x298>
 508af28:	314ab03a 	or	r5,r6,r5
 508af2c:	283ff326 	beq	r5,zero,508aefc <__muldf3+0x298>
 508af30:	1885883a 	add	r2,r3,r2
 508af34:	10cb803a 	cmpltu	r5,r2,r3
 508af38:	00ffc004 	movi	r3,-256
 508af3c:	10c6703a 	and	r3,r2,r3
 508af40:	2909883a 	add	r4,r5,r4
 508af44:	003fed06 	br	508aefc <__muldf3+0x298>

0508af48 <__divdf3>:
 508af48:	defff104 	addi	sp,sp,-60
 508af4c:	d9000c15 	stw	r4,48(sp)
 508af50:	d9400d15 	stw	r5,52(sp)
 508af54:	d9000c04 	addi	r4,sp,48
 508af58:	d9400504 	addi	r5,sp,20
 508af5c:	dfc00e15 	stw	ra,56(sp)
 508af60:	d9800a15 	stw	r6,40(sp)
 508af64:	d9c00b15 	stw	r7,44(sp)
 508af68:	508b8cc0 	call	508b8cc <__unpack_d>
 508af6c:	d9000a04 	addi	r4,sp,40
 508af70:	d80b883a 	mov	r5,sp
 508af74:	508b8cc0 	call	508b8cc <__unpack_d>
 508af78:	d8c00517 	ldw	r3,20(sp)
 508af7c:	00800044 	movi	r2,1
 508af80:	10c00536 	bltu	r2,r3,508af98 <__divdf3+0x50>
 508af84:	d9000504 	addi	r4,sp,20
 508af88:	508b6a80 	call	508b6a8 <__pack_d>
 508af8c:	dfc00e17 	ldw	ra,56(sp)
 508af90:	dec00f04 	addi	sp,sp,60
 508af94:	f800283a 	ret
 508af98:	d9000017 	ldw	r4,0(sp)
 508af9c:	11000536 	bltu	r2,r4,508afb4 <__divdf3+0x6c>
 508afa0:	d809883a 	mov	r4,sp
 508afa4:	508b6a80 	call	508b6a8 <__pack_d>
 508afa8:	dfc00e17 	ldw	ra,56(sp)
 508afac:	dec00f04 	addi	sp,sp,60
 508afb0:	f800283a 	ret
 508afb4:	d9800617 	ldw	r6,24(sp)
 508afb8:	d9400117 	ldw	r5,4(sp)
 508afbc:	00800104 	movi	r2,4
 508afc0:	314af03a 	xor	r5,r6,r5
 508afc4:	d9400615 	stw	r5,24(sp)
 508afc8:	18800226 	beq	r3,r2,508afd4 <__divdf3+0x8c>
 508afcc:	01400084 	movi	r5,2
 508afd0:	1940041e 	bne	r3,r5,508afe4 <__divdf3+0x9c>
 508afd4:	193feb1e 	bne	r3,r4,508af84 <__divdf3+0x3c>
 508afd8:	01014274 	movhi	r4,1289
 508afdc:	213cb004 	addi	r4,r4,-3392
 508afe0:	003fe906 	br	508af88 <__divdf3+0x40>
 508afe4:	20803326 	beq	r4,r2,508b0b4 <__divdf3+0x16c>
 508afe8:	21403726 	beq	r4,r5,508b0c8 <__divdf3+0x180>
 508afec:	d8800217 	ldw	r2,8(sp)
 508aff0:	d9000717 	ldw	r4,28(sp)
 508aff4:	d8c00917 	ldw	r3,36(sp)
 508aff8:	da000417 	ldw	r8,16(sp)
 508affc:	2089c83a 	sub	r4,r4,r2
 508b000:	d9000715 	stw	r4,28(sp)
 508b004:	d8800817 	ldw	r2,32(sp)
 508b008:	dbc00317 	ldw	r15,12(sp)
 508b00c:	1a000236 	bltu	r3,r8,508b018 <__divdf3+0xd0>
 508b010:	40c0081e 	bne	r8,r3,508b034 <__divdf3+0xec>
 508b014:	13c0072e 	bgeu	r2,r15,508b034 <__divdf3+0xec>
 508b018:	108b883a 	add	r5,r2,r2
 508b01c:	288d803a 	cmpltu	r6,r5,r2
 508b020:	18c7883a 	add	r3,r3,r3
 508b024:	213fffc4 	addi	r4,r4,-1
 508b028:	2805883a 	mov	r2,r5
 508b02c:	30c7883a 	add	r3,r6,r3
 508b030:	d9000715 	stw	r4,28(sp)
 508b034:	01400f44 	movi	r5,61
 508b038:	000f883a 	mov	r7,zero
 508b03c:	01040034 	movhi	r4,4096
 508b040:	0019883a 	mov	r12,zero
 508b044:	001b883a 	mov	r13,zero
 508b048:	201697fa 	slli	r11,r4,31
 508b04c:	3814d07a 	srli	r10,r7,1
 508b050:	297fffc4 	addi	r5,r5,-1
 508b054:	1a000936 	bltu	r3,r8,508b07c <__divdf3+0x134>
 508b058:	13cdc83a 	sub	r6,r2,r15
 508b05c:	1193803a 	cmpltu	r9,r2,r6
 508b060:	1a1dc83a 	sub	r14,r3,r8
 508b064:	40c0011e 	bne	r8,r3,508b06c <__divdf3+0x124>
 508b068:	13c00436 	bltu	r2,r15,508b07c <__divdf3+0x134>
 508b06c:	3005883a 	mov	r2,r6
 508b070:	7247c83a 	sub	r3,r14,r9
 508b074:	61d8b03a 	or	r12,r12,r7
 508b078:	691ab03a 	or	r13,r13,r4
 508b07c:	108d883a 	add	r6,r2,r2
 508b080:	3093803a 	cmpltu	r9,r6,r2
 508b084:	18c7883a 	add	r3,r3,r3
 508b088:	5a8eb03a 	or	r7,r11,r10
 508b08c:	2008d07a 	srli	r4,r4,1
 508b090:	3005883a 	mov	r2,r6
 508b094:	48c7883a 	add	r3,r9,r3
 508b098:	283feb1e 	bne	r5,zero,508b048 <__divdf3+0x100>
 508b09c:	61003fcc 	andi	r4,r12,255
 508b0a0:	01402004 	movi	r5,128
 508b0a4:	21400b26 	beq	r4,r5,508b0d4 <__divdf3+0x18c>
 508b0a8:	db000815 	stw	r12,32(sp)
 508b0ac:	db400915 	stw	r13,36(sp)
 508b0b0:	003fb406 	br	508af84 <__divdf3+0x3c>
 508b0b4:	d8000815 	stw	zero,32(sp)
 508b0b8:	d8000915 	stw	zero,36(sp)
 508b0bc:	d8000715 	stw	zero,28(sp)
 508b0c0:	d9000504 	addi	r4,sp,20
 508b0c4:	003fb006 	br	508af88 <__divdf3+0x40>
 508b0c8:	d8800515 	stw	r2,20(sp)
 508b0cc:	d9000504 	addi	r4,sp,20
 508b0d0:	003fad06 	br	508af88 <__divdf3+0x40>
 508b0d4:	6140400c 	andi	r5,r12,256
 508b0d8:	283ff31e 	bne	r5,zero,508b0a8 <__divdf3+0x160>
 508b0dc:	30c4b03a 	or	r2,r6,r3
 508b0e0:	103ff126 	beq	r2,zero,508b0a8 <__divdf3+0x160>
 508b0e4:	6109883a 	add	r4,r12,r4
 508b0e8:	2305803a 	cmpltu	r2,r4,r12
 508b0ec:	033fc004 	movi	r12,-256
 508b0f0:	2318703a 	and	r12,r4,r12
 508b0f4:	135b883a 	add	r13,r2,r13
 508b0f8:	003feb06 	br	508b0a8 <__divdf3+0x160>

0508b0fc <__eqdf2>:
 508b0fc:	defff104 	addi	sp,sp,-60
 508b100:	d9000c15 	stw	r4,48(sp)
 508b104:	d9400d15 	stw	r5,52(sp)
 508b108:	d9000c04 	addi	r4,sp,48
 508b10c:	d9400504 	addi	r5,sp,20
 508b110:	dfc00e15 	stw	ra,56(sp)
 508b114:	d9800a15 	stw	r6,40(sp)
 508b118:	d9c00b15 	stw	r7,44(sp)
 508b11c:	508b8cc0 	call	508b8cc <__unpack_d>
 508b120:	d9000a04 	addi	r4,sp,40
 508b124:	d80b883a 	mov	r5,sp
 508b128:	508b8cc0 	call	508b8cc <__unpack_d>
 508b12c:	d8c00517 	ldw	r3,20(sp)
 508b130:	00800044 	movi	r2,1
 508b134:	10c0052e 	bgeu	r2,r3,508b14c <__eqdf2+0x50>
 508b138:	d8c00017 	ldw	r3,0(sp)
 508b13c:	10c0032e 	bgeu	r2,r3,508b14c <__eqdf2+0x50>
 508b140:	d9000504 	addi	r4,sp,20
 508b144:	d80b883a 	mov	r5,sp
 508b148:	508b9d00 	call	508b9d0 <__fpcmp_parts_d>
 508b14c:	dfc00e17 	ldw	ra,56(sp)
 508b150:	dec00f04 	addi	sp,sp,60
 508b154:	f800283a 	ret

0508b158 <__nedf2>:
 508b158:	defff104 	addi	sp,sp,-60
 508b15c:	d9000c15 	stw	r4,48(sp)
 508b160:	d9400d15 	stw	r5,52(sp)
 508b164:	d9000c04 	addi	r4,sp,48
 508b168:	d9400504 	addi	r5,sp,20
 508b16c:	dfc00e15 	stw	ra,56(sp)
 508b170:	d9800a15 	stw	r6,40(sp)
 508b174:	d9c00b15 	stw	r7,44(sp)
 508b178:	508b8cc0 	call	508b8cc <__unpack_d>
 508b17c:	d9000a04 	addi	r4,sp,40
 508b180:	d80b883a 	mov	r5,sp
 508b184:	508b8cc0 	call	508b8cc <__unpack_d>
 508b188:	d8c00517 	ldw	r3,20(sp)
 508b18c:	00800044 	movi	r2,1
 508b190:	10c0052e 	bgeu	r2,r3,508b1a8 <__nedf2+0x50>
 508b194:	d8c00017 	ldw	r3,0(sp)
 508b198:	10c0032e 	bgeu	r2,r3,508b1a8 <__nedf2+0x50>
 508b19c:	d9000504 	addi	r4,sp,20
 508b1a0:	d80b883a 	mov	r5,sp
 508b1a4:	508b9d00 	call	508b9d0 <__fpcmp_parts_d>
 508b1a8:	dfc00e17 	ldw	ra,56(sp)
 508b1ac:	dec00f04 	addi	sp,sp,60
 508b1b0:	f800283a 	ret

0508b1b4 <__gtdf2>:
 508b1b4:	defff104 	addi	sp,sp,-60
 508b1b8:	d9000c15 	stw	r4,48(sp)
 508b1bc:	d9400d15 	stw	r5,52(sp)
 508b1c0:	d9000c04 	addi	r4,sp,48
 508b1c4:	d9400504 	addi	r5,sp,20
 508b1c8:	dfc00e15 	stw	ra,56(sp)
 508b1cc:	d9800a15 	stw	r6,40(sp)
 508b1d0:	d9c00b15 	stw	r7,44(sp)
 508b1d4:	508b8cc0 	call	508b8cc <__unpack_d>
 508b1d8:	d9000a04 	addi	r4,sp,40
 508b1dc:	d80b883a 	mov	r5,sp
 508b1e0:	508b8cc0 	call	508b8cc <__unpack_d>
 508b1e4:	d8c00517 	ldw	r3,20(sp)
 508b1e8:	00800044 	movi	r2,1
 508b1ec:	10c0082e 	bgeu	r2,r3,508b210 <__gtdf2+0x5c>
 508b1f0:	d8c00017 	ldw	r3,0(sp)
 508b1f4:	10c0062e 	bgeu	r2,r3,508b210 <__gtdf2+0x5c>
 508b1f8:	d9000504 	addi	r4,sp,20
 508b1fc:	d80b883a 	mov	r5,sp
 508b200:	508b9d00 	call	508b9d0 <__fpcmp_parts_d>
 508b204:	dfc00e17 	ldw	ra,56(sp)
 508b208:	dec00f04 	addi	sp,sp,60
 508b20c:	f800283a 	ret
 508b210:	00bfffc4 	movi	r2,-1
 508b214:	003ffb06 	br	508b204 <__gtdf2+0x50>

0508b218 <__gedf2>:
 508b218:	defff104 	addi	sp,sp,-60
 508b21c:	d9000c15 	stw	r4,48(sp)
 508b220:	d9400d15 	stw	r5,52(sp)
 508b224:	d9000c04 	addi	r4,sp,48
 508b228:	d9400504 	addi	r5,sp,20
 508b22c:	dfc00e15 	stw	ra,56(sp)
 508b230:	d9800a15 	stw	r6,40(sp)
 508b234:	d9c00b15 	stw	r7,44(sp)
 508b238:	508b8cc0 	call	508b8cc <__unpack_d>
 508b23c:	d9000a04 	addi	r4,sp,40
 508b240:	d80b883a 	mov	r5,sp
 508b244:	508b8cc0 	call	508b8cc <__unpack_d>
 508b248:	d8c00517 	ldw	r3,20(sp)
 508b24c:	00800044 	movi	r2,1
 508b250:	10c0082e 	bgeu	r2,r3,508b274 <__gedf2+0x5c>
 508b254:	d8c00017 	ldw	r3,0(sp)
 508b258:	10c0062e 	bgeu	r2,r3,508b274 <__gedf2+0x5c>
 508b25c:	d9000504 	addi	r4,sp,20
 508b260:	d80b883a 	mov	r5,sp
 508b264:	508b9d00 	call	508b9d0 <__fpcmp_parts_d>
 508b268:	dfc00e17 	ldw	ra,56(sp)
 508b26c:	dec00f04 	addi	sp,sp,60
 508b270:	f800283a 	ret
 508b274:	00bfffc4 	movi	r2,-1
 508b278:	003ffb06 	br	508b268 <__gedf2+0x50>

0508b27c <__ltdf2>:
 508b27c:	defff104 	addi	sp,sp,-60
 508b280:	d9000c15 	stw	r4,48(sp)
 508b284:	d9400d15 	stw	r5,52(sp)
 508b288:	d9000c04 	addi	r4,sp,48
 508b28c:	d9400504 	addi	r5,sp,20
 508b290:	dfc00e15 	stw	ra,56(sp)
 508b294:	d9800a15 	stw	r6,40(sp)
 508b298:	d9c00b15 	stw	r7,44(sp)
 508b29c:	508b8cc0 	call	508b8cc <__unpack_d>
 508b2a0:	d9000a04 	addi	r4,sp,40
 508b2a4:	d80b883a 	mov	r5,sp
 508b2a8:	508b8cc0 	call	508b8cc <__unpack_d>
 508b2ac:	d8c00517 	ldw	r3,20(sp)
 508b2b0:	00800044 	movi	r2,1
 508b2b4:	10c0052e 	bgeu	r2,r3,508b2cc <__ltdf2+0x50>
 508b2b8:	d8c00017 	ldw	r3,0(sp)
 508b2bc:	10c0032e 	bgeu	r2,r3,508b2cc <__ltdf2+0x50>
 508b2c0:	d9000504 	addi	r4,sp,20
 508b2c4:	d80b883a 	mov	r5,sp
 508b2c8:	508b9d00 	call	508b9d0 <__fpcmp_parts_d>
 508b2cc:	dfc00e17 	ldw	ra,56(sp)
 508b2d0:	dec00f04 	addi	sp,sp,60
 508b2d4:	f800283a 	ret

0508b2d8 <__floatsidf>:
 508b2d8:	2004d7fa 	srli	r2,r4,31
 508b2dc:	defff904 	addi	sp,sp,-28
 508b2e0:	00c000c4 	movi	r3,3
 508b2e4:	dfc00615 	stw	ra,24(sp)
 508b2e8:	dc000515 	stw	r16,20(sp)
 508b2ec:	d8c00015 	stw	r3,0(sp)
 508b2f0:	d8800115 	stw	r2,4(sp)
 508b2f4:	2000081e 	bne	r4,zero,508b318 <__floatsidf+0x40>
 508b2f8:	00800084 	movi	r2,2
 508b2fc:	d8800015 	stw	r2,0(sp)
 508b300:	d809883a 	mov	r4,sp
 508b304:	508b6a80 	call	508b6a8 <__pack_d>
 508b308:	dfc00617 	ldw	ra,24(sp)
 508b30c:	dc000517 	ldw	r16,20(sp)
 508b310:	dec00704 	addi	sp,sp,28
 508b314:	f800283a 	ret
 508b318:	00c00f04 	movi	r3,60
 508b31c:	d8c00215 	stw	r3,8(sp)
 508b320:	10000f1e 	bne	r2,zero,508b360 <__floatsidf+0x88>
 508b324:	2021883a 	mov	r16,r4
 508b328:	8009883a 	mov	r4,r16
 508b32c:	508b5fc0 	call	508b5fc <__clzsi2>
 508b330:	11000744 	addi	r4,r2,29
 508b334:	0100110e 	bge	zero,r4,508b37c <__floatsidf+0xa4>
 508b338:	10ffff44 	addi	r3,r2,-3
 508b33c:	18001216 	blt	r3,zero,508b388 <__floatsidf+0xb0>
 508b340:	80c6983a 	sll	r3,r16,r3
 508b344:	0009883a 	mov	r4,zero
 508b348:	014007c4 	movi	r5,31
 508b34c:	2885c83a 	sub	r2,r5,r2
 508b350:	d9000315 	stw	r4,12(sp)
 508b354:	d8c00415 	stw	r3,16(sp)
 508b358:	d8800215 	stw	r2,8(sp)
 508b35c:	003fe806 	br	508b300 <__floatsidf+0x28>
 508b360:	00a00034 	movhi	r2,32768
 508b364:	20800e26 	beq	r4,r2,508b3a0 <__floatsidf+0xc8>
 508b368:	0121c83a 	sub	r16,zero,r4
 508b36c:	8009883a 	mov	r4,r16
 508b370:	508b5fc0 	call	508b5fc <__clzsi2>
 508b374:	11000744 	addi	r4,r2,29
 508b378:	013fef16 	blt	zero,r4,508b338 <__floatsidf+0x60>
 508b37c:	dc000315 	stw	r16,12(sp)
 508b380:	d8000415 	stw	zero,16(sp)
 508b384:	003fde06 	br	508b300 <__floatsidf+0x28>
 508b388:	800ad07a 	srli	r5,r16,1
 508b38c:	00c007c4 	movi	r3,31
 508b390:	1907c83a 	sub	r3,r3,r4
 508b394:	28c6d83a 	srl	r3,r5,r3
 508b398:	8108983a 	sll	r4,r16,r4
 508b39c:	003fea06 	br	508b348 <__floatsidf+0x70>
 508b3a0:	0005883a 	mov	r2,zero
 508b3a4:	00f07834 	movhi	r3,49632
 508b3a8:	003fd706 	br	508b308 <__floatsidf+0x30>

0508b3ac <__fixdfsi>:
 508b3ac:	defff804 	addi	sp,sp,-32
 508b3b0:	d9000515 	stw	r4,20(sp)
 508b3b4:	d9400615 	stw	r5,24(sp)
 508b3b8:	d9000504 	addi	r4,sp,20
 508b3bc:	d80b883a 	mov	r5,sp
 508b3c0:	dfc00715 	stw	ra,28(sp)
 508b3c4:	508b8cc0 	call	508b8cc <__unpack_d>
 508b3c8:	d8800017 	ldw	r2,0(sp)
 508b3cc:	00c00084 	movi	r3,2
 508b3d0:	10c01c26 	beq	r2,r3,508b444 <__fixdfsi+0x98>
 508b3d4:	00c00044 	movi	r3,1
 508b3d8:	18801a2e 	bgeu	r3,r2,508b444 <__fixdfsi+0x98>
 508b3dc:	00c00104 	movi	r3,4
 508b3e0:	10c01126 	beq	r2,r3,508b428 <__fixdfsi+0x7c>
 508b3e4:	d8800217 	ldw	r2,8(sp)
 508b3e8:	10001616 	blt	r2,zero,508b444 <__fixdfsi+0x98>
 508b3ec:	00c00784 	movi	r3,30
 508b3f0:	18800d16 	blt	r3,r2,508b428 <__fixdfsi+0x7c>
 508b3f4:	00c00f04 	movi	r3,60
 508b3f8:	1885c83a 	sub	r2,r3,r2
 508b3fc:	10fff804 	addi	r3,r2,-32
 508b400:	d9400317 	ldw	r5,12(sp)
 508b404:	d9000417 	ldw	r4,16(sp)
 508b408:	18001616 	blt	r3,zero,508b464 <__fixdfsi+0xb8>
 508b40c:	20c4d83a 	srl	r2,r4,r3
 508b410:	d8c00117 	ldw	r3,4(sp)
 508b414:	18000126 	beq	r3,zero,508b41c <__fixdfsi+0x70>
 508b418:	0085c83a 	sub	r2,zero,r2
 508b41c:	dfc00717 	ldw	ra,28(sp)
 508b420:	dec00804 	addi	sp,sp,32
 508b424:	f800283a 	ret
 508b428:	d8800117 	ldw	r2,4(sp)
 508b42c:	1000091e 	bne	r2,zero,508b454 <__fixdfsi+0xa8>
 508b430:	00a00034 	movhi	r2,32768
 508b434:	10bfffc4 	addi	r2,r2,-1
 508b438:	dfc00717 	ldw	ra,28(sp)
 508b43c:	dec00804 	addi	sp,sp,32
 508b440:	f800283a 	ret
 508b444:	0005883a 	mov	r2,zero
 508b448:	dfc00717 	ldw	ra,28(sp)
 508b44c:	dec00804 	addi	sp,sp,32
 508b450:	f800283a 	ret
 508b454:	00a00034 	movhi	r2,32768
 508b458:	dfc00717 	ldw	ra,28(sp)
 508b45c:	dec00804 	addi	sp,sp,32
 508b460:	f800283a 	ret
 508b464:	2008907a 	slli	r4,r4,1
 508b468:	018007c4 	movi	r6,31
 508b46c:	308dc83a 	sub	r6,r6,r2
 508b470:	2188983a 	sll	r4,r4,r6
 508b474:	2884d83a 	srl	r2,r5,r2
 508b478:	2084b03a 	or	r2,r4,r2
 508b47c:	003fe406 	br	508b410 <__fixdfsi+0x64>

0508b480 <__floatunsidf>:
 508b480:	defff904 	addi	sp,sp,-28
 508b484:	dc000515 	stw	r16,20(sp)
 508b488:	dfc00615 	stw	ra,24(sp)
 508b48c:	d8000115 	stw	zero,4(sp)
 508b490:	2021883a 	mov	r16,r4
 508b494:	20001726 	beq	r4,zero,508b4f4 <__floatunsidf+0x74>
 508b498:	008000c4 	movi	r2,3
 508b49c:	d8800015 	stw	r2,0(sp)
 508b4a0:	00800f04 	movi	r2,60
 508b4a4:	d8800215 	stw	r2,8(sp)
 508b4a8:	508b5fc0 	call	508b5fc <__clzsi2>
 508b4ac:	10c00744 	addi	r3,r2,29
 508b4b0:	18001816 	blt	r3,zero,508b514 <__floatunsidf+0x94>
 508b4b4:	18002d26 	beq	r3,zero,508b56c <__floatunsidf+0xec>
 508b4b8:	113fff44 	addi	r4,r2,-3
 508b4bc:	20002e16 	blt	r4,zero,508b578 <__floatunsidf+0xf8>
 508b4c0:	8108983a 	sll	r4,r16,r4
 508b4c4:	0021883a 	mov	r16,zero
 508b4c8:	014007c4 	movi	r5,31
 508b4cc:	2885c83a 	sub	r2,r5,r2
 508b4d0:	dc000315 	stw	r16,12(sp)
 508b4d4:	d9000415 	stw	r4,16(sp)
 508b4d8:	d8800215 	stw	r2,8(sp)
 508b4dc:	d809883a 	mov	r4,sp
 508b4e0:	508b6a80 	call	508b6a8 <__pack_d>
 508b4e4:	dfc00617 	ldw	ra,24(sp)
 508b4e8:	dc000517 	ldw	r16,20(sp)
 508b4ec:	dec00704 	addi	sp,sp,28
 508b4f0:	f800283a 	ret
 508b4f4:	00800084 	movi	r2,2
 508b4f8:	d809883a 	mov	r4,sp
 508b4fc:	d8800015 	stw	r2,0(sp)
 508b500:	508b6a80 	call	508b6a8 <__pack_d>
 508b504:	dfc00617 	ldw	ra,24(sp)
 508b508:	dc000517 	ldw	r16,20(sp)
 508b50c:	dec00704 	addi	sp,sp,28
 508b510:	f800283a 	ret
 508b514:	00c7c83a 	sub	r3,zero,r3
 508b518:	193ff804 	addi	r4,r3,-32
 508b51c:	20001c16 	blt	r4,zero,508b590 <__floatunsidf+0x110>
 508b520:	000b883a 	mov	r5,zero
 508b524:	2009d7fa 	srai	r4,r4,31
 508b528:	80c6d83a 	srl	r3,r16,r3
 508b52c:	297fffc4 	addi	r5,r5,-1
 508b530:	2c20703a 	and	r16,r5,r16
 508b534:	8020c03a 	cmpne	r16,r16,zero
 508b538:	1906703a 	and	r3,r3,r4
 508b53c:	010007c4 	movi	r4,31
 508b540:	80c6b03a 	or	r3,r16,r3
 508b544:	2085c83a 	sub	r2,r4,r2
 508b548:	d809883a 	mov	r4,sp
 508b54c:	d8c00315 	stw	r3,12(sp)
 508b550:	d8000415 	stw	zero,16(sp)
 508b554:	d8800215 	stw	r2,8(sp)
 508b558:	508b6a80 	call	508b6a8 <__pack_d>
 508b55c:	dfc00617 	ldw	ra,24(sp)
 508b560:	dc000517 	ldw	r16,20(sp)
 508b564:	dec00704 	addi	sp,sp,28
 508b568:	f800283a 	ret
 508b56c:	dc000315 	stw	r16,12(sp)
 508b570:	d8000415 	stw	zero,16(sp)
 508b574:	003fd906 	br	508b4dc <__floatunsidf+0x5c>
 508b578:	800ad07a 	srli	r5,r16,1
 508b57c:	010007c4 	movi	r4,31
 508b580:	20c9c83a 	sub	r4,r4,r3
 508b584:	2908d83a 	srl	r4,r5,r4
 508b588:	80e0983a 	sll	r16,r16,r3
 508b58c:	003fce06 	br	508b4c8 <__floatunsidf+0x48>
 508b590:	01400044 	movi	r5,1
 508b594:	28ca983a 	sll	r5,r5,r3
 508b598:	003fe206 	br	508b524 <__floatunsidf+0xa4>

0508b59c <__muldi3>:
 508b59c:	20bfffcc 	andi	r2,r4,65535
 508b5a0:	2010d43a 	srli	r8,r4,16
 508b5a4:	30ffffcc 	andi	r3,r6,65535
 508b5a8:	3014d43a 	srli	r10,r6,16
 508b5ac:	1893383a 	mul	r9,r3,r2
 508b5b0:	1a07383a 	mul	r3,r3,r8
 508b5b4:	5085383a 	mul	r2,r10,r2
 508b5b8:	4816d43a 	srli	r11,r9,16
 508b5bc:	5211383a 	mul	r8,r10,r8
 508b5c0:	1885883a 	add	r2,r3,r2
 508b5c4:	12c5883a 	add	r2,r2,r11
 508b5c8:	10c0022e 	bgeu	r2,r3,508b5d4 <__muldi3+0x38>
 508b5cc:	00c00074 	movhi	r3,1
 508b5d0:	40d1883a 	add	r8,r8,r3
 508b5d4:	1014d43a 	srli	r10,r2,16
 508b5d8:	21c9383a 	mul	r4,r4,r7
 508b5dc:	314d383a 	mul	r6,r6,r5
 508b5e0:	1004943a 	slli	r2,r2,16
 508b5e4:	4291883a 	add	r8,r8,r10
 508b5e8:	4a7fffcc 	andi	r9,r9,65535
 508b5ec:	2187883a 	add	r3,r4,r6
 508b5f0:	1245883a 	add	r2,r2,r9
 508b5f4:	1a07883a 	add	r3,r3,r8
 508b5f8:	f800283a 	ret

0508b5fc <__clzsi2>:
 508b5fc:	00bfffd4 	movui	r2,65535
 508b600:	11000b36 	bltu	r2,r4,508b630 <__clzsi2+0x34>
 508b604:	00803fc4 	movi	r2,255
 508b608:	11001e2e 	bgeu	r2,r4,508b684 <__clzsi2+0x88>
 508b60c:	00c00204 	movi	r3,8
 508b610:	20c8d83a 	srl	r4,r4,r3
 508b614:	00c14274 	movhi	r3,1289
 508b618:	18fcb504 	addi	r3,r3,-3372
 508b61c:	00800604 	movi	r2,24
 508b620:	1909883a 	add	r4,r3,r4
 508b624:	20c00003 	ldbu	r3,0(r4)
 508b628:	10c5c83a 	sub	r2,r2,r3
 508b62c:	f800283a 	ret
 508b630:	00804034 	movhi	r2,256
 508b634:	10bfffc4 	addi	r2,r2,-1
 508b638:	11000936 	bltu	r2,r4,508b660 <__clzsi2+0x64>
 508b63c:	00800404 	movi	r2,16
 508b640:	1007883a 	mov	r3,r2
 508b644:	20c8d83a 	srl	r4,r4,r3
 508b648:	00c14274 	movhi	r3,1289
 508b64c:	18fcb504 	addi	r3,r3,-3372
 508b650:	1909883a 	add	r4,r3,r4
 508b654:	20c00003 	ldbu	r3,0(r4)
 508b658:	10c5c83a 	sub	r2,r2,r3
 508b65c:	f800283a 	ret
 508b660:	00c00604 	movi	r3,24
 508b664:	20c8d83a 	srl	r4,r4,r3
 508b668:	00c14274 	movhi	r3,1289
 508b66c:	18fcb504 	addi	r3,r3,-3372
 508b670:	00800204 	movi	r2,8
 508b674:	1909883a 	add	r4,r3,r4
 508b678:	20c00003 	ldbu	r3,0(r4)
 508b67c:	10c5c83a 	sub	r2,r2,r3
 508b680:	f800283a 	ret
 508b684:	0007883a 	mov	r3,zero
 508b688:	20c8d83a 	srl	r4,r4,r3
 508b68c:	00c14274 	movhi	r3,1289
 508b690:	18fcb504 	addi	r3,r3,-3372
 508b694:	00800804 	movi	r2,32
 508b698:	1909883a 	add	r4,r3,r4
 508b69c:	20c00003 	ldbu	r3,0(r4)
 508b6a0:	10c5c83a 	sub	r2,r2,r3
 508b6a4:	f800283a 	ret

0508b6a8 <__pack_d>:
 508b6a8:	20800017 	ldw	r2,0(r4)
 508b6ac:	defff804 	addi	sp,sp,-32
 508b6b0:	dcc00315 	stw	r19,12(sp)
 508b6b4:	dc800215 	stw	r18,8(sp)
 508b6b8:	dfc00715 	stw	ra,28(sp)
 508b6bc:	dd800615 	stw	r22,24(sp)
 508b6c0:	dd400515 	stw	r21,20(sp)
 508b6c4:	dd000415 	stw	r20,16(sp)
 508b6c8:	dc400115 	stw	r17,4(sp)
 508b6cc:	dc000015 	stw	r16,0(sp)
 508b6d0:	04800044 	movi	r18,1
 508b6d4:	24400317 	ldw	r17,12(r4)
 508b6d8:	24000417 	ldw	r16,16(r4)
 508b6dc:	24c00117 	ldw	r19,4(r4)
 508b6e0:	9080422e 	bgeu	r18,r2,508b7ec <__pack_d+0x144>
 508b6e4:	00c00104 	movi	r3,4
 508b6e8:	10c03c26 	beq	r2,r3,508b7dc <__pack_d+0x134>
 508b6ec:	00c00084 	movi	r3,2
 508b6f0:	10c01926 	beq	r2,r3,508b758 <__pack_d+0xb0>
 508b6f4:	8c04b03a 	or	r2,r17,r16
 508b6f8:	10001726 	beq	r2,zero,508b758 <__pack_d+0xb0>
 508b6fc:	21000217 	ldw	r4,8(r4)
 508b700:	00bf0084 	movi	r2,-1022
 508b704:	20804016 	blt	r4,r2,508b808 <__pack_d+0x160>
 508b708:	0080ffc4 	movi	r2,1023
 508b70c:	11003316 	blt	r2,r4,508b7dc <__pack_d+0x134>
 508b710:	88803fcc 	andi	r2,r17,255
 508b714:	00c02004 	movi	r3,128
 508b718:	10c02926 	beq	r2,r3,508b7c0 <__pack_d+0x118>
 508b71c:	88801fc4 	addi	r2,r17,127
 508b720:	1463803a 	cmpltu	r17,r2,r17
 508b724:	8c21883a 	add	r16,r17,r16
 508b728:	1023883a 	mov	r17,r2
 508b72c:	00880034 	movhi	r2,8192
 508b730:	10bfffc4 	addi	r2,r2,-1
 508b734:	14001c36 	bltu	r2,r16,508b7a8 <__pack_d+0x100>
 508b738:	2100ffc4 	addi	r4,r4,1023
 508b73c:	8006963a 	slli	r3,r16,24
 508b740:	8804d23a 	srli	r2,r17,8
 508b744:	8020913a 	slli	r16,r16,4
 508b748:	2101ffcc 	andi	r4,r4,2047
 508b74c:	1884b03a 	or	r2,r3,r2
 508b750:	8020d33a 	srli	r16,r16,12
 508b754:	00000306 	br	508b764 <__pack_d+0xbc>
 508b758:	0009883a 	mov	r4,zero
 508b75c:	0005883a 	mov	r2,zero
 508b760:	0021883a 	mov	r16,zero
 508b764:	2008953a 	slli	r4,r4,20
 508b768:	982697fa 	slli	r19,r19,31
 508b76c:	00c00434 	movhi	r3,16
 508b770:	18ffffc4 	addi	r3,r3,-1
 508b774:	80e0703a 	and	r16,r16,r3
 508b778:	8106b03a 	or	r3,r16,r4
 508b77c:	1cc6b03a 	or	r3,r3,r19
 508b780:	dfc00717 	ldw	ra,28(sp)
 508b784:	dd800617 	ldw	r22,24(sp)
 508b788:	dd400517 	ldw	r21,20(sp)
 508b78c:	dd000417 	ldw	r20,16(sp)
 508b790:	dcc00317 	ldw	r19,12(sp)
 508b794:	dc800217 	ldw	r18,8(sp)
 508b798:	dc400117 	ldw	r17,4(sp)
 508b79c:	dc000017 	ldw	r16,0(sp)
 508b7a0:	dec00804 	addi	sp,sp,32
 508b7a4:	f800283a 	ret
 508b7a8:	800697fa 	slli	r3,r16,31
 508b7ac:	8804d07a 	srli	r2,r17,1
 508b7b0:	21010004 	addi	r4,r4,1024
 508b7b4:	8020d07a 	srli	r16,r16,1
 508b7b8:	18a2b03a 	or	r17,r3,r2
 508b7bc:	003fdf06 	br	508b73c <__pack_d+0x94>
 508b7c0:	88c0400c 	andi	r3,r17,256
 508b7c4:	183fd926 	beq	r3,zero,508b72c <__pack_d+0x84>
 508b7c8:	8885883a 	add	r2,r17,r2
 508b7cc:	1463803a 	cmpltu	r17,r2,r17
 508b7d0:	8c21883a 	add	r16,r17,r16
 508b7d4:	1023883a 	mov	r17,r2
 508b7d8:	003fd406 	br	508b72c <__pack_d+0x84>
 508b7dc:	0101ffc4 	movi	r4,2047
 508b7e0:	0005883a 	mov	r2,zero
 508b7e4:	0021883a 	mov	r16,zero
 508b7e8:	003fde06 	br	508b764 <__pack_d+0xbc>
 508b7ec:	84000234 	orhi	r16,r16,8
 508b7f0:	00c00434 	movhi	r3,16
 508b7f4:	18ffffc4 	addi	r3,r3,-1
 508b7f8:	8805883a 	mov	r2,r17
 508b7fc:	80e0703a 	and	r16,r16,r3
 508b800:	0101ffc4 	movi	r4,2047
 508b804:	003fd706 	br	508b764 <__pack_d+0xbc>
 508b808:	1129c83a 	sub	r20,r2,r4
 508b80c:	00800e04 	movi	r2,56
 508b810:	15002716 	blt	r2,r20,508b8b0 <__pack_d+0x208>
 508b814:	800b883a 	mov	r5,r16
 508b818:	a00d883a 	mov	r6,r20
 508b81c:	8809883a 	mov	r4,r17
 508b820:	508baa00 	call	508baa0 <__lshrdi3>
 508b824:	9009883a 	mov	r4,r18
 508b828:	000b883a 	mov	r5,zero
 508b82c:	a00d883a 	mov	r6,r20
 508b830:	102d883a 	mov	r22,r2
 508b834:	182b883a 	mov	r21,r3
 508b838:	508bae40 	call	508bae4 <__ashldi3>
 508b83c:	1009003a 	cmpeq	r4,r2,zero
 508b840:	1907c83a 	sub	r3,r3,r4
 508b844:	10bfffc4 	addi	r2,r2,-1
 508b848:	1c20703a 	and	r16,r3,r16
 508b84c:	1444703a 	and	r2,r2,r17
 508b850:	1404b03a 	or	r2,r2,r16
 508b854:	1004c03a 	cmpne	r2,r2,zero
 508b858:	1584b03a 	or	r2,r2,r22
 508b85c:	11003fcc 	andi	r4,r2,255
 508b860:	01402004 	movi	r5,128
 508b864:	a807883a 	mov	r3,r21
 508b868:	2140131e 	bne	r4,r5,508b8b8 <__pack_d+0x210>
 508b86c:	1140400c 	andi	r5,r2,256
 508b870:	28000426 	beq	r5,zero,508b884 <__pack_d+0x1dc>
 508b874:	1109883a 	add	r4,r2,r4
 508b878:	2085803a 	cmpltu	r2,r4,r2
 508b87c:	1547883a 	add	r3,r2,r21
 508b880:	2005883a 	mov	r2,r4
 508b884:	1808963a 	slli	r4,r3,24
 508b888:	1004d23a 	srli	r2,r2,8
 508b88c:	1820913a 	slli	r16,r3,4
 508b890:	01440034 	movhi	r5,4096
 508b894:	297fffc4 	addi	r5,r5,-1
 508b898:	2084b03a 	or	r2,r4,r2
 508b89c:	8020d33a 	srli	r16,r16,12
 508b8a0:	01000044 	movi	r4,1
 508b8a4:	28ffaf36 	bltu	r5,r3,508b764 <__pack_d+0xbc>
 508b8a8:	0009883a 	mov	r4,zero
 508b8ac:	003fad06 	br	508b764 <__pack_d+0xbc>
 508b8b0:	0005883a 	mov	r2,zero
 508b8b4:	0007883a 	mov	r3,zero
 508b8b8:	11001fc4 	addi	r4,r2,127
 508b8bc:	2085803a 	cmpltu	r2,r4,r2
 508b8c0:	10c7883a 	add	r3,r2,r3
 508b8c4:	2005883a 	mov	r2,r4
 508b8c8:	003fee06 	br	508b884 <__pack_d+0x1dc>

0508b8cc <__unpack_d>:
 508b8cc:	21800117 	ldw	r6,4(r4)
 508b8d0:	20c00017 	ldw	r3,0(r4)
 508b8d4:	3004d7fa 	srli	r2,r6,31
 508b8d8:	3008d53a 	srli	r4,r6,20
 508b8dc:	28800115 	stw	r2,4(r5)
 508b8e0:	2101ffcc 	andi	r4,r4,2047
 508b8e4:	00800434 	movhi	r2,16
 508b8e8:	10bfffc4 	addi	r2,r2,-1
 508b8ec:	3084703a 	and	r2,r6,r2
 508b8f0:	20001a1e 	bne	r4,zero,508b95c <__unpack_d+0x90>
 508b8f4:	1888b03a 	or	r4,r3,r2
 508b8f8:	20002626 	beq	r4,zero,508b994 <__unpack_d+0xc8>
 508b8fc:	1808d63a 	srli	r4,r3,24
 508b900:	1004923a 	slli	r2,r2,8
 508b904:	01bf0084 	movi	r6,-1022
 508b908:	29800215 	stw	r6,8(r5)
 508b90c:	2084b03a 	or	r2,r4,r2
 508b910:	010000c4 	movi	r4,3
 508b914:	29000015 	stw	r4,0(r5)
 508b918:	02040034 	movhi	r8,4096
 508b91c:	423fffc4 	addi	r8,r8,-1
 508b920:	1806923a 	slli	r3,r3,8
 508b924:	40801836 	bltu	r8,r2,508b988 <__unpack_d+0xbc>
 508b928:	013f0044 	movi	r4,-1023
 508b92c:	18cd883a 	add	r6,r3,r3
 508b930:	30c7803a 	cmpltu	r3,r6,r3
 508b934:	1085883a 	add	r2,r2,r2
 508b938:	1885883a 	add	r2,r3,r2
 508b93c:	200f883a 	mov	r7,r4
 508b940:	3007883a 	mov	r3,r6
 508b944:	213fffc4 	addi	r4,r4,-1
 508b948:	40bff82e 	bgeu	r8,r2,508b92c <__unpack_d+0x60>
 508b94c:	29c00215 	stw	r7,8(r5)
 508b950:	28c00315 	stw	r3,12(r5)
 508b954:	28800415 	stw	r2,16(r5)
 508b958:	f800283a 	ret
 508b95c:	01c1ffc4 	movi	r7,2047
 508b960:	21c00f26 	beq	r4,r7,508b9a0 <__unpack_d+0xd4>
 508b964:	180cd63a 	srli	r6,r3,24
 508b968:	1004923a 	slli	r2,r2,8
 508b96c:	213f0044 	addi	r4,r4,-1023
 508b970:	1806923a 	slli	r3,r3,8
 508b974:	3084b03a 	or	r2,r6,r2
 508b978:	29000215 	stw	r4,8(r5)
 508b97c:	010000c4 	movi	r4,3
 508b980:	10840034 	orhi	r2,r2,4096
 508b984:	29000015 	stw	r4,0(r5)
 508b988:	28c00315 	stw	r3,12(r5)
 508b98c:	28800415 	stw	r2,16(r5)
 508b990:	f800283a 	ret
 508b994:	00800084 	movi	r2,2
 508b998:	28800015 	stw	r2,0(r5)
 508b99c:	f800283a 	ret
 508b9a0:	1888b03a 	or	r4,r3,r2
 508b9a4:	20000526 	beq	r4,zero,508b9bc <__unpack_d+0xf0>
 508b9a8:	3180022c 	andhi	r6,r6,8
 508b9ac:	30000626 	beq	r6,zero,508b9c8 <__unpack_d+0xfc>
 508b9b0:	01000044 	movi	r4,1
 508b9b4:	29000015 	stw	r4,0(r5)
 508b9b8:	003ff306 	br	508b988 <__unpack_d+0xbc>
 508b9bc:	00800104 	movi	r2,4
 508b9c0:	28800015 	stw	r2,0(r5)
 508b9c4:	f800283a 	ret
 508b9c8:	28000015 	stw	zero,0(r5)
 508b9cc:	003fee06 	br	508b988 <__unpack_d+0xbc>

0508b9d0 <__fpcmp_parts_d>:
 508b9d0:	20c00017 	ldw	r3,0(r4)
 508b9d4:	00800044 	movi	r2,1
 508b9d8:	10c0142e 	bgeu	r2,r3,508ba2c <__fpcmp_parts_d+0x5c>
 508b9dc:	29800017 	ldw	r6,0(r5)
 508b9e0:	1180122e 	bgeu	r2,r6,508ba2c <__fpcmp_parts_d+0x5c>
 508b9e4:	01c00104 	movi	r7,4
 508b9e8:	19c02826 	beq	r3,r7,508ba8c <__fpcmp_parts_d+0xbc>
 508b9ec:	31c00926 	beq	r6,r7,508ba14 <__fpcmp_parts_d+0x44>
 508b9f0:	01c00084 	movi	r7,2
 508b9f4:	19c00626 	beq	r3,r7,508ba10 <__fpcmp_parts_d+0x40>
 508b9f8:	31c00a26 	beq	r6,r7,508ba24 <__fpcmp_parts_d+0x54>
 508b9fc:	20c00117 	ldw	r3,4(r4)
 508ba00:	29800117 	ldw	r6,4(r5)
 508ba04:	19800b26 	beq	r3,r6,508ba34 <__fpcmp_parts_d+0x64>
 508ba08:	1800041e 	bne	r3,zero,508ba1c <__fpcmp_parts_d+0x4c>
 508ba0c:	f800283a 	ret
 508ba10:	30c01a26 	beq	r6,r3,508ba7c <__fpcmp_parts_d+0xac>
 508ba14:	28800117 	ldw	r2,4(r5)
 508ba18:	1000041e 	bne	r2,zero,508ba2c <__fpcmp_parts_d+0x5c>
 508ba1c:	00bfffc4 	movi	r2,-1
 508ba20:	f800283a 	ret
 508ba24:	20800117 	ldw	r2,4(r4)
 508ba28:	103ffc1e 	bne	r2,zero,508ba1c <__fpcmp_parts_d+0x4c>
 508ba2c:	00800044 	movi	r2,1
 508ba30:	f800283a 	ret
 508ba34:	21c00217 	ldw	r7,8(r4)
 508ba38:	29800217 	ldw	r6,8(r5)
 508ba3c:	31c0020e 	bge	r6,r7,508ba48 <__fpcmp_parts_d+0x78>
 508ba40:	183ff61e 	bne	r3,zero,508ba1c <__fpcmp_parts_d+0x4c>
 508ba44:	f800283a 	ret
 508ba48:	39800a16 	blt	r7,r6,508ba74 <__fpcmp_parts_d+0xa4>
 508ba4c:	20800417 	ldw	r2,16(r4)
 508ba50:	29800417 	ldw	r6,16(r5)
 508ba54:	21c00317 	ldw	r7,12(r4)
 508ba58:	29000317 	ldw	r4,12(r5)
 508ba5c:	30800936 	bltu	r6,r2,508ba84 <__fpcmp_parts_d+0xb4>
 508ba60:	1180011e 	bne	r2,r6,508ba68 <__fpcmp_parts_d+0x98>
 508ba64:	21c00736 	bltu	r4,r7,508ba84 <__fpcmp_parts_d+0xb4>
 508ba68:	11800236 	bltu	r2,r6,508ba74 <__fpcmp_parts_d+0xa4>
 508ba6c:	3080031e 	bne	r6,r2,508ba7c <__fpcmp_parts_d+0xac>
 508ba70:	3900022e 	bgeu	r7,r4,508ba7c <__fpcmp_parts_d+0xac>
 508ba74:	183fe926 	beq	r3,zero,508ba1c <__fpcmp_parts_d+0x4c>
 508ba78:	003fec06 	br	508ba2c <__fpcmp_parts_d+0x5c>
 508ba7c:	0005883a 	mov	r2,zero
 508ba80:	f800283a 	ret
 508ba84:	183fe926 	beq	r3,zero,508ba2c <__fpcmp_parts_d+0x5c>
 508ba88:	003fe406 	br	508ba1c <__fpcmp_parts_d+0x4c>
 508ba8c:	30ffe51e 	bne	r6,r3,508ba24 <__fpcmp_parts_d+0x54>
 508ba90:	28c00117 	ldw	r3,4(r5)
 508ba94:	20800117 	ldw	r2,4(r4)
 508ba98:	1885c83a 	sub	r2,r3,r2
 508ba9c:	f800283a 	ret

0508baa0 <__lshrdi3>:
 508baa0:	2005883a 	mov	r2,r4
 508baa4:	2807883a 	mov	r3,r5
 508baa8:	30000826 	beq	r6,zero,508bacc <__lshrdi3+0x2c>
 508baac:	01000804 	movi	r4,32
 508bab0:	2189c83a 	sub	r4,r4,r6
 508bab4:	0100060e 	bge	zero,r4,508bad0 <__lshrdi3+0x30>
 508bab8:	1184d83a 	srl	r2,r2,r6
 508babc:	2908983a 	sll	r4,r5,r4
 508bac0:	298cd83a 	srl	r6,r5,r6
 508bac4:	2084b03a 	or	r2,r4,r2
 508bac8:	3007883a 	mov	r3,r6
 508bacc:	f800283a 	ret
 508bad0:	0105c83a 	sub	r2,zero,r4
 508bad4:	000d883a 	mov	r6,zero
 508bad8:	2884d83a 	srl	r2,r5,r2
 508badc:	3007883a 	mov	r3,r6
 508bae0:	003ffa06 	br	508bacc <__lshrdi3+0x2c>

0508bae4 <__ashldi3>:
 508bae4:	2005883a 	mov	r2,r4
 508bae8:	2807883a 	mov	r3,r5
 508baec:	30000826 	beq	r6,zero,508bb10 <__ashldi3+0x2c>
 508baf0:	01000804 	movi	r4,32
 508baf4:	2189c83a 	sub	r4,r4,r6
 508baf8:	0100060e 	bge	zero,r4,508bb14 <__ashldi3+0x30>
 508bafc:	1108d83a 	srl	r4,r2,r4
 508bb00:	2986983a 	sll	r3,r5,r6
 508bb04:	118c983a 	sll	r6,r2,r6
 508bb08:	20c6b03a 	or	r3,r4,r3
 508bb0c:	3005883a 	mov	r2,r6
 508bb10:	f800283a 	ret
 508bb14:	0107c83a 	sub	r3,zero,r4
 508bb18:	000d883a 	mov	r6,zero
 508bb1c:	10c6983a 	sll	r3,r2,r3
 508bb20:	3005883a 	mov	r2,r6
 508bb24:	003ffa06 	br	508bb10 <__ashldi3+0x2c>

0508bb28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 508bb28:	defffe04 	addi	sp,sp,-8
 508bb2c:	dfc00115 	stw	ra,4(sp)
 508bb30:	df000015 	stw	fp,0(sp)
 508bb34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 508bb38:	00814274 	movhi	r2,1289
 508bb3c:	10839504 	addi	r2,r2,3668
 508bb40:	10800017 	ldw	r2,0(r2)
 508bb44:	10000526 	beq	r2,zero,508bb5c <alt_get_errno+0x34>
 508bb48:	00814274 	movhi	r2,1289
 508bb4c:	10839504 	addi	r2,r2,3668
 508bb50:	10800017 	ldw	r2,0(r2)
 508bb54:	103ee83a 	callr	r2
 508bb58:	00000206 	br	508bb64 <alt_get_errno+0x3c>
 508bb5c:	00814274 	movhi	r2,1289
 508bb60:	108a3d04 	addi	r2,r2,10484
}
 508bb64:	e037883a 	mov	sp,fp
 508bb68:	dfc00117 	ldw	ra,4(sp)
 508bb6c:	df000017 	ldw	fp,0(sp)
 508bb70:	dec00204 	addi	sp,sp,8
 508bb74:	f800283a 	ret

0508bb78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 508bb78:	defffb04 	addi	sp,sp,-20
 508bb7c:	dfc00415 	stw	ra,16(sp)
 508bb80:	df000315 	stw	fp,12(sp)
 508bb84:	df000304 	addi	fp,sp,12
 508bb88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 508bb8c:	e0bfff17 	ldw	r2,-4(fp)
 508bb90:	10000616 	blt	r2,zero,508bbac <close+0x34>
 508bb94:	e0bfff17 	ldw	r2,-4(fp)
 508bb98:	10c00324 	muli	r3,r2,12
 508bb9c:	00814274 	movhi	r2,1289
 508bba0:	10bf1304 	addi	r2,r2,-948
 508bba4:	1885883a 	add	r2,r3,r2
 508bba8:	00000106 	br	508bbb0 <close+0x38>
 508bbac:	0005883a 	mov	r2,zero
 508bbb0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 508bbb4:	e0bffd17 	ldw	r2,-12(fp)
 508bbb8:	10001826 	beq	r2,zero,508bc1c <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 508bbbc:	e0bffd17 	ldw	r2,-12(fp)
 508bbc0:	10800017 	ldw	r2,0(r2)
 508bbc4:	10800417 	ldw	r2,16(r2)
 508bbc8:	10000626 	beq	r2,zero,508bbe4 <close+0x6c>
 508bbcc:	e0bffd17 	ldw	r2,-12(fp)
 508bbd0:	10800017 	ldw	r2,0(r2)
 508bbd4:	10800417 	ldw	r2,16(r2)
 508bbd8:	e13ffd17 	ldw	r4,-12(fp)
 508bbdc:	103ee83a 	callr	r2
 508bbe0:	00000106 	br	508bbe8 <close+0x70>
 508bbe4:	0005883a 	mov	r2,zero
 508bbe8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 508bbec:	e13fff17 	ldw	r4,-4(fp)
 508bbf0:	508c40c0 	call	508c40c <alt_release_fd>
    if (rval < 0)
 508bbf4:	e0bffe17 	ldw	r2,-8(fp)
 508bbf8:	1000060e 	bge	r2,zero,508bc14 <close+0x9c>
    {
      ALT_ERRNO = -rval;
 508bbfc:	508bb280 	call	508bb28 <alt_get_errno>
 508bc00:	e0fffe17 	ldw	r3,-8(fp)
 508bc04:	00c7c83a 	sub	r3,zero,r3
 508bc08:	10c00015 	stw	r3,0(r2)
      return -1;
 508bc0c:	00bfffc4 	movi	r2,-1
 508bc10:	00000606 	br	508bc2c <close+0xb4>
    }
    return 0;
 508bc14:	0005883a 	mov	r2,zero
 508bc18:	00000406 	br	508bc2c <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 508bc1c:	508bb280 	call	508bb28 <alt_get_errno>
 508bc20:	00c01444 	movi	r3,81
 508bc24:	10c00015 	stw	r3,0(r2)
    return -1;
 508bc28:	00bfffc4 	movi	r2,-1
  }
}
 508bc2c:	e037883a 	mov	sp,fp
 508bc30:	dfc00117 	ldw	ra,4(sp)
 508bc34:	df000017 	ldw	fp,0(sp)
 508bc38:	dec00204 	addi	sp,sp,8
 508bc3c:	f800283a 	ret

0508bc40 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 508bc40:	defffc04 	addi	sp,sp,-16
 508bc44:	df000315 	stw	fp,12(sp)
 508bc48:	df000304 	addi	fp,sp,12
 508bc4c:	e13ffd15 	stw	r4,-12(fp)
 508bc50:	e17ffe15 	stw	r5,-8(fp)
 508bc54:	e1bfff15 	stw	r6,-4(fp)
  return len;
 508bc58:	e0bfff17 	ldw	r2,-4(fp)
}
 508bc5c:	e037883a 	mov	sp,fp
 508bc60:	df000017 	ldw	fp,0(sp)
 508bc64:	dec00104 	addi	sp,sp,4
 508bc68:	f800283a 	ret

0508bc6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 508bc6c:	defffe04 	addi	sp,sp,-8
 508bc70:	dfc00115 	stw	ra,4(sp)
 508bc74:	df000015 	stw	fp,0(sp)
 508bc78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 508bc7c:	00814274 	movhi	r2,1289
 508bc80:	10839504 	addi	r2,r2,3668
 508bc84:	10800017 	ldw	r2,0(r2)
 508bc88:	10000526 	beq	r2,zero,508bca0 <alt_get_errno+0x34>
 508bc8c:	00814274 	movhi	r2,1289
 508bc90:	10839504 	addi	r2,r2,3668
 508bc94:	10800017 	ldw	r2,0(r2)
 508bc98:	103ee83a 	callr	r2
 508bc9c:	00000206 	br	508bca8 <alt_get_errno+0x3c>
 508bca0:	00814274 	movhi	r2,1289
 508bca4:	108a3d04 	addi	r2,r2,10484
}
 508bca8:	e037883a 	mov	sp,fp
 508bcac:	dfc00117 	ldw	ra,4(sp)
 508bcb0:	df000017 	ldw	fp,0(sp)
 508bcb4:	dec00204 	addi	sp,sp,8
 508bcb8:	f800283a 	ret

0508bcbc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 508bcbc:	defffb04 	addi	sp,sp,-20
 508bcc0:	dfc00415 	stw	ra,16(sp)
 508bcc4:	df000315 	stw	fp,12(sp)
 508bcc8:	df000304 	addi	fp,sp,12
 508bccc:	e13ffe15 	stw	r4,-8(fp)
 508bcd0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 508bcd4:	e0bffe17 	ldw	r2,-8(fp)
 508bcd8:	10000616 	blt	r2,zero,508bcf4 <fstat+0x38>
 508bcdc:	e0bffe17 	ldw	r2,-8(fp)
 508bce0:	10c00324 	muli	r3,r2,12
 508bce4:	00814274 	movhi	r2,1289
 508bce8:	10bf1304 	addi	r2,r2,-948
 508bcec:	1885883a 	add	r2,r3,r2
 508bcf0:	00000106 	br	508bcf8 <fstat+0x3c>
 508bcf4:	0005883a 	mov	r2,zero
 508bcf8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 508bcfc:	e0bffd17 	ldw	r2,-12(fp)
 508bd00:	10001026 	beq	r2,zero,508bd44 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 508bd04:	e0bffd17 	ldw	r2,-12(fp)
 508bd08:	10800017 	ldw	r2,0(r2)
 508bd0c:	10800817 	ldw	r2,32(r2)
 508bd10:	10000726 	beq	r2,zero,508bd30 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 508bd14:	e0bffd17 	ldw	r2,-12(fp)
 508bd18:	10800017 	ldw	r2,0(r2)
 508bd1c:	10800817 	ldw	r2,32(r2)
 508bd20:	e13ffd17 	ldw	r4,-12(fp)
 508bd24:	e17fff17 	ldw	r5,-4(fp)
 508bd28:	103ee83a 	callr	r2
 508bd2c:	00000906 	br	508bd54 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 508bd30:	e0bfff17 	ldw	r2,-4(fp)
 508bd34:	00c80004 	movi	r3,8192
 508bd38:	10c00115 	stw	r3,4(r2)
      return 0;
 508bd3c:	0005883a 	mov	r2,zero
 508bd40:	00000406 	br	508bd54 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 508bd44:	508bc6c0 	call	508bc6c <alt_get_errno>
 508bd48:	00c01444 	movi	r3,81
 508bd4c:	10c00015 	stw	r3,0(r2)
    return -1;
 508bd50:	00bfffc4 	movi	r2,-1
  }
}
 508bd54:	e037883a 	mov	sp,fp
 508bd58:	dfc00117 	ldw	ra,4(sp)
 508bd5c:	df000017 	ldw	fp,0(sp)
 508bd60:	dec00204 	addi	sp,sp,8
 508bd64:	f800283a 	ret

0508bd68 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 508bd68:	defff004 	addi	sp,sp,-64
 508bd6c:	df000f15 	stw	fp,60(sp)
 508bd70:	df000f04 	addi	fp,sp,60
 508bd74:	e13ffd15 	stw	r4,-12(fp)
 508bd78:	e17ffe15 	stw	r5,-8(fp)
 508bd7c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 508bd80:	00bffa84 	movi	r2,-22
 508bd84:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 508bd88:	e0bffd17 	ldw	r2,-12(fp)
 508bd8c:	10800828 	cmpgeui	r2,r2,32
 508bd90:	10005c1e 	bne	r2,zero,508bf04 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508bd94:	0005303a 	rdctl	r2,status
 508bd98:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508bd9c:	e0fff317 	ldw	r3,-52(fp)
 508bda0:	00bfff84 	movi	r2,-2
 508bda4:	1884703a 	and	r2,r3,r2
 508bda8:	1001703a 	wrctl	status,r2
  
  return context;
 508bdac:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 508bdb0:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
 508bdb4:	00c14274 	movhi	r3,1289
 508bdb8:	18ca5804 	addi	r3,r3,10592
 508bdbc:	e0bffd17 	ldw	r2,-12(fp)
 508bdc0:	100490fa 	slli	r2,r2,3
 508bdc4:	1885883a 	add	r2,r3,r2
 508bdc8:	e0ffff17 	ldw	r3,-4(fp)
 508bdcc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 508bdd0:	00c14274 	movhi	r3,1289
 508bdd4:	18ca5804 	addi	r3,r3,10592
 508bdd8:	e0bffd17 	ldw	r2,-12(fp)
 508bddc:	100490fa 	slli	r2,r2,3
 508bde0:	1885883a 	add	r2,r3,r2
 508bde4:	10800104 	addi	r2,r2,4
 508bde8:	e0fffe17 	ldw	r3,-8(fp)
 508bdec:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 508bdf0:	e0bfff17 	ldw	r2,-4(fp)
 508bdf4:	10001f26 	beq	r2,zero,508be74 <alt_irq_register+0x10c>
 508bdf8:	e0bffd17 	ldw	r2,-12(fp)
 508bdfc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508be00:	0005303a 	rdctl	r2,status
 508be04:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508be08:	e0fff517 	ldw	r3,-44(fp)
 508be0c:	00bfff84 	movi	r2,-2
 508be10:	1884703a 	and	r2,r3,r2
 508be14:	1001703a 	wrctl	status,r2
  
  return context;
 508be18:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 508be1c:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
 508be20:	e0bff417 	ldw	r2,-48(fp)
 508be24:	00c00044 	movi	r3,1
 508be28:	1884983a 	sll	r2,r3,r2
 508be2c:	1007883a 	mov	r3,r2
 508be30:	00814274 	movhi	r2,1289
 508be34:	108a3e04 	addi	r2,r2,10488
 508be38:	10800017 	ldw	r2,0(r2)
 508be3c:	1886b03a 	or	r3,r3,r2
 508be40:	00814274 	movhi	r2,1289
 508be44:	108a3e04 	addi	r2,r2,10488
 508be48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 508be4c:	00814274 	movhi	r2,1289
 508be50:	108a3e04 	addi	r2,r2,10488
 508be54:	10800017 	ldw	r2,0(r2)
 508be58:	100170fa 	wrctl	ienable,r2
 508be5c:	e0bff617 	ldw	r2,-40(fp)
 508be60:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 508be64:	e0bff717 	ldw	r2,-36(fp)
 508be68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 508be6c:	0005883a 	mov	r2,zero
 508be70:	00001f06 	br	508bef0 <alt_irq_register+0x188>
 508be74:	e0bffd17 	ldw	r2,-12(fp)
 508be78:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508be7c:	0005303a 	rdctl	r2,status
 508be80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508be84:	e0fff917 	ldw	r3,-28(fp)
 508be88:	00bfff84 	movi	r2,-2
 508be8c:	1884703a 	and	r2,r3,r2
 508be90:	1001703a 	wrctl	status,r2
  
  return context;
 508be94:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 508be98:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
 508be9c:	e0bff817 	ldw	r2,-32(fp)
 508bea0:	00c00044 	movi	r3,1
 508bea4:	1884983a 	sll	r2,r3,r2
 508bea8:	0084303a 	nor	r2,zero,r2
 508beac:	1007883a 	mov	r3,r2
 508beb0:	00814274 	movhi	r2,1289
 508beb4:	108a3e04 	addi	r2,r2,10488
 508beb8:	10800017 	ldw	r2,0(r2)
 508bebc:	1886703a 	and	r3,r3,r2
 508bec0:	00814274 	movhi	r2,1289
 508bec4:	108a3e04 	addi	r2,r2,10488
 508bec8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 508becc:	00814274 	movhi	r2,1289
 508bed0:	108a3e04 	addi	r2,r2,10488
 508bed4:	10800017 	ldw	r2,0(r2)
 508bed8:	100170fa 	wrctl	ienable,r2
 508bedc:	e0bffa17 	ldw	r2,-24(fp)
 508bee0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 508bee4:	e0bffb17 	ldw	r2,-20(fp)
 508bee8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 508beec:	0005883a 	mov	r2,zero
 508bef0:	e0bff115 	stw	r2,-60(fp)
 508bef4:	e0bff217 	ldw	r2,-56(fp)
 508bef8:	e0bffc15 	stw	r2,-16(fp)
 508befc:	e0bffc17 	ldw	r2,-16(fp)
 508bf00:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 508bf04:	e0bff117 	ldw	r2,-60(fp)
}
 508bf08:	e037883a 	mov	sp,fp
 508bf0c:	df000017 	ldw	fp,0(sp)
 508bf10:	dec00104 	addi	sp,sp,4
 508bf14:	f800283a 	ret

0508bf18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 508bf18:	defffe04 	addi	sp,sp,-8
 508bf1c:	dfc00115 	stw	ra,4(sp)
 508bf20:	df000015 	stw	fp,0(sp)
 508bf24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 508bf28:	00814274 	movhi	r2,1289
 508bf2c:	10839504 	addi	r2,r2,3668
 508bf30:	10800017 	ldw	r2,0(r2)
 508bf34:	10000526 	beq	r2,zero,508bf4c <alt_get_errno+0x34>
 508bf38:	00814274 	movhi	r2,1289
 508bf3c:	10839504 	addi	r2,r2,3668
 508bf40:	10800017 	ldw	r2,0(r2)
 508bf44:	103ee83a 	callr	r2
 508bf48:	00000206 	br	508bf54 <alt_get_errno+0x3c>
 508bf4c:	00814274 	movhi	r2,1289
 508bf50:	108a3d04 	addi	r2,r2,10484
}
 508bf54:	e037883a 	mov	sp,fp
 508bf58:	dfc00117 	ldw	ra,4(sp)
 508bf5c:	df000017 	ldw	fp,0(sp)
 508bf60:	dec00204 	addi	sp,sp,8
 508bf64:	f800283a 	ret

0508bf68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 508bf68:	deffed04 	addi	sp,sp,-76
 508bf6c:	dfc01215 	stw	ra,72(sp)
 508bf70:	df001115 	stw	fp,68(sp)
 508bf74:	df001104 	addi	fp,sp,68
 508bf78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 508bf7c:	e0bfff17 	ldw	r2,-4(fp)
 508bf80:	10000616 	blt	r2,zero,508bf9c <isatty+0x34>
 508bf84:	e0bfff17 	ldw	r2,-4(fp)
 508bf88:	10c00324 	muli	r3,r2,12
 508bf8c:	00814274 	movhi	r2,1289
 508bf90:	10bf1304 	addi	r2,r2,-948
 508bf94:	1885883a 	add	r2,r3,r2
 508bf98:	00000106 	br	508bfa0 <isatty+0x38>
 508bf9c:	0005883a 	mov	r2,zero
 508bfa0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 508bfa4:	e0bfef17 	ldw	r2,-68(fp)
 508bfa8:	10000e26 	beq	r2,zero,508bfe4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 508bfac:	e0bfef17 	ldw	r2,-68(fp)
 508bfb0:	10800017 	ldw	r2,0(r2)
 508bfb4:	10800817 	ldw	r2,32(r2)
 508bfb8:	1000021e 	bne	r2,zero,508bfc4 <isatty+0x5c>
    {
      return 1;
 508bfbc:	00800044 	movi	r2,1
 508bfc0:	00000c06 	br	508bff4 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 508bfc4:	e0bff004 	addi	r2,fp,-64
 508bfc8:	e13fff17 	ldw	r4,-4(fp)
 508bfcc:	100b883a 	mov	r5,r2
 508bfd0:	508bcbc0 	call	508bcbc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 508bfd4:	e0bff117 	ldw	r2,-60(fp)
 508bfd8:	10880020 	cmpeqi	r2,r2,8192
 508bfdc:	10803fcc 	andi	r2,r2,255
 508bfe0:	00000406 	br	508bff4 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 508bfe4:	508bf180 	call	508bf18 <alt_get_errno>
 508bfe8:	00c01444 	movi	r3,81
 508bfec:	10c00015 	stw	r3,0(r2)
    return 0;
 508bff0:	0005883a 	mov	r2,zero
  }
}
 508bff4:	e037883a 	mov	sp,fp
 508bff8:	dfc00117 	ldw	ra,4(sp)
 508bffc:	df000017 	ldw	fp,0(sp)
 508c000:	dec00204 	addi	sp,sp,8
 508c004:	f800283a 	ret

0508c008 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 508c008:	defffc04 	addi	sp,sp,-16
 508c00c:	df000315 	stw	fp,12(sp)
 508c010:	df000304 	addi	fp,sp,12
 508c014:	e13ffd15 	stw	r4,-12(fp)
 508c018:	e17ffe15 	stw	r5,-8(fp)
 508c01c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 508c020:	e0fffe17 	ldw	r3,-8(fp)
 508c024:	e0bffd17 	ldw	r2,-12(fp)
 508c028:	18800e26 	beq	r3,r2,508c064 <alt_load_section+0x5c>
  {
    while( to != end )
 508c02c:	00000a06 	br	508c058 <alt_load_section+0x50>
    {
      *to++ = *from++;
 508c030:	e0bffd17 	ldw	r2,-12(fp)
 508c034:	10c00017 	ldw	r3,0(r2)
 508c038:	e0bffe17 	ldw	r2,-8(fp)
 508c03c:	10c00015 	stw	r3,0(r2)
 508c040:	e0bffe17 	ldw	r2,-8(fp)
 508c044:	10800104 	addi	r2,r2,4
 508c048:	e0bffe15 	stw	r2,-8(fp)
 508c04c:	e0bffd17 	ldw	r2,-12(fp)
 508c050:	10800104 	addi	r2,r2,4
 508c054:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 508c058:	e0fffe17 	ldw	r3,-8(fp)
 508c05c:	e0bfff17 	ldw	r2,-4(fp)
 508c060:	18bff31e 	bne	r3,r2,508c030 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 508c064:	e037883a 	mov	sp,fp
 508c068:	df000017 	ldw	fp,0(sp)
 508c06c:	dec00104 	addi	sp,sp,4
 508c070:	f800283a 	ret

0508c074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 508c074:	defffe04 	addi	sp,sp,-8
 508c078:	dfc00115 	stw	ra,4(sp)
 508c07c:	df000015 	stw	fp,0(sp)
 508c080:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 508c084:	01014274 	movhi	r4,1289
 508c088:	21039a04 	addi	r4,r4,3688
 508c08c:	01414274 	movhi	r5,1289
 508c090:	297d0004 	addi	r5,r5,-3072
 508c094:	01814274 	movhi	r6,1289
 508c098:	31839a04 	addi	r6,r6,3688
 508c09c:	508c0080 	call	508c008 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 508c0a0:	01014234 	movhi	r4,1288
 508c0a4:	21000804 	addi	r4,r4,32
 508c0a8:	01414234 	movhi	r5,1288
 508c0ac:	29400804 	addi	r5,r5,32
 508c0b0:	01814234 	movhi	r6,1288
 508c0b4:	31806e04 	addi	r6,r6,440
 508c0b8:	508c0080 	call	508c008 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 508c0bc:	01014274 	movhi	r4,1289
 508c0c0:	21399204 	addi	r4,r4,-6584
 508c0c4:	01414274 	movhi	r5,1289
 508c0c8:	29799204 	addi	r5,r5,-6584
 508c0cc:	01814274 	movhi	r6,1289
 508c0d0:	31bd0004 	addi	r6,r6,-3072
 508c0d4:	508c0080 	call	508c008 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 508c0d8:	508d5480 	call	508d548 <alt_dcache_flush_all>
  alt_icache_flush_all();
 508c0dc:	508d7340 	call	508d734 <alt_icache_flush_all>
}
 508c0e0:	e037883a 	mov	sp,fp
 508c0e4:	dfc00117 	ldw	ra,4(sp)
 508c0e8:	df000017 	ldw	fp,0(sp)
 508c0ec:	dec00204 	addi	sp,sp,8
 508c0f0:	f800283a 	ret

0508c0f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 508c0f4:	defffe04 	addi	sp,sp,-8
 508c0f8:	dfc00115 	stw	ra,4(sp)
 508c0fc:	df000015 	stw	fp,0(sp)
 508c100:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 508c104:	00814274 	movhi	r2,1289
 508c108:	10839504 	addi	r2,r2,3668
 508c10c:	10800017 	ldw	r2,0(r2)
 508c110:	10000526 	beq	r2,zero,508c128 <alt_get_errno+0x34>
 508c114:	00814274 	movhi	r2,1289
 508c118:	10839504 	addi	r2,r2,3668
 508c11c:	10800017 	ldw	r2,0(r2)
 508c120:	103ee83a 	callr	r2
 508c124:	00000206 	br	508c130 <alt_get_errno+0x3c>
 508c128:	00814274 	movhi	r2,1289
 508c12c:	108a3d04 	addi	r2,r2,10484
}
 508c130:	e037883a 	mov	sp,fp
 508c134:	dfc00117 	ldw	ra,4(sp)
 508c138:	df000017 	ldw	fp,0(sp)
 508c13c:	dec00204 	addi	sp,sp,8
 508c140:	f800283a 	ret

0508c144 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 508c144:	defff904 	addi	sp,sp,-28
 508c148:	dfc00615 	stw	ra,24(sp)
 508c14c:	df000515 	stw	fp,20(sp)
 508c150:	df000504 	addi	fp,sp,20
 508c154:	e13ffd15 	stw	r4,-12(fp)
 508c158:	e17ffe15 	stw	r5,-8(fp)
 508c15c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 508c160:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 508c164:	e0bffd17 	ldw	r2,-12(fp)
 508c168:	10000616 	blt	r2,zero,508c184 <lseek+0x40>
 508c16c:	e0bffd17 	ldw	r2,-12(fp)
 508c170:	10c00324 	muli	r3,r2,12
 508c174:	00814274 	movhi	r2,1289
 508c178:	10bf1304 	addi	r2,r2,-948
 508c17c:	1885883a 	add	r2,r3,r2
 508c180:	00000106 	br	508c188 <lseek+0x44>
 508c184:	0005883a 	mov	r2,zero
 508c188:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 508c18c:	e0bffc17 	ldw	r2,-16(fp)
 508c190:	10001026 	beq	r2,zero,508c1d4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 508c194:	e0bffc17 	ldw	r2,-16(fp)
 508c198:	10800017 	ldw	r2,0(r2)
 508c19c:	10800717 	ldw	r2,28(r2)
 508c1a0:	10000926 	beq	r2,zero,508c1c8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 508c1a4:	e0bffc17 	ldw	r2,-16(fp)
 508c1a8:	10800017 	ldw	r2,0(r2)
 508c1ac:	10800717 	ldw	r2,28(r2)
 508c1b0:	e13ffc17 	ldw	r4,-16(fp)
 508c1b4:	e17ffe17 	ldw	r5,-8(fp)
 508c1b8:	e1bfff17 	ldw	r6,-4(fp)
 508c1bc:	103ee83a 	callr	r2
 508c1c0:	e0bffb15 	stw	r2,-20(fp)
 508c1c4:	00000506 	br	508c1dc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 508c1c8:	00bfde84 	movi	r2,-134
 508c1cc:	e0bffb15 	stw	r2,-20(fp)
 508c1d0:	00000206 	br	508c1dc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 508c1d4:	00bfebc4 	movi	r2,-81
 508c1d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 508c1dc:	e0bffb17 	ldw	r2,-20(fp)
 508c1e0:	1000060e 	bge	r2,zero,508c1fc <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
 508c1e4:	508c0f40 	call	508c0f4 <alt_get_errno>
 508c1e8:	e0fffb17 	ldw	r3,-20(fp)
 508c1ec:	00c7c83a 	sub	r3,zero,r3
 508c1f0:	10c00015 	stw	r3,0(r2)
    rc = -1;
 508c1f4:	00bfffc4 	movi	r2,-1
 508c1f8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 508c1fc:	e0bffb17 	ldw	r2,-20(fp)
}
 508c200:	e037883a 	mov	sp,fp
 508c204:	dfc00117 	ldw	ra,4(sp)
 508c208:	df000017 	ldw	fp,0(sp)
 508c20c:	dec00204 	addi	sp,sp,8
 508c210:	f800283a 	ret

0508c214 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 508c214:	defffd04 	addi	sp,sp,-12
 508c218:	dfc00215 	stw	ra,8(sp)
 508c21c:	df000115 	stw	fp,4(sp)
 508c220:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 508c224:	0009883a 	mov	r4,zero
 508c228:	508c6c00 	call	508c6c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 508c22c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 508c230:	508c6f40 	call	508c6f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 508c234:	01014274 	movhi	r4,1289
 508c238:	213cf804 	addi	r4,r4,-3104
 508c23c:	01414274 	movhi	r5,1289
 508c240:	297cf804 	addi	r5,r5,-3104
 508c244:	01814274 	movhi	r6,1289
 508c248:	31bcf804 	addi	r6,r6,-3104
 508c24c:	508daec0 	call	508daec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 508c250:	508d67c0 	call	508d67c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 508c254:	01014274 	movhi	r4,1289
 508c258:	2135b604 	addi	r4,r4,-10536
 508c25c:	508e2740 	call	508e274 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 508c260:	d126b417 	ldw	r4,-25904(gp)
 508c264:	d0e6b517 	ldw	r3,-25900(gp)
 508c268:	d0a6b617 	ldw	r2,-25896(gp)
 508c26c:	180b883a 	mov	r5,r3
 508c270:	100d883a 	mov	r6,r2
 508c274:	508223c0 	call	508223c <main>
 508c278:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 508c27c:	01000044 	movi	r4,1
 508c280:	508bb780 	call	508bb78 <close>
  exit (result);
 508c284:	e13fff17 	ldw	r4,-4(fp)
 508c288:	508e2880 	call	508e288 <exit>

0508c28c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 508c28c:	defffe04 	addi	sp,sp,-8
 508c290:	df000115 	stw	fp,4(sp)
 508c294:	df000104 	addi	fp,sp,4
 508c298:	e13fff15 	stw	r4,-4(fp)
}
 508c29c:	e037883a 	mov	sp,fp
 508c2a0:	df000017 	ldw	fp,0(sp)
 508c2a4:	dec00104 	addi	sp,sp,4
 508c2a8:	f800283a 	ret

0508c2ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 508c2ac:	defffe04 	addi	sp,sp,-8
 508c2b0:	df000115 	stw	fp,4(sp)
 508c2b4:	df000104 	addi	fp,sp,4
 508c2b8:	e13fff15 	stw	r4,-4(fp)
}
 508c2bc:	e037883a 	mov	sp,fp
 508c2c0:	df000017 	ldw	fp,0(sp)
 508c2c4:	dec00104 	addi	sp,sp,4
 508c2c8:	f800283a 	ret

0508c2cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 508c2cc:	defffe04 	addi	sp,sp,-8
 508c2d0:	dfc00115 	stw	ra,4(sp)
 508c2d4:	df000015 	stw	fp,0(sp)
 508c2d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 508c2dc:	00814274 	movhi	r2,1289
 508c2e0:	10839504 	addi	r2,r2,3668
 508c2e4:	10800017 	ldw	r2,0(r2)
 508c2e8:	10000526 	beq	r2,zero,508c300 <alt_get_errno+0x34>
 508c2ec:	00814274 	movhi	r2,1289
 508c2f0:	10839504 	addi	r2,r2,3668
 508c2f4:	10800017 	ldw	r2,0(r2)
 508c2f8:	103ee83a 	callr	r2
 508c2fc:	00000206 	br	508c308 <alt_get_errno+0x3c>
 508c300:	00814274 	movhi	r2,1289
 508c304:	108a3d04 	addi	r2,r2,10484
}
 508c308:	e037883a 	mov	sp,fp
 508c30c:	dfc00117 	ldw	ra,4(sp)
 508c310:	df000017 	ldw	fp,0(sp)
 508c314:	dec00204 	addi	sp,sp,8
 508c318:	f800283a 	ret

0508c31c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 508c31c:	defff904 	addi	sp,sp,-28
 508c320:	dfc00615 	stw	ra,24(sp)
 508c324:	df000515 	stw	fp,20(sp)
 508c328:	df000504 	addi	fp,sp,20
 508c32c:	e13ffd15 	stw	r4,-12(fp)
 508c330:	e17ffe15 	stw	r5,-8(fp)
 508c334:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 508c338:	e0bffd17 	ldw	r2,-12(fp)
 508c33c:	10000616 	blt	r2,zero,508c358 <read+0x3c>
 508c340:	e0bffd17 	ldw	r2,-12(fp)
 508c344:	10c00324 	muli	r3,r2,12
 508c348:	00814274 	movhi	r2,1289
 508c34c:	10bf1304 	addi	r2,r2,-948
 508c350:	1885883a 	add	r2,r3,r2
 508c354:	00000106 	br	508c35c <read+0x40>
 508c358:	0005883a 	mov	r2,zero
 508c35c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 508c360:	e0bffb17 	ldw	r2,-20(fp)
 508c364:	10002026 	beq	r2,zero,508c3e8 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 508c368:	e0bffb17 	ldw	r2,-20(fp)
 508c36c:	10800217 	ldw	r2,8(r2)
 508c370:	108000cc 	andi	r2,r2,3
 508c374:	10800060 	cmpeqi	r2,r2,1
 508c378:	1000171e 	bne	r2,zero,508c3d8 <read+0xbc>
        (fd->dev->read))
 508c37c:	e0bffb17 	ldw	r2,-20(fp)
 508c380:	10800017 	ldw	r2,0(r2)
 508c384:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 508c388:	10001326 	beq	r2,zero,508c3d8 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 508c38c:	e0bffb17 	ldw	r2,-20(fp)
 508c390:	10800017 	ldw	r2,0(r2)
 508c394:	10c00517 	ldw	r3,20(r2)
 508c398:	e0bfff17 	ldw	r2,-4(fp)
 508c39c:	e13ffb17 	ldw	r4,-20(fp)
 508c3a0:	e17ffe17 	ldw	r5,-8(fp)
 508c3a4:	100d883a 	mov	r6,r2
 508c3a8:	183ee83a 	callr	r3
 508c3ac:	e0bffc15 	stw	r2,-16(fp)
 508c3b0:	e0bffc17 	ldw	r2,-16(fp)
 508c3b4:	1000060e 	bge	r2,zero,508c3d0 <read+0xb4>
        {
          ALT_ERRNO = -rval;
 508c3b8:	508c2cc0 	call	508c2cc <alt_get_errno>
 508c3bc:	e0fffc17 	ldw	r3,-16(fp)
 508c3c0:	00c7c83a 	sub	r3,zero,r3
 508c3c4:	10c00015 	stw	r3,0(r2)
          return -1;
 508c3c8:	00bfffc4 	movi	r2,-1
 508c3cc:	00000a06 	br	508c3f8 <read+0xdc>
        }
        return rval;
 508c3d0:	e0bffc17 	ldw	r2,-16(fp)
 508c3d4:	00000806 	br	508c3f8 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
 508c3d8:	508c2cc0 	call	508c2cc <alt_get_errno>
 508c3dc:	00c00344 	movi	r3,13
 508c3e0:	10c00015 	stw	r3,0(r2)
 508c3e4:	00000306 	br	508c3f4 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 508c3e8:	508c2cc0 	call	508c2cc <alt_get_errno>
 508c3ec:	00c01444 	movi	r3,81
 508c3f0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 508c3f4:	00bfffc4 	movi	r2,-1
}
 508c3f8:	e037883a 	mov	sp,fp
 508c3fc:	dfc00117 	ldw	ra,4(sp)
 508c400:	df000017 	ldw	fp,0(sp)
 508c404:	dec00204 	addi	sp,sp,8
 508c408:	f800283a 	ret

0508c40c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 508c40c:	defffe04 	addi	sp,sp,-8
 508c410:	df000115 	stw	fp,4(sp)
 508c414:	df000104 	addi	fp,sp,4
 508c418:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 508c41c:	e0bfff17 	ldw	r2,-4(fp)
 508c420:	108000d0 	cmplti	r2,r2,3
 508c424:	10000d1e 	bne	r2,zero,508c45c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 508c428:	00c14274 	movhi	r3,1289
 508c42c:	18ff1304 	addi	r3,r3,-948
 508c430:	e0bfff17 	ldw	r2,-4(fp)
 508c434:	10800324 	muli	r2,r2,12
 508c438:	1885883a 	add	r2,r3,r2
 508c43c:	10800204 	addi	r2,r2,8
 508c440:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 508c444:	00c14274 	movhi	r3,1289
 508c448:	18ff1304 	addi	r3,r3,-948
 508c44c:	e0bfff17 	ldw	r2,-4(fp)
 508c450:	10800324 	muli	r2,r2,12
 508c454:	1885883a 	add	r2,r3,r2
 508c458:	10000015 	stw	zero,0(r2)
  }
}
 508c45c:	e037883a 	mov	sp,fp
 508c460:	df000017 	ldw	fp,0(sp)
 508c464:	dec00104 	addi	sp,sp,4
 508c468:	f800283a 	ret

0508c46c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 508c46c:	defff904 	addi	sp,sp,-28
 508c470:	df000615 	stw	fp,24(sp)
 508c474:	df000604 	addi	fp,sp,24
 508c478:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508c47c:	0005303a 	rdctl	r2,status
 508c480:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508c484:	e0fffc17 	ldw	r3,-16(fp)
 508c488:	00bfff84 	movi	r2,-2
 508c48c:	1884703a 	and	r2,r3,r2
 508c490:	1001703a 	wrctl	status,r2
  
  return context;
 508c494:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 508c498:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 508c49c:	d0a00c17 	ldw	r2,-32720(gp)
 508c4a0:	10c000c4 	addi	r3,r2,3
 508c4a4:	00bfff04 	movi	r2,-4
 508c4a8:	1884703a 	and	r2,r3,r2
 508c4ac:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 508c4b0:	d0e00c17 	ldw	r3,-32720(gp)
 508c4b4:	e0bfff17 	ldw	r2,-4(fp)
 508c4b8:	1885883a 	add	r2,r3,r2
 508c4bc:	00c14374 	movhi	r3,1293
 508c4c0:	18f88004 	addi	r3,r3,-7680
 508c4c4:	1880062e 	bgeu	r3,r2,508c4e0 <sbrk+0x74>
 508c4c8:	e0bffa17 	ldw	r2,-24(fp)
 508c4cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 508c4d0:	e0bffd17 	ldw	r2,-12(fp)
 508c4d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 508c4d8:	00bfffc4 	movi	r2,-1
 508c4dc:	00000b06 	br	508c50c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 508c4e0:	d0a00c17 	ldw	r2,-32720(gp)
 508c4e4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 508c4e8:	d0e00c17 	ldw	r3,-32720(gp)
 508c4ec:	e0bfff17 	ldw	r2,-4(fp)
 508c4f0:	1885883a 	add	r2,r3,r2
 508c4f4:	d0a00c15 	stw	r2,-32720(gp)
 508c4f8:	e0bffa17 	ldw	r2,-24(fp)
 508c4fc:	e0bffe15 	stw	r2,-8(fp)
 508c500:	e0bffe17 	ldw	r2,-8(fp)
 508c504:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 508c508:	e0bffb17 	ldw	r2,-20(fp)
} 
 508c50c:	e037883a 	mov	sp,fp
 508c510:	df000017 	ldw	fp,0(sp)
 508c514:	dec00104 	addi	sp,sp,4
 508c518:	f800283a 	ret

0508c51c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 508c51c:	defffd04 	addi	sp,sp,-12
 508c520:	dfc00215 	stw	ra,8(sp)
 508c524:	df000115 	stw	fp,4(sp)
 508c528:	df000104 	addi	fp,sp,4
 508c52c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 508c530:	e13fff17 	ldw	r4,-4(fp)
 508c534:	508d3f40 	call	508d3f4 <alt_busy_sleep>
}
 508c538:	e037883a 	mov	sp,fp
 508c53c:	dfc00117 	ldw	ra,4(sp)
 508c540:	df000017 	ldw	fp,0(sp)
 508c544:	dec00204 	addi	sp,sp,8
 508c548:	f800283a 	ret

0508c54c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 508c54c:	defffe04 	addi	sp,sp,-8
 508c550:	dfc00115 	stw	ra,4(sp)
 508c554:	df000015 	stw	fp,0(sp)
 508c558:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 508c55c:	00814274 	movhi	r2,1289
 508c560:	10839504 	addi	r2,r2,3668
 508c564:	10800017 	ldw	r2,0(r2)
 508c568:	10000526 	beq	r2,zero,508c580 <alt_get_errno+0x34>
 508c56c:	00814274 	movhi	r2,1289
 508c570:	10839504 	addi	r2,r2,3668
 508c574:	10800017 	ldw	r2,0(r2)
 508c578:	103ee83a 	callr	r2
 508c57c:	00000206 	br	508c588 <alt_get_errno+0x3c>
 508c580:	00814274 	movhi	r2,1289
 508c584:	108a3d04 	addi	r2,r2,10484
}
 508c588:	e037883a 	mov	sp,fp
 508c58c:	dfc00117 	ldw	ra,4(sp)
 508c590:	df000017 	ldw	fp,0(sp)
 508c594:	dec00204 	addi	sp,sp,8
 508c598:	f800283a 	ret

0508c59c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 508c59c:	defff904 	addi	sp,sp,-28
 508c5a0:	dfc00615 	stw	ra,24(sp)
 508c5a4:	df000515 	stw	fp,20(sp)
 508c5a8:	df000504 	addi	fp,sp,20
 508c5ac:	e13ffd15 	stw	r4,-12(fp)
 508c5b0:	e17ffe15 	stw	r5,-8(fp)
 508c5b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 508c5b8:	e0bffd17 	ldw	r2,-12(fp)
 508c5bc:	10000616 	blt	r2,zero,508c5d8 <write+0x3c>
 508c5c0:	e0bffd17 	ldw	r2,-12(fp)
 508c5c4:	10c00324 	muli	r3,r2,12
 508c5c8:	00814274 	movhi	r2,1289
 508c5cc:	10bf1304 	addi	r2,r2,-948
 508c5d0:	1885883a 	add	r2,r3,r2
 508c5d4:	00000106 	br	508c5dc <write+0x40>
 508c5d8:	0005883a 	mov	r2,zero
 508c5dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 508c5e0:	e0bffb17 	ldw	r2,-20(fp)
 508c5e4:	10001f26 	beq	r2,zero,508c664 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 508c5e8:	e0bffb17 	ldw	r2,-20(fp)
 508c5ec:	10800217 	ldw	r2,8(r2)
 508c5f0:	108000cc 	andi	r2,r2,3
 508c5f4:	10001726 	beq	r2,zero,508c654 <write+0xb8>
 508c5f8:	e0bffb17 	ldw	r2,-20(fp)
 508c5fc:	10800017 	ldw	r2,0(r2)
 508c600:	10800617 	ldw	r2,24(r2)
 508c604:	10001326 	beq	r2,zero,508c654 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 508c608:	e0bffb17 	ldw	r2,-20(fp)
 508c60c:	10800017 	ldw	r2,0(r2)
 508c610:	10c00617 	ldw	r3,24(r2)
 508c614:	e0bfff17 	ldw	r2,-4(fp)
 508c618:	e13ffb17 	ldw	r4,-20(fp)
 508c61c:	e17ffe17 	ldw	r5,-8(fp)
 508c620:	100d883a 	mov	r6,r2
 508c624:	183ee83a 	callr	r3
 508c628:	e0bffc15 	stw	r2,-16(fp)
 508c62c:	e0bffc17 	ldw	r2,-16(fp)
 508c630:	1000060e 	bge	r2,zero,508c64c <write+0xb0>
      {
        ALT_ERRNO = -rval;
 508c634:	508c54c0 	call	508c54c <alt_get_errno>
 508c638:	e0fffc17 	ldw	r3,-16(fp)
 508c63c:	00c7c83a 	sub	r3,zero,r3
 508c640:	10c00015 	stw	r3,0(r2)
        return -1;
 508c644:	00bfffc4 	movi	r2,-1
 508c648:	00000a06 	br	508c674 <write+0xd8>
      }
      return rval;
 508c64c:	e0bffc17 	ldw	r2,-16(fp)
 508c650:	00000806 	br	508c674 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
 508c654:	508c54c0 	call	508c54c <alt_get_errno>
 508c658:	00c00344 	movi	r3,13
 508c65c:	10c00015 	stw	r3,0(r2)
 508c660:	00000306 	br	508c670 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 508c664:	508c54c0 	call	508c54c <alt_get_errno>
 508c668:	00c01444 	movi	r3,81
 508c66c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 508c670:	00bfffc4 	movi	r2,-1
}
 508c674:	e037883a 	mov	sp,fp
 508c678:	dfc00117 	ldw	ra,4(sp)
 508c67c:	df000017 	ldw	fp,0(sp)
 508c680:	dec00204 	addi	sp,sp,8
 508c684:	f800283a 	ret

0508c688 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 508c688:	defffd04 	addi	sp,sp,-12
 508c68c:	dfc00215 	stw	ra,8(sp)
 508c690:	df000115 	stw	fp,4(sp)
 508c694:	df000104 	addi	fp,sp,4
 508c698:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 508c69c:	e13fff17 	ldw	r4,-4(fp)
 508c6a0:	01414274 	movhi	r5,1289
 508c6a4:	29439204 	addi	r5,r5,3656
 508c6a8:	508d5dc0 	call	508d5dc <alt_dev_llist_insert>
}
 508c6ac:	e037883a 	mov	sp,fp
 508c6b0:	dfc00117 	ldw	ra,4(sp)
 508c6b4:	df000017 	ldw	fp,0(sp)
 508c6b8:	dec00204 	addi	sp,sp,8
 508c6bc:	f800283a 	ret

0508c6c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 508c6c0:	defffd04 	addi	sp,sp,-12
 508c6c4:	dfc00215 	stw	ra,8(sp)
 508c6c8:	df000115 	stw	fp,4(sp)
 508c6cc:	df000104 	addi	fp,sp,4
 508c6d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 508c6d4:	508df700 	call	508df70 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 508c6d8:	00800044 	movi	r2,1
 508c6dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 508c6e0:	e037883a 	mov	sp,fp
 508c6e4:	dfc00117 	ldw	ra,4(sp)
 508c6e8:	df000017 	ldw	fp,0(sp)
 508c6ec:	dec00204 	addi	sp,sp,8
 508c6f0:	f800283a 	ret

0508c6f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 508c6f4:	defffe04 	addi	sp,sp,-8
 508c6f8:	dfc00115 	stw	ra,4(sp)
 508c6fc:	df000015 	stw	fp,0(sp)
 508c700:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 508c704:	01014434 	movhi	r4,1296
 508c708:	21040004 	addi	r4,r4,4096
 508c70c:	000b883a 	mov	r5,zero
 508c710:	018000c4 	movi	r6,3
 508c714:	01c0fa04 	movi	r7,1000
 508c718:	508d22c0 	call	508d22c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 508c71c:	01014274 	movhi	r4,1289
 508c720:	213f7d04 	addi	r4,r4,-524
 508c724:	000b883a 	mov	r5,zero
 508c728:	000d883a 	mov	r6,zero
 508c72c:	508c8b80 	call	508c8b8 <altera_avalon_jtag_uart_init>
 508c730:	01014274 	movhi	r4,1289
 508c734:	213f7304 	addi	r4,r4,-564
 508c738:	508c6880 	call	508c688 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 508c73c:	0001883a 	nop
}
 508c740:	e037883a 	mov	sp,fp
 508c744:	dfc00117 	ldw	ra,4(sp)
 508c748:	df000017 	ldw	fp,0(sp)
 508c74c:	dec00204 	addi	sp,sp,8
 508c750:	f800283a 	ret

0508c754 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 508c754:	defffa04 	addi	sp,sp,-24
 508c758:	dfc00515 	stw	ra,20(sp)
 508c75c:	df000415 	stw	fp,16(sp)
 508c760:	df000404 	addi	fp,sp,16
 508c764:	e13ffd15 	stw	r4,-12(fp)
 508c768:	e17ffe15 	stw	r5,-8(fp)
 508c76c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 508c770:	e0bffd17 	ldw	r2,-12(fp)
 508c774:	10800017 	ldw	r2,0(r2)
 508c778:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 508c77c:	e0bffc17 	ldw	r2,-16(fp)
 508c780:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 508c784:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 508c788:	10800217 	ldw	r2,8(r2)
 508c78c:	1809883a 	mov	r4,r3
 508c790:	e17ffe17 	ldw	r5,-8(fp)
 508c794:	e1bfff17 	ldw	r6,-4(fp)
 508c798:	100f883a 	mov	r7,r2
 508c79c:	508cd7c0 	call	508cd7c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 508c7a0:	e037883a 	mov	sp,fp
 508c7a4:	dfc00117 	ldw	ra,4(sp)
 508c7a8:	df000017 	ldw	fp,0(sp)
 508c7ac:	dec00204 	addi	sp,sp,8
 508c7b0:	f800283a 	ret

0508c7b4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 508c7b4:	defffa04 	addi	sp,sp,-24
 508c7b8:	dfc00515 	stw	ra,20(sp)
 508c7bc:	df000415 	stw	fp,16(sp)
 508c7c0:	df000404 	addi	fp,sp,16
 508c7c4:	e13ffd15 	stw	r4,-12(fp)
 508c7c8:	e17ffe15 	stw	r5,-8(fp)
 508c7cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 508c7d0:	e0bffd17 	ldw	r2,-12(fp)
 508c7d4:	10800017 	ldw	r2,0(r2)
 508c7d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 508c7dc:	e0bffc17 	ldw	r2,-16(fp)
 508c7e0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 508c7e4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 508c7e8:	10800217 	ldw	r2,8(r2)
 508c7ec:	1809883a 	mov	r4,r3
 508c7f0:	e17ffe17 	ldw	r5,-8(fp)
 508c7f4:	e1bfff17 	ldw	r6,-4(fp)
 508c7f8:	100f883a 	mov	r7,r2
 508c7fc:	508cf940 	call	508cf94 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 508c800:	e037883a 	mov	sp,fp
 508c804:	dfc00117 	ldw	ra,4(sp)
 508c808:	df000017 	ldw	fp,0(sp)
 508c80c:	dec00204 	addi	sp,sp,8
 508c810:	f800283a 	ret

0508c814 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 508c814:	defffc04 	addi	sp,sp,-16
 508c818:	dfc00315 	stw	ra,12(sp)
 508c81c:	df000215 	stw	fp,8(sp)
 508c820:	df000204 	addi	fp,sp,8
 508c824:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 508c828:	e0bfff17 	ldw	r2,-4(fp)
 508c82c:	10800017 	ldw	r2,0(r2)
 508c830:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 508c834:	e0bffe17 	ldw	r2,-8(fp)
 508c838:	10c00a04 	addi	r3,r2,40
 508c83c:	e0bfff17 	ldw	r2,-4(fp)
 508c840:	10800217 	ldw	r2,8(r2)
 508c844:	1809883a 	mov	r4,r3
 508c848:	100b883a 	mov	r5,r2
 508c84c:	508cc200 	call	508cc20 <altera_avalon_jtag_uart_close>
}
 508c850:	e037883a 	mov	sp,fp
 508c854:	dfc00117 	ldw	ra,4(sp)
 508c858:	df000017 	ldw	fp,0(sp)
 508c85c:	dec00204 	addi	sp,sp,8
 508c860:	f800283a 	ret

0508c864 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 508c864:	defffa04 	addi	sp,sp,-24
 508c868:	dfc00515 	stw	ra,20(sp)
 508c86c:	df000415 	stw	fp,16(sp)
 508c870:	df000404 	addi	fp,sp,16
 508c874:	e13ffd15 	stw	r4,-12(fp)
 508c878:	e17ffe15 	stw	r5,-8(fp)
 508c87c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 508c880:	e0bffd17 	ldw	r2,-12(fp)
 508c884:	10800017 	ldw	r2,0(r2)
 508c888:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 508c88c:	e0bffc17 	ldw	r2,-16(fp)
 508c890:	10800a04 	addi	r2,r2,40
 508c894:	1009883a 	mov	r4,r2
 508c898:	e17ffe17 	ldw	r5,-8(fp)
 508c89c:	e1bfff17 	ldw	r6,-4(fp)
 508c8a0:	508cc880 	call	508cc88 <altera_avalon_jtag_uart_ioctl>
}
 508c8a4:	e037883a 	mov	sp,fp
 508c8a8:	dfc00117 	ldw	ra,4(sp)
 508c8ac:	df000017 	ldw	fp,0(sp)
 508c8b0:	dec00204 	addi	sp,sp,8
 508c8b4:	f800283a 	ret

0508c8b8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 508c8b8:	defffa04 	addi	sp,sp,-24
 508c8bc:	dfc00515 	stw	ra,20(sp)
 508c8c0:	df000415 	stw	fp,16(sp)
 508c8c4:	df000404 	addi	fp,sp,16
 508c8c8:	e13ffd15 	stw	r4,-12(fp)
 508c8cc:	e17ffe15 	stw	r5,-8(fp)
 508c8d0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 508c8d4:	e0bffd17 	ldw	r2,-12(fp)
 508c8d8:	00c00044 	movi	r3,1
 508c8dc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 508c8e0:	e0bffd17 	ldw	r2,-12(fp)
 508c8e4:	10800017 	ldw	r2,0(r2)
 508c8e8:	10800104 	addi	r2,r2,4
 508c8ec:	e0fffd17 	ldw	r3,-12(fp)
 508c8f0:	18c00817 	ldw	r3,32(r3)
 508c8f4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 508c8f8:	e0fffe17 	ldw	r3,-8(fp)
 508c8fc:	e0bfff17 	ldw	r2,-4(fp)
 508c900:	d8000015 	stw	zero,0(sp)
 508c904:	1809883a 	mov	r4,r3
 508c908:	100b883a 	mov	r5,r2
 508c90c:	01814274 	movhi	r6,1289
 508c910:	31b25e04 	addi	r6,r6,-13960
 508c914:	e1fffd17 	ldw	r7,-12(fp)
 508c918:	508d7640 	call	508d764 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 508c91c:	e0bffd17 	ldw	r2,-12(fp)
 508c920:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 508c924:	e0bffd17 	ldw	r2,-12(fp)
 508c928:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 508c92c:	00814274 	movhi	r2,1289
 508c930:	108a4204 	addi	r2,r2,10504
 508c934:	10800017 	ldw	r2,0(r2)
 508c938:	1809883a 	mov	r4,r3
 508c93c:	100b883a 	mov	r5,r2
 508c940:	01814274 	movhi	r6,1289
 508c944:	31b2df04 	addi	r6,r6,-13444
 508c948:	e1fffd17 	ldw	r7,-12(fp)
 508c94c:	508d2b40 	call	508d2b4 <alt_alarm_start>
 508c950:	1000040e 	bge	r2,zero,508c964 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 508c954:	e0bffd17 	ldw	r2,-12(fp)
 508c958:	00e00034 	movhi	r3,32768
 508c95c:	18ffffc4 	addi	r3,r3,-1
 508c960:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 508c964:	e037883a 	mov	sp,fp
 508c968:	dfc00117 	ldw	ra,4(sp)
 508c96c:	df000017 	ldw	fp,0(sp)
 508c970:	dec00204 	addi	sp,sp,8
 508c974:	f800283a 	ret

0508c978 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 508c978:	defff804 	addi	sp,sp,-32
 508c97c:	df000715 	stw	fp,28(sp)
 508c980:	df000704 	addi	fp,sp,28
 508c984:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 508c988:	e0bfff17 	ldw	r2,-4(fp)
 508c98c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 508c990:	e0bffb17 	ldw	r2,-20(fp)
 508c994:	10800017 	ldw	r2,0(r2)
 508c998:	e0bffc15 	stw	r2,-16(fp)
 508c99c:	00000106 	br	508c9a4 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 508c9a0:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 508c9a4:	e0bffc17 	ldw	r2,-16(fp)
 508c9a8:	10800104 	addi	r2,r2,4
 508c9ac:	10800037 	ldwio	r2,0(r2)
 508c9b0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 508c9b4:	e0bffd17 	ldw	r2,-12(fp)
 508c9b8:	1080c00c 	andi	r2,r2,768
 508c9bc:	10006a26 	beq	r2,zero,508cb68 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 508c9c0:	e0bffd17 	ldw	r2,-12(fp)
 508c9c4:	1080400c 	andi	r2,r2,256
 508c9c8:	10003326 	beq	r2,zero,508ca98 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 508c9cc:	00800074 	movhi	r2,1
 508c9d0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 508c9d4:	e0bffb17 	ldw	r2,-20(fp)
 508c9d8:	10800a17 	ldw	r2,40(r2)
 508c9dc:	10800044 	addi	r2,r2,1
 508c9e0:	1081ffcc 	andi	r2,r2,2047
 508c9e4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 508c9e8:	e0bffb17 	ldw	r2,-20(fp)
 508c9ec:	10c00b17 	ldw	r3,44(r2)
 508c9f0:	e0bffe17 	ldw	r2,-8(fp)
 508c9f4:	18801426 	beq	r3,r2,508ca48 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 508c9f8:	e0bffc17 	ldw	r2,-16(fp)
 508c9fc:	10800037 	ldwio	r2,0(r2)
 508ca00:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 508ca04:	e0bff917 	ldw	r2,-28(fp)
 508ca08:	10a0000c 	andi	r2,r2,32768
 508ca0c:	10001026 	beq	r2,zero,508ca50 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 508ca10:	e0bffb17 	ldw	r2,-20(fp)
 508ca14:	10800a17 	ldw	r2,40(r2)
 508ca18:	e0fff917 	ldw	r3,-28(fp)
 508ca1c:	e13ffb17 	ldw	r4,-20(fp)
 508ca20:	2085883a 	add	r2,r4,r2
 508ca24:	10800e04 	addi	r2,r2,56
 508ca28:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 508ca2c:	e0bffb17 	ldw	r2,-20(fp)
 508ca30:	10800a17 	ldw	r2,40(r2)
 508ca34:	10800044 	addi	r2,r2,1
 508ca38:	10c1ffcc 	andi	r3,r2,2047
 508ca3c:	e0bffb17 	ldw	r2,-20(fp)
 508ca40:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 508ca44:	003fe306 	br	508c9d4 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 508ca48:	0001883a 	nop
 508ca4c:	00000106 	br	508ca54 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 508ca50:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 508ca54:	e0bff917 	ldw	r2,-28(fp)
 508ca58:	10bfffec 	andhi	r2,r2,65535
 508ca5c:	10000e26 	beq	r2,zero,508ca98 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 508ca60:	e0bffb17 	ldw	r2,-20(fp)
 508ca64:	10c00817 	ldw	r3,32(r2)
 508ca68:	00bfff84 	movi	r2,-2
 508ca6c:	1886703a 	and	r3,r3,r2
 508ca70:	e0bffb17 	ldw	r2,-20(fp)
 508ca74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 508ca78:	e0bffc17 	ldw	r2,-16(fp)
 508ca7c:	10800104 	addi	r2,r2,4
 508ca80:	e0fffb17 	ldw	r3,-20(fp)
 508ca84:	18c00817 	ldw	r3,32(r3)
 508ca88:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 508ca8c:	e0bffc17 	ldw	r2,-16(fp)
 508ca90:	10800104 	addi	r2,r2,4
 508ca94:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 508ca98:	e0bffd17 	ldw	r2,-12(fp)
 508ca9c:	1080800c 	andi	r2,r2,512
 508caa0:	103fbf26 	beq	r2,zero,508c9a0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 508caa4:	e0bffd17 	ldw	r2,-12(fp)
 508caa8:	1004d43a 	srli	r2,r2,16
 508caac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 508cab0:	00001406 	br	508cb04 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 508cab4:	e0bffc17 	ldw	r2,-16(fp)
 508cab8:	e0fffb17 	ldw	r3,-20(fp)
 508cabc:	18c00d17 	ldw	r3,52(r3)
 508cac0:	e13ffb17 	ldw	r4,-20(fp)
 508cac4:	20c7883a 	add	r3,r4,r3
 508cac8:	18c20e04 	addi	r3,r3,2104
 508cacc:	18c00003 	ldbu	r3,0(r3)
 508cad0:	18c03fcc 	andi	r3,r3,255
 508cad4:	18c0201c 	xori	r3,r3,128
 508cad8:	18ffe004 	addi	r3,r3,-128
 508cadc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 508cae0:	e0bffb17 	ldw	r2,-20(fp)
 508cae4:	10800d17 	ldw	r2,52(r2)
 508cae8:	10800044 	addi	r2,r2,1
 508caec:	10c1ffcc 	andi	r3,r2,2047
 508caf0:	e0bffb17 	ldw	r2,-20(fp)
 508caf4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 508caf8:	e0bffa17 	ldw	r2,-24(fp)
 508cafc:	10bfffc4 	addi	r2,r2,-1
 508cb00:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 508cb04:	e0bffa17 	ldw	r2,-24(fp)
 508cb08:	10000526 	beq	r2,zero,508cb20 <altera_avalon_jtag_uart_irq+0x1a8>
 508cb0c:	e0bffb17 	ldw	r2,-20(fp)
 508cb10:	10c00d17 	ldw	r3,52(r2)
 508cb14:	e0bffb17 	ldw	r2,-20(fp)
 508cb18:	10800c17 	ldw	r2,48(r2)
 508cb1c:	18bfe51e 	bne	r3,r2,508cab4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 508cb20:	e0bffa17 	ldw	r2,-24(fp)
 508cb24:	103f9e26 	beq	r2,zero,508c9a0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 508cb28:	e0bffb17 	ldw	r2,-20(fp)
 508cb2c:	10c00817 	ldw	r3,32(r2)
 508cb30:	00bfff44 	movi	r2,-3
 508cb34:	1886703a 	and	r3,r3,r2
 508cb38:	e0bffb17 	ldw	r2,-20(fp)
 508cb3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 508cb40:	e0bffb17 	ldw	r2,-20(fp)
 508cb44:	10800017 	ldw	r2,0(r2)
 508cb48:	10800104 	addi	r2,r2,4
 508cb4c:	e0fffb17 	ldw	r3,-20(fp)
 508cb50:	18c00817 	ldw	r3,32(r3)
 508cb54:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 508cb58:	e0bffc17 	ldw	r2,-16(fp)
 508cb5c:	10800104 	addi	r2,r2,4
 508cb60:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 508cb64:	003f8e06 	br	508c9a0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 508cb68:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 508cb6c:	e037883a 	mov	sp,fp
 508cb70:	df000017 	ldw	fp,0(sp)
 508cb74:	dec00104 	addi	sp,sp,4
 508cb78:	f800283a 	ret

0508cb7c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 508cb7c:	defffc04 	addi	sp,sp,-16
 508cb80:	df000315 	stw	fp,12(sp)
 508cb84:	df000304 	addi	fp,sp,12
 508cb88:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 508cb8c:	e0bfff17 	ldw	r2,-4(fp)
 508cb90:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 508cb94:	e0bffd17 	ldw	r2,-12(fp)
 508cb98:	10800017 	ldw	r2,0(r2)
 508cb9c:	10800104 	addi	r2,r2,4
 508cba0:	10800037 	ldwio	r2,0(r2)
 508cba4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 508cba8:	e0bffe17 	ldw	r2,-8(fp)
 508cbac:	1081000c 	andi	r2,r2,1024
 508cbb0:	10000a26 	beq	r2,zero,508cbdc <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 508cbb4:	e0bffd17 	ldw	r2,-12(fp)
 508cbb8:	10800017 	ldw	r2,0(r2)
 508cbbc:	10800104 	addi	r2,r2,4
 508cbc0:	e0fffd17 	ldw	r3,-12(fp)
 508cbc4:	18c00817 	ldw	r3,32(r3)
 508cbc8:	18c10014 	ori	r3,r3,1024
 508cbcc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 508cbd0:	e0bffd17 	ldw	r2,-12(fp)
 508cbd4:	10000915 	stw	zero,36(r2)
 508cbd8:	00000a06 	br	508cc04 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 508cbdc:	e0bffd17 	ldw	r2,-12(fp)
 508cbe0:	10800917 	ldw	r2,36(r2)
 508cbe4:	00e00034 	movhi	r3,32768
 508cbe8:	18ffff04 	addi	r3,r3,-4
 508cbec:	18800536 	bltu	r3,r2,508cc04 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 508cbf0:	e0bffd17 	ldw	r2,-12(fp)
 508cbf4:	10800917 	ldw	r2,36(r2)
 508cbf8:	10c00044 	addi	r3,r2,1
 508cbfc:	e0bffd17 	ldw	r2,-12(fp)
 508cc00:	10c00915 	stw	r3,36(r2)
 508cc04:	00814274 	movhi	r2,1289
 508cc08:	108a4204 	addi	r2,r2,10504
 508cc0c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 508cc10:	e037883a 	mov	sp,fp
 508cc14:	df000017 	ldw	fp,0(sp)
 508cc18:	dec00104 	addi	sp,sp,4
 508cc1c:	f800283a 	ret

0508cc20 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 508cc20:	defffd04 	addi	sp,sp,-12
 508cc24:	df000215 	stw	fp,8(sp)
 508cc28:	df000204 	addi	fp,sp,8
 508cc2c:	e13ffe15 	stw	r4,-8(fp)
 508cc30:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 508cc34:	00000506 	br	508cc4c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 508cc38:	e0bfff17 	ldw	r2,-4(fp)
 508cc3c:	1090000c 	andi	r2,r2,16384
 508cc40:	10000226 	beq	r2,zero,508cc4c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 508cc44:	00bffd44 	movi	r2,-11
 508cc48:	00000b06 	br	508cc78 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 508cc4c:	e0bffe17 	ldw	r2,-8(fp)
 508cc50:	10c00d17 	ldw	r3,52(r2)
 508cc54:	e0bffe17 	ldw	r2,-8(fp)
 508cc58:	10800c17 	ldw	r2,48(r2)
 508cc5c:	18800526 	beq	r3,r2,508cc74 <altera_avalon_jtag_uart_close+0x54>
 508cc60:	e0bffe17 	ldw	r2,-8(fp)
 508cc64:	10c00917 	ldw	r3,36(r2)
 508cc68:	e0bffe17 	ldw	r2,-8(fp)
 508cc6c:	10800117 	ldw	r2,4(r2)
 508cc70:	18bff136 	bltu	r3,r2,508cc38 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 508cc74:	0005883a 	mov	r2,zero
}
 508cc78:	e037883a 	mov	sp,fp
 508cc7c:	df000017 	ldw	fp,0(sp)
 508cc80:	dec00104 	addi	sp,sp,4
 508cc84:	f800283a 	ret

0508cc88 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 508cc88:	defffa04 	addi	sp,sp,-24
 508cc8c:	df000515 	stw	fp,20(sp)
 508cc90:	df000504 	addi	fp,sp,20
 508cc94:	e13ffd15 	stw	r4,-12(fp)
 508cc98:	e17ffe15 	stw	r5,-8(fp)
 508cc9c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 508cca0:	00bff9c4 	movi	r2,-25
 508cca4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 508cca8:	e0bffe17 	ldw	r2,-8(fp)
 508ccac:	10da8060 	cmpeqi	r3,r2,27137
 508ccb0:	1800031e 	bne	r3,zero,508ccc0 <altera_avalon_jtag_uart_ioctl+0x38>
 508ccb4:	109a80a0 	cmpeqi	r2,r2,27138
 508ccb8:	1000181e 	bne	r2,zero,508cd1c <altera_avalon_jtag_uart_ioctl+0x94>
 508ccbc:	00002606 	br	508cd58 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 508ccc0:	e0bffd17 	ldw	r2,-12(fp)
 508ccc4:	10c00117 	ldw	r3,4(r2)
 508ccc8:	00a00034 	movhi	r2,32768
 508cccc:	10bfffc4 	addi	r2,r2,-1
 508ccd0:	18802226 	beq	r3,r2,508cd5c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 508ccd4:	e0bfff17 	ldw	r2,-4(fp)
 508ccd8:	10800017 	ldw	r2,0(r2)
 508ccdc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 508cce0:	e0bffc17 	ldw	r2,-16(fp)
 508cce4:	10800090 	cmplti	r2,r2,2
 508cce8:	1000061e 	bne	r2,zero,508cd04 <altera_avalon_jtag_uart_ioctl+0x7c>
 508ccec:	e0fffc17 	ldw	r3,-16(fp)
 508ccf0:	00a00034 	movhi	r2,32768
 508ccf4:	10bfffc4 	addi	r2,r2,-1
 508ccf8:	18800226 	beq	r3,r2,508cd04 <altera_avalon_jtag_uart_ioctl+0x7c>
 508ccfc:	e0bffc17 	ldw	r2,-16(fp)
 508cd00:	00000206 	br	508cd0c <altera_avalon_jtag_uart_ioctl+0x84>
 508cd04:	00a00034 	movhi	r2,32768
 508cd08:	10bfff84 	addi	r2,r2,-2
 508cd0c:	e0fffd17 	ldw	r3,-12(fp)
 508cd10:	18800115 	stw	r2,4(r3)
      rc = 0;
 508cd14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 508cd18:	00001006 	br	508cd5c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 508cd1c:	e0bffd17 	ldw	r2,-12(fp)
 508cd20:	10c00117 	ldw	r3,4(r2)
 508cd24:	00a00034 	movhi	r2,32768
 508cd28:	10bfffc4 	addi	r2,r2,-1
 508cd2c:	18800d26 	beq	r3,r2,508cd64 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 508cd30:	e0bffd17 	ldw	r2,-12(fp)
 508cd34:	10c00917 	ldw	r3,36(r2)
 508cd38:	e0bffd17 	ldw	r2,-12(fp)
 508cd3c:	10800117 	ldw	r2,4(r2)
 508cd40:	1885803a 	cmpltu	r2,r3,r2
 508cd44:	10c03fcc 	andi	r3,r2,255
 508cd48:	e0bfff17 	ldw	r2,-4(fp)
 508cd4c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 508cd50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 508cd54:	00000306 	br	508cd64 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 508cd58:	00000306 	br	508cd68 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 508cd5c:	0001883a 	nop
 508cd60:	00000106 	br	508cd68 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 508cd64:	0001883a 	nop

  default:
    break;
  }

  return rc;
 508cd68:	e0bffb17 	ldw	r2,-20(fp)
}
 508cd6c:	e037883a 	mov	sp,fp
 508cd70:	df000017 	ldw	fp,0(sp)
 508cd74:	dec00104 	addi	sp,sp,4
 508cd78:	f800283a 	ret

0508cd7c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 508cd7c:	defff304 	addi	sp,sp,-52
 508cd80:	dfc00c15 	stw	ra,48(sp)
 508cd84:	df000b15 	stw	fp,44(sp)
 508cd88:	df000b04 	addi	fp,sp,44
 508cd8c:	e13ffc15 	stw	r4,-16(fp)
 508cd90:	e17ffd15 	stw	r5,-12(fp)
 508cd94:	e1bffe15 	stw	r6,-8(fp)
 508cd98:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 508cd9c:	e0bffd17 	ldw	r2,-12(fp)
 508cda0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 508cda4:	00004706 	br	508cec4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 508cda8:	e0bffc17 	ldw	r2,-16(fp)
 508cdac:	10800a17 	ldw	r2,40(r2)
 508cdb0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 508cdb4:	e0bffc17 	ldw	r2,-16(fp)
 508cdb8:	10800b17 	ldw	r2,44(r2)
 508cdbc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 508cdc0:	e0fff717 	ldw	r3,-36(fp)
 508cdc4:	e0bff817 	ldw	r2,-32(fp)
 508cdc8:	18800536 	bltu	r3,r2,508cde0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 508cdcc:	e0fff717 	ldw	r3,-36(fp)
 508cdd0:	e0bff817 	ldw	r2,-32(fp)
 508cdd4:	1885c83a 	sub	r2,r3,r2
 508cdd8:	e0bff615 	stw	r2,-40(fp)
 508cddc:	00000406 	br	508cdf0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 508cde0:	00c20004 	movi	r3,2048
 508cde4:	e0bff817 	ldw	r2,-32(fp)
 508cde8:	1885c83a 	sub	r2,r3,r2
 508cdec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 508cdf0:	e0bff617 	ldw	r2,-40(fp)
 508cdf4:	10001e26 	beq	r2,zero,508ce70 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 508cdf8:	e0fffe17 	ldw	r3,-8(fp)
 508cdfc:	e0bff617 	ldw	r2,-40(fp)
 508ce00:	1880022e 	bgeu	r3,r2,508ce0c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 508ce04:	e0bffe17 	ldw	r2,-8(fp)
 508ce08:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 508ce0c:	e0bff817 	ldw	r2,-32(fp)
 508ce10:	10800e04 	addi	r2,r2,56
 508ce14:	e0fffc17 	ldw	r3,-16(fp)
 508ce18:	1885883a 	add	r2,r3,r2
 508ce1c:	e13ff517 	ldw	r4,-44(fp)
 508ce20:	100b883a 	mov	r5,r2
 508ce24:	e1bff617 	ldw	r6,-40(fp)
 508ce28:	5087d3c0 	call	5087d3c <memcpy>
      ptr   += n;
 508ce2c:	e0fff517 	ldw	r3,-44(fp)
 508ce30:	e0bff617 	ldw	r2,-40(fp)
 508ce34:	1885883a 	add	r2,r3,r2
 508ce38:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 508ce3c:	e0fffe17 	ldw	r3,-8(fp)
 508ce40:	e0bff617 	ldw	r2,-40(fp)
 508ce44:	1885c83a 	sub	r2,r3,r2
 508ce48:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 508ce4c:	e0fff817 	ldw	r3,-32(fp)
 508ce50:	e0bff617 	ldw	r2,-40(fp)
 508ce54:	1885883a 	add	r2,r3,r2
 508ce58:	10c1ffcc 	andi	r3,r2,2047
 508ce5c:	e0bffc17 	ldw	r2,-16(fp)
 508ce60:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 508ce64:	e0bffe17 	ldw	r2,-8(fp)
 508ce68:	00bfcf16 	blt	zero,r2,508cda8 <altera_avalon_jtag_uart_read+0x2c>
 508ce6c:	00000106 	br	508ce74 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 508ce70:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 508ce74:	e0fff517 	ldw	r3,-44(fp)
 508ce78:	e0bffd17 	ldw	r2,-12(fp)
 508ce7c:	1880141e 	bne	r3,r2,508ced0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 508ce80:	e0bfff17 	ldw	r2,-4(fp)
 508ce84:	1090000c 	andi	r2,r2,16384
 508ce88:	1000131e 	bne	r2,zero,508ced8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 508ce8c:	0001883a 	nop
 508ce90:	e0bffc17 	ldw	r2,-16(fp)
 508ce94:	10c00a17 	ldw	r3,40(r2)
 508ce98:	e0bff717 	ldw	r2,-36(fp)
 508ce9c:	1880051e 	bne	r3,r2,508ceb4 <altera_avalon_jtag_uart_read+0x138>
 508cea0:	e0bffc17 	ldw	r2,-16(fp)
 508cea4:	10c00917 	ldw	r3,36(r2)
 508cea8:	e0bffc17 	ldw	r2,-16(fp)
 508ceac:	10800117 	ldw	r2,4(r2)
 508ceb0:	18bff736 	bltu	r3,r2,508ce90 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 508ceb4:	e0bffc17 	ldw	r2,-16(fp)
 508ceb8:	10c00a17 	ldw	r3,40(r2)
 508cebc:	e0bff717 	ldw	r2,-36(fp)
 508cec0:	18800726 	beq	r3,r2,508cee0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 508cec4:	e0bffe17 	ldw	r2,-8(fp)
 508cec8:	00bfb716 	blt	zero,r2,508cda8 <altera_avalon_jtag_uart_read+0x2c>
 508cecc:	00000506 	br	508cee4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 508ced0:	0001883a 	nop
 508ced4:	00000306 	br	508cee4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 508ced8:	0001883a 	nop
 508cedc:	00000106 	br	508cee4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 508cee0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 508cee4:	e0fff517 	ldw	r3,-44(fp)
 508cee8:	e0bffd17 	ldw	r2,-12(fp)
 508ceec:	18801726 	beq	r3,r2,508cf4c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508cef0:	0005303a 	rdctl	r2,status
 508cef4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508cef8:	e0fffa17 	ldw	r3,-24(fp)
 508cefc:	00bfff84 	movi	r2,-2
 508cf00:	1884703a 	and	r2,r3,r2
 508cf04:	1001703a 	wrctl	status,r2
  
  return context;
 508cf08:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 508cf0c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 508cf10:	e0bffc17 	ldw	r2,-16(fp)
 508cf14:	10800817 	ldw	r2,32(r2)
 508cf18:	10c00054 	ori	r3,r2,1
 508cf1c:	e0bffc17 	ldw	r2,-16(fp)
 508cf20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 508cf24:	e0bffc17 	ldw	r2,-16(fp)
 508cf28:	10800017 	ldw	r2,0(r2)
 508cf2c:	10800104 	addi	r2,r2,4
 508cf30:	e0fffc17 	ldw	r3,-16(fp)
 508cf34:	18c00817 	ldw	r3,32(r3)
 508cf38:	10c00035 	stwio	r3,0(r2)
 508cf3c:	e0bff917 	ldw	r2,-28(fp)
 508cf40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 508cf44:	e0bffb17 	ldw	r2,-20(fp)
 508cf48:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 508cf4c:	e0fff517 	ldw	r3,-44(fp)
 508cf50:	e0bffd17 	ldw	r2,-12(fp)
 508cf54:	18800426 	beq	r3,r2,508cf68 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 508cf58:	e0fff517 	ldw	r3,-44(fp)
 508cf5c:	e0bffd17 	ldw	r2,-12(fp)
 508cf60:	1885c83a 	sub	r2,r3,r2
 508cf64:	00000606 	br	508cf80 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 508cf68:	e0bfff17 	ldw	r2,-4(fp)
 508cf6c:	1090000c 	andi	r2,r2,16384
 508cf70:	10000226 	beq	r2,zero,508cf7c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 508cf74:	00bffd44 	movi	r2,-11
 508cf78:	00000106 	br	508cf80 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 508cf7c:	00bffec4 	movi	r2,-5
}
 508cf80:	e037883a 	mov	sp,fp
 508cf84:	dfc00117 	ldw	ra,4(sp)
 508cf88:	df000017 	ldw	fp,0(sp)
 508cf8c:	dec00204 	addi	sp,sp,8
 508cf90:	f800283a 	ret

0508cf94 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 508cf94:	defff304 	addi	sp,sp,-52
 508cf98:	dfc00c15 	stw	ra,48(sp)
 508cf9c:	df000b15 	stw	fp,44(sp)
 508cfa0:	df000b04 	addi	fp,sp,44
 508cfa4:	e13ffc15 	stw	r4,-16(fp)
 508cfa8:	e17ffd15 	stw	r5,-12(fp)
 508cfac:	e1bffe15 	stw	r6,-8(fp)
 508cfb0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 508cfb4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 508cfb8:	e0bffd17 	ldw	r2,-12(fp)
 508cfbc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 508cfc0:	00003706 	br	508d0a0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 508cfc4:	e0bffc17 	ldw	r2,-16(fp)
 508cfc8:	10800c17 	ldw	r2,48(r2)
 508cfcc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 508cfd0:	e0bffc17 	ldw	r2,-16(fp)
 508cfd4:	10800d17 	ldw	r2,52(r2)
 508cfd8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 508cfdc:	e0fff817 	ldw	r3,-32(fp)
 508cfe0:	e0bff517 	ldw	r2,-44(fp)
 508cfe4:	1880062e 	bgeu	r3,r2,508d000 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 508cfe8:	e0fff517 	ldw	r3,-44(fp)
 508cfec:	e0bff817 	ldw	r2,-32(fp)
 508cff0:	1885c83a 	sub	r2,r3,r2
 508cff4:	10bfffc4 	addi	r2,r2,-1
 508cff8:	e0bff615 	stw	r2,-40(fp)
 508cffc:	00000b06 	br	508d02c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 508d000:	e0bff517 	ldw	r2,-44(fp)
 508d004:	10000526 	beq	r2,zero,508d01c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 508d008:	00c20004 	movi	r3,2048
 508d00c:	e0bff817 	ldw	r2,-32(fp)
 508d010:	1885c83a 	sub	r2,r3,r2
 508d014:	e0bff615 	stw	r2,-40(fp)
 508d018:	00000406 	br	508d02c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 508d01c:	00c1ffc4 	movi	r3,2047
 508d020:	e0bff817 	ldw	r2,-32(fp)
 508d024:	1885c83a 	sub	r2,r3,r2
 508d028:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 508d02c:	e0bff617 	ldw	r2,-40(fp)
 508d030:	10001e26 	beq	r2,zero,508d0ac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 508d034:	e0fffe17 	ldw	r3,-8(fp)
 508d038:	e0bff617 	ldw	r2,-40(fp)
 508d03c:	1880022e 	bgeu	r3,r2,508d048 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 508d040:	e0bffe17 	ldw	r2,-8(fp)
 508d044:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 508d048:	e0bff817 	ldw	r2,-32(fp)
 508d04c:	10820e04 	addi	r2,r2,2104
 508d050:	e0fffc17 	ldw	r3,-16(fp)
 508d054:	1885883a 	add	r2,r3,r2
 508d058:	1009883a 	mov	r4,r2
 508d05c:	e17ffd17 	ldw	r5,-12(fp)
 508d060:	e1bff617 	ldw	r6,-40(fp)
 508d064:	5087d3c0 	call	5087d3c <memcpy>
      ptr   += n;
 508d068:	e0fffd17 	ldw	r3,-12(fp)
 508d06c:	e0bff617 	ldw	r2,-40(fp)
 508d070:	1885883a 	add	r2,r3,r2
 508d074:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 508d078:	e0fffe17 	ldw	r3,-8(fp)
 508d07c:	e0bff617 	ldw	r2,-40(fp)
 508d080:	1885c83a 	sub	r2,r3,r2
 508d084:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 508d088:	e0fff817 	ldw	r3,-32(fp)
 508d08c:	e0bff617 	ldw	r2,-40(fp)
 508d090:	1885883a 	add	r2,r3,r2
 508d094:	10c1ffcc 	andi	r3,r2,2047
 508d098:	e0bffc17 	ldw	r2,-16(fp)
 508d09c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 508d0a0:	e0bffe17 	ldw	r2,-8(fp)
 508d0a4:	00bfc716 	blt	zero,r2,508cfc4 <altera_avalon_jtag_uart_write+0x30>
 508d0a8:	00000106 	br	508d0b0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 508d0ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508d0b0:	0005303a 	rdctl	r2,status
 508d0b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508d0b8:	e0fffa17 	ldw	r3,-24(fp)
 508d0bc:	00bfff84 	movi	r2,-2
 508d0c0:	1884703a 	and	r2,r3,r2
 508d0c4:	1001703a 	wrctl	status,r2
  
  return context;
 508d0c8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 508d0cc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 508d0d0:	e0bffc17 	ldw	r2,-16(fp)
 508d0d4:	10800817 	ldw	r2,32(r2)
 508d0d8:	10c00094 	ori	r3,r2,2
 508d0dc:	e0bffc17 	ldw	r2,-16(fp)
 508d0e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 508d0e4:	e0bffc17 	ldw	r2,-16(fp)
 508d0e8:	10800017 	ldw	r2,0(r2)
 508d0ec:	10800104 	addi	r2,r2,4
 508d0f0:	e0fffc17 	ldw	r3,-16(fp)
 508d0f4:	18c00817 	ldw	r3,32(r3)
 508d0f8:	10c00035 	stwio	r3,0(r2)
 508d0fc:	e0bff917 	ldw	r2,-28(fp)
 508d100:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 508d104:	e0bffb17 	ldw	r2,-20(fp)
 508d108:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 508d10c:	e0bffe17 	ldw	r2,-8(fp)
 508d110:	0080110e 	bge	zero,r2,508d158 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 508d114:	e0bfff17 	ldw	r2,-4(fp)
 508d118:	1090000c 	andi	r2,r2,16384
 508d11c:	1000111e 	bne	r2,zero,508d164 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 508d120:	0001883a 	nop
 508d124:	e0bffc17 	ldw	r2,-16(fp)
 508d128:	10c00d17 	ldw	r3,52(r2)
 508d12c:	e0bff517 	ldw	r2,-44(fp)
 508d130:	1880051e 	bne	r3,r2,508d148 <altera_avalon_jtag_uart_write+0x1b4>
 508d134:	e0bffc17 	ldw	r2,-16(fp)
 508d138:	10c00917 	ldw	r3,36(r2)
 508d13c:	e0bffc17 	ldw	r2,-16(fp)
 508d140:	10800117 	ldw	r2,4(r2)
 508d144:	18bff736 	bltu	r3,r2,508d124 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 508d148:	e0bffc17 	ldw	r2,-16(fp)
 508d14c:	10c00d17 	ldw	r3,52(r2)
 508d150:	e0bff517 	ldw	r2,-44(fp)
 508d154:	18800526 	beq	r3,r2,508d16c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 508d158:	e0bffe17 	ldw	r2,-8(fp)
 508d15c:	00bfd016 	blt	zero,r2,508d0a0 <altera_avalon_jtag_uart_write+0x10c>
 508d160:	00000306 	br	508d170 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 508d164:	0001883a 	nop
 508d168:	00000106 	br	508d170 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 508d16c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 508d170:	e0fffd17 	ldw	r3,-12(fp)
 508d174:	e0bff717 	ldw	r2,-36(fp)
 508d178:	18800426 	beq	r3,r2,508d18c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 508d17c:	e0fffd17 	ldw	r3,-12(fp)
 508d180:	e0bff717 	ldw	r2,-36(fp)
 508d184:	1885c83a 	sub	r2,r3,r2
 508d188:	00000606 	br	508d1a4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 508d18c:	e0bfff17 	ldw	r2,-4(fp)
 508d190:	1090000c 	andi	r2,r2,16384
 508d194:	10000226 	beq	r2,zero,508d1a0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 508d198:	00bffd44 	movi	r2,-11
 508d19c:	00000106 	br	508d1a4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 508d1a0:	00bffec4 	movi	r2,-5
}
 508d1a4:	e037883a 	mov	sp,fp
 508d1a8:	dfc00117 	ldw	ra,4(sp)
 508d1ac:	df000017 	ldw	fp,0(sp)
 508d1b0:	dec00204 	addi	sp,sp,8
 508d1b4:	f800283a 	ret

0508d1b8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 508d1b8:	defffa04 	addi	sp,sp,-24
 508d1bc:	dfc00515 	stw	ra,20(sp)
 508d1c0:	df000415 	stw	fp,16(sp)
 508d1c4:	df000404 	addi	fp,sp,16
 508d1c8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 508d1cc:	0007883a 	mov	r3,zero
 508d1d0:	e0bfff17 	ldw	r2,-4(fp)
 508d1d4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 508d1d8:	e0bfff17 	ldw	r2,-4(fp)
 508d1dc:	10800104 	addi	r2,r2,4
 508d1e0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508d1e4:	0005303a 	rdctl	r2,status
 508d1e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508d1ec:	e0fffd17 	ldw	r3,-12(fp)
 508d1f0:	00bfff84 	movi	r2,-2
 508d1f4:	1884703a 	and	r2,r3,r2
 508d1f8:	1001703a 	wrctl	status,r2
  
  return context;
 508d1fc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 508d200:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 508d204:	508de6c0 	call	508de6c <alt_tick>
 508d208:	e0bffc17 	ldw	r2,-16(fp)
 508d20c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 508d210:	e0bffe17 	ldw	r2,-8(fp)
 508d214:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 508d218:	e037883a 	mov	sp,fp
 508d21c:	dfc00117 	ldw	ra,4(sp)
 508d220:	df000017 	ldw	fp,0(sp)
 508d224:	dec00204 	addi	sp,sp,8
 508d228:	f800283a 	ret

0508d22c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 508d22c:	defff804 	addi	sp,sp,-32
 508d230:	dfc00715 	stw	ra,28(sp)
 508d234:	df000615 	stw	fp,24(sp)
 508d238:	df000604 	addi	fp,sp,24
 508d23c:	e13ffc15 	stw	r4,-16(fp)
 508d240:	e17ffd15 	stw	r5,-12(fp)
 508d244:	e1bffe15 	stw	r6,-8(fp)
 508d248:	e1ffff15 	stw	r7,-4(fp)
 508d24c:	e0bfff17 	ldw	r2,-4(fp)
 508d250:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 508d254:	00814274 	movhi	r2,1289
 508d258:	108a4204 	addi	r2,r2,10504
 508d25c:	10800017 	ldw	r2,0(r2)
 508d260:	1000041e 	bne	r2,zero,508d274 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 508d264:	00814274 	movhi	r2,1289
 508d268:	108a4204 	addi	r2,r2,10504
 508d26c:	e0fffb17 	ldw	r3,-20(fp)
 508d270:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 508d274:	e0bffc17 	ldw	r2,-16(fp)
 508d278:	10800104 	addi	r2,r2,4
 508d27c:	00c001c4 	movi	r3,7
 508d280:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 508d284:	d8000015 	stw	zero,0(sp)
 508d288:	e13ffd17 	ldw	r4,-12(fp)
 508d28c:	e17ffe17 	ldw	r5,-8(fp)
 508d290:	01814274 	movhi	r6,1289
 508d294:	31b46e04 	addi	r6,r6,-11848
 508d298:	e1fffc17 	ldw	r7,-16(fp)
 508d29c:	508d7640 	call	508d764 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 508d2a0:	e037883a 	mov	sp,fp
 508d2a4:	dfc00117 	ldw	ra,4(sp)
 508d2a8:	df000017 	ldw	fp,0(sp)
 508d2ac:	dec00204 	addi	sp,sp,8
 508d2b0:	f800283a 	ret

0508d2b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 508d2b4:	defff504 	addi	sp,sp,-44
 508d2b8:	df000a15 	stw	fp,40(sp)
 508d2bc:	df000a04 	addi	fp,sp,40
 508d2c0:	e13ffc15 	stw	r4,-16(fp)
 508d2c4:	e17ffd15 	stw	r5,-12(fp)
 508d2c8:	e1bffe15 	stw	r6,-8(fp)
 508d2cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 508d2d0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 508d2d4:	00814274 	movhi	r2,1289
 508d2d8:	108a4204 	addi	r2,r2,10504
 508d2dc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 508d2e0:	10003f26 	beq	r2,zero,508d3e0 <alt_alarm_start+0x12c>
  {
    if (alarm)
 508d2e4:	e0bffc17 	ldw	r2,-16(fp)
 508d2e8:	10003b26 	beq	r2,zero,508d3d8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 508d2ec:	e0bffc17 	ldw	r2,-16(fp)
 508d2f0:	e0fffe17 	ldw	r3,-8(fp)
 508d2f4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 508d2f8:	e0bffc17 	ldw	r2,-16(fp)
 508d2fc:	e0ffff17 	ldw	r3,-4(fp)
 508d300:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508d304:	0005303a 	rdctl	r2,status
 508d308:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508d30c:	e0fff817 	ldw	r3,-32(fp)
 508d310:	00bfff84 	movi	r2,-2
 508d314:	1884703a 	and	r2,r3,r2
 508d318:	1001703a 	wrctl	status,r2
  
  return context;
 508d31c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 508d320:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 508d324:	00814274 	movhi	r2,1289
 508d328:	108a4304 	addi	r2,r2,10508
 508d32c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 508d330:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 508d334:	e0fffd17 	ldw	r3,-12(fp)
 508d338:	e0bff617 	ldw	r2,-40(fp)
 508d33c:	1885883a 	add	r2,r3,r2
 508d340:	10c00044 	addi	r3,r2,1
 508d344:	e0bffc17 	ldw	r2,-16(fp)
 508d348:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 508d34c:	e0bffc17 	ldw	r2,-16(fp)
 508d350:	10c00217 	ldw	r3,8(r2)
 508d354:	e0bff617 	ldw	r2,-40(fp)
 508d358:	1880042e 	bgeu	r3,r2,508d36c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 508d35c:	e0bffc17 	ldw	r2,-16(fp)
 508d360:	00c00044 	movi	r3,1
 508d364:	10c00405 	stb	r3,16(r2)
 508d368:	00000206 	br	508d374 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 508d36c:	e0bffc17 	ldw	r2,-16(fp)
 508d370:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 508d374:	e0bffc17 	ldw	r2,-16(fp)
 508d378:	00c14274 	movhi	r3,1289
 508d37c:	18c39804 	addi	r3,r3,3680
 508d380:	e0fff915 	stw	r3,-28(fp)
 508d384:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 508d388:	e0bffa17 	ldw	r2,-24(fp)
 508d38c:	e0fff917 	ldw	r3,-28(fp)
 508d390:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 508d394:	e0bff917 	ldw	r2,-28(fp)
 508d398:	10c00017 	ldw	r3,0(r2)
 508d39c:	e0bffa17 	ldw	r2,-24(fp)
 508d3a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 508d3a4:	e0bff917 	ldw	r2,-28(fp)
 508d3a8:	10800017 	ldw	r2,0(r2)
 508d3ac:	e0fffa17 	ldw	r3,-24(fp)
 508d3b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 508d3b4:	e0bff917 	ldw	r2,-28(fp)
 508d3b8:	e0fffa17 	ldw	r3,-24(fp)
 508d3bc:	10c00015 	stw	r3,0(r2)
 508d3c0:	e0bff717 	ldw	r2,-36(fp)
 508d3c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 508d3c8:	e0bffb17 	ldw	r2,-20(fp)
 508d3cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 508d3d0:	0005883a 	mov	r2,zero
 508d3d4:	00000306 	br	508d3e4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 508d3d8:	00bffa84 	movi	r2,-22
 508d3dc:	00000106 	br	508d3e4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 508d3e0:	00bfde84 	movi	r2,-134
  }
}
 508d3e4:	e037883a 	mov	sp,fp
 508d3e8:	df000017 	ldw	fp,0(sp)
 508d3ec:	dec00104 	addi	sp,sp,4
 508d3f0:	f800283a 	ret

0508d3f4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 508d3f4:	defffa04 	addi	sp,sp,-24
 508d3f8:	dfc00515 	stw	ra,20(sp)
 508d3fc:	df000415 	stw	fp,16(sp)
 508d400:	df000404 	addi	fp,sp,16
 508d404:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 508d408:	008000c4 	movi	r2,3
 508d40c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 508d410:	e0fffd17 	ldw	r3,-12(fp)
 508d414:	008003f4 	movhi	r2,15
 508d418:	10909004 	addi	r2,r2,16960
 508d41c:	1885383a 	mul	r2,r3,r2
 508d420:	01017db4 	movhi	r4,1526
 508d424:	21384004 	addi	r4,r4,-7936
 508d428:	100b883a 	mov	r5,r2
 508d42c:	50827c80 	call	50827c8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 508d430:	01200034 	movhi	r4,32768
 508d434:	213fffc4 	addi	r4,r4,-1
 508d438:	100b883a 	mov	r5,r2
 508d43c:	50827c80 	call	50827c8 <__udivsi3>
 508d440:	e13fff17 	ldw	r4,-4(fp)
 508d444:	100b883a 	mov	r5,r2
 508d448:	50827c80 	call	50827c8 <__udivsi3>
 508d44c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 508d450:	e0bffe17 	ldw	r2,-8(fp)
 508d454:	10002926 	beq	r2,zero,508d4fc <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 508d458:	e03ffc15 	stw	zero,-16(fp)
 508d45c:	00001606 	br	508d4b8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 508d460:	00a00034 	movhi	r2,32768
 508d464:	10bfffc4 	addi	r2,r2,-1
 508d468:	10bfffc4 	addi	r2,r2,-1
 508d46c:	103ffe1e 	bne	r2,zero,508d468 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 508d470:	e0fffd17 	ldw	r3,-12(fp)
 508d474:	008003f4 	movhi	r2,15
 508d478:	10909004 	addi	r2,r2,16960
 508d47c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 508d480:	01017db4 	movhi	r4,1526
 508d484:	21384004 	addi	r4,r4,-7936
 508d488:	100b883a 	mov	r5,r2
 508d48c:	50827c80 	call	50827c8 <__udivsi3>
 508d490:	01200034 	movhi	r4,32768
 508d494:	213fffc4 	addi	r4,r4,-1
 508d498:	100b883a 	mov	r5,r2
 508d49c:	50827c80 	call	50827c8 <__udivsi3>
 508d4a0:	e0ffff17 	ldw	r3,-4(fp)
 508d4a4:	1885c83a 	sub	r2,r3,r2
 508d4a8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 508d4ac:	e0bffc17 	ldw	r2,-16(fp)
 508d4b0:	10800044 	addi	r2,r2,1
 508d4b4:	e0bffc15 	stw	r2,-16(fp)
 508d4b8:	e0fffc17 	ldw	r3,-16(fp)
 508d4bc:	e0bffe17 	ldw	r2,-8(fp)
 508d4c0:	18bfe716 	blt	r3,r2,508d460 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 508d4c4:	e0fffd17 	ldw	r3,-12(fp)
 508d4c8:	008003f4 	movhi	r2,15
 508d4cc:	10909004 	addi	r2,r2,16960
 508d4d0:	1885383a 	mul	r2,r3,r2
 508d4d4:	01017db4 	movhi	r4,1526
 508d4d8:	21384004 	addi	r4,r4,-7936
 508d4dc:	100b883a 	mov	r5,r2
 508d4e0:	50827c80 	call	50827c8 <__udivsi3>
 508d4e4:	1007883a 	mov	r3,r2
 508d4e8:	e0bfff17 	ldw	r2,-4(fp)
 508d4ec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 508d4f0:	10bfffc4 	addi	r2,r2,-1
 508d4f4:	103ffe1e 	bne	r2,zero,508d4f0 <alt_busy_sleep+0xfc>
 508d4f8:	00000d06 	br	508d530 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 508d4fc:	e0fffd17 	ldw	r3,-12(fp)
 508d500:	008003f4 	movhi	r2,15
 508d504:	10909004 	addi	r2,r2,16960
 508d508:	1885383a 	mul	r2,r3,r2
 508d50c:	01017db4 	movhi	r4,1526
 508d510:	21384004 	addi	r4,r4,-7936
 508d514:	100b883a 	mov	r5,r2
 508d518:	50827c80 	call	50827c8 <__udivsi3>
 508d51c:	1007883a 	mov	r3,r2
 508d520:	e0bfff17 	ldw	r2,-4(fp)
 508d524:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 508d528:	10bfffc4 	addi	r2,r2,-1
 508d52c:	00bffe16 	blt	zero,r2,508d528 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 508d530:	0005883a 	mov	r2,zero
}
 508d534:	e037883a 	mov	sp,fp
 508d538:	dfc00117 	ldw	ra,4(sp)
 508d53c:	df000017 	ldw	fp,0(sp)
 508d540:	dec00204 	addi	sp,sp,8
 508d544:	f800283a 	ret

0508d548 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 508d548:	defffe04 	addi	sp,sp,-8
 508d54c:	df000115 	stw	fp,4(sp)
 508d550:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 508d554:	e03fff15 	stw	zero,-4(fp)
 508d558:	00000506 	br	508d570 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 508d55c:	e0bfff17 	ldw	r2,-4(fp)
 508d560:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 508d564:	e0bfff17 	ldw	r2,-4(fp)
 508d568:	10800804 	addi	r2,r2,32
 508d56c:	e0bfff15 	stw	r2,-4(fp)
 508d570:	e0bfff17 	ldw	r2,-4(fp)
 508d574:	10820030 	cmpltui	r2,r2,2048
 508d578:	103ff81e 	bne	r2,zero,508d55c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 508d57c:	e037883a 	mov	sp,fp
 508d580:	df000017 	ldw	fp,0(sp)
 508d584:	dec00104 	addi	sp,sp,4
 508d588:	f800283a 	ret

0508d58c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 508d58c:	defffe04 	addi	sp,sp,-8
 508d590:	dfc00115 	stw	ra,4(sp)
 508d594:	df000015 	stw	fp,0(sp)
 508d598:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 508d59c:	00814274 	movhi	r2,1289
 508d5a0:	10839504 	addi	r2,r2,3668
 508d5a4:	10800017 	ldw	r2,0(r2)
 508d5a8:	10000526 	beq	r2,zero,508d5c0 <alt_get_errno+0x34>
 508d5ac:	00814274 	movhi	r2,1289
 508d5b0:	10839504 	addi	r2,r2,3668
 508d5b4:	10800017 	ldw	r2,0(r2)
 508d5b8:	103ee83a 	callr	r2
 508d5bc:	00000206 	br	508d5c8 <alt_get_errno+0x3c>
 508d5c0:	00814274 	movhi	r2,1289
 508d5c4:	108a3d04 	addi	r2,r2,10484
}
 508d5c8:	e037883a 	mov	sp,fp
 508d5cc:	dfc00117 	ldw	ra,4(sp)
 508d5d0:	df000017 	ldw	fp,0(sp)
 508d5d4:	dec00204 	addi	sp,sp,8
 508d5d8:	f800283a 	ret

0508d5dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 508d5dc:	defffa04 	addi	sp,sp,-24
 508d5e0:	dfc00515 	stw	ra,20(sp)
 508d5e4:	df000415 	stw	fp,16(sp)
 508d5e8:	df000404 	addi	fp,sp,16
 508d5ec:	e13ffe15 	stw	r4,-8(fp)
 508d5f0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 508d5f4:	e0bffe17 	ldw	r2,-8(fp)
 508d5f8:	10000326 	beq	r2,zero,508d608 <alt_dev_llist_insert+0x2c>
 508d5fc:	e0bffe17 	ldw	r2,-8(fp)
 508d600:	10800217 	ldw	r2,8(r2)
 508d604:	1000051e 	bne	r2,zero,508d61c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 508d608:	508d58c0 	call	508d58c <alt_get_errno>
 508d60c:	00c00584 	movi	r3,22
 508d610:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 508d614:	00bffa84 	movi	r2,-22
 508d618:	00001306 	br	508d668 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 508d61c:	e0bffe17 	ldw	r2,-8(fp)
 508d620:	e0ffff17 	ldw	r3,-4(fp)
 508d624:	e0fffc15 	stw	r3,-16(fp)
 508d628:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 508d62c:	e0bffd17 	ldw	r2,-12(fp)
 508d630:	e0fffc17 	ldw	r3,-16(fp)
 508d634:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 508d638:	e0bffc17 	ldw	r2,-16(fp)
 508d63c:	10c00017 	ldw	r3,0(r2)
 508d640:	e0bffd17 	ldw	r2,-12(fp)
 508d644:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 508d648:	e0bffc17 	ldw	r2,-16(fp)
 508d64c:	10800017 	ldw	r2,0(r2)
 508d650:	e0fffd17 	ldw	r3,-12(fp)
 508d654:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 508d658:	e0bffc17 	ldw	r2,-16(fp)
 508d65c:	e0fffd17 	ldw	r3,-12(fp)
 508d660:	10c00015 	stw	r3,0(r2)

  return 0;  
 508d664:	0005883a 	mov	r2,zero
}
 508d668:	e037883a 	mov	sp,fp
 508d66c:	dfc00117 	ldw	ra,4(sp)
 508d670:	df000017 	ldw	fp,0(sp)
 508d674:	dec00204 	addi	sp,sp,8
 508d678:	f800283a 	ret

0508d67c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 508d67c:	defffd04 	addi	sp,sp,-12
 508d680:	dfc00215 	stw	ra,8(sp)
 508d684:	df000115 	stw	fp,4(sp)
 508d688:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 508d68c:	00814274 	movhi	r2,1289
 508d690:	10b99104 	addi	r2,r2,-6588
 508d694:	e0bfff15 	stw	r2,-4(fp)
 508d698:	00000606 	br	508d6b4 <_do_ctors+0x38>
        (*ctor) (); 
 508d69c:	e0bfff17 	ldw	r2,-4(fp)
 508d6a0:	10800017 	ldw	r2,0(r2)
 508d6a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 508d6a8:	e0bfff17 	ldw	r2,-4(fp)
 508d6ac:	10bfff04 	addi	r2,r2,-4
 508d6b0:	e0bfff15 	stw	r2,-4(fp)
 508d6b4:	e0ffff17 	ldw	r3,-4(fp)
 508d6b8:	00814274 	movhi	r2,1289
 508d6bc:	10b99204 	addi	r2,r2,-6584
 508d6c0:	18bff62e 	bgeu	r3,r2,508d69c <_do_ctors+0x20>
        (*ctor) (); 
}
 508d6c4:	e037883a 	mov	sp,fp
 508d6c8:	dfc00117 	ldw	ra,4(sp)
 508d6cc:	df000017 	ldw	fp,0(sp)
 508d6d0:	dec00204 	addi	sp,sp,8
 508d6d4:	f800283a 	ret

0508d6d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 508d6d8:	defffd04 	addi	sp,sp,-12
 508d6dc:	dfc00215 	stw	ra,8(sp)
 508d6e0:	df000115 	stw	fp,4(sp)
 508d6e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 508d6e8:	00814274 	movhi	r2,1289
 508d6ec:	10b99104 	addi	r2,r2,-6588
 508d6f0:	e0bfff15 	stw	r2,-4(fp)
 508d6f4:	00000606 	br	508d710 <_do_dtors+0x38>
        (*dtor) (); 
 508d6f8:	e0bfff17 	ldw	r2,-4(fp)
 508d6fc:	10800017 	ldw	r2,0(r2)
 508d700:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 508d704:	e0bfff17 	ldw	r2,-4(fp)
 508d708:	10bfff04 	addi	r2,r2,-4
 508d70c:	e0bfff15 	stw	r2,-4(fp)
 508d710:	e0ffff17 	ldw	r3,-4(fp)
 508d714:	00814274 	movhi	r2,1289
 508d718:	10b99204 	addi	r2,r2,-6584
 508d71c:	18bff62e 	bgeu	r3,r2,508d6f8 <_do_dtors+0x20>
        (*dtor) (); 
}
 508d720:	e037883a 	mov	sp,fp
 508d724:	dfc00117 	ldw	ra,4(sp)
 508d728:	df000017 	ldw	fp,0(sp)
 508d72c:	dec00204 	addi	sp,sp,8
 508d730:	f800283a 	ret

0508d734 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 508d734:	defffe04 	addi	sp,sp,-8
 508d738:	dfc00115 	stw	ra,4(sp)
 508d73c:	df000015 	stw	fp,0(sp)
 508d740:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 508d744:	0009883a 	mov	r4,zero
 508d748:	01440004 	movi	r5,4096
 508d74c:	508e1e80 	call	508e1e8 <alt_icache_flush>
#endif
}
 508d750:	e037883a 	mov	sp,fp
 508d754:	dfc00117 	ldw	ra,4(sp)
 508d758:	df000017 	ldw	fp,0(sp)
 508d75c:	dec00204 	addi	sp,sp,8
 508d760:	f800283a 	ret

0508d764 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 508d764:	defff904 	addi	sp,sp,-28
 508d768:	dfc00615 	stw	ra,24(sp)
 508d76c:	df000515 	stw	fp,20(sp)
 508d770:	df000504 	addi	fp,sp,20
 508d774:	e13ffc15 	stw	r4,-16(fp)
 508d778:	e17ffd15 	stw	r5,-12(fp)
 508d77c:	e1bffe15 	stw	r6,-8(fp)
 508d780:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 508d784:	e0800217 	ldw	r2,8(fp)
 508d788:	d8800015 	stw	r2,0(sp)
 508d78c:	e13ffc17 	ldw	r4,-16(fp)
 508d790:	e17ffd17 	ldw	r5,-12(fp)
 508d794:	e1bffe17 	ldw	r6,-8(fp)
 508d798:	e1ffff17 	ldw	r7,-4(fp)
 508d79c:	508d93c0 	call	508d93c <alt_iic_isr_register>
}  
 508d7a0:	e037883a 	mov	sp,fp
 508d7a4:	dfc00117 	ldw	ra,4(sp)
 508d7a8:	df000017 	ldw	fp,0(sp)
 508d7ac:	dec00204 	addi	sp,sp,8
 508d7b0:	f800283a 	ret

0508d7b4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 508d7b4:	defff904 	addi	sp,sp,-28
 508d7b8:	df000615 	stw	fp,24(sp)
 508d7bc:	df000604 	addi	fp,sp,24
 508d7c0:	e13ffe15 	stw	r4,-8(fp)
 508d7c4:	e17fff15 	stw	r5,-4(fp)
 508d7c8:	e0bfff17 	ldw	r2,-4(fp)
 508d7cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508d7d0:	0005303a 	rdctl	r2,status
 508d7d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508d7d8:	e0fffb17 	ldw	r3,-20(fp)
 508d7dc:	00bfff84 	movi	r2,-2
 508d7e0:	1884703a 	and	r2,r3,r2
 508d7e4:	1001703a 	wrctl	status,r2
  
  return context;
 508d7e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 508d7ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 508d7f0:	e0bffa17 	ldw	r2,-24(fp)
 508d7f4:	00c00044 	movi	r3,1
 508d7f8:	1884983a 	sll	r2,r3,r2
 508d7fc:	1007883a 	mov	r3,r2
 508d800:	00814274 	movhi	r2,1289
 508d804:	108a3e04 	addi	r2,r2,10488
 508d808:	10800017 	ldw	r2,0(r2)
 508d80c:	1886b03a 	or	r3,r3,r2
 508d810:	00814274 	movhi	r2,1289
 508d814:	108a3e04 	addi	r2,r2,10488
 508d818:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 508d81c:	00814274 	movhi	r2,1289
 508d820:	108a3e04 	addi	r2,r2,10488
 508d824:	10800017 	ldw	r2,0(r2)
 508d828:	100170fa 	wrctl	ienable,r2
 508d82c:	e0bffc17 	ldw	r2,-16(fp)
 508d830:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 508d834:	e0bffd17 	ldw	r2,-12(fp)
 508d838:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 508d83c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 508d840:	e037883a 	mov	sp,fp
 508d844:	df000017 	ldw	fp,0(sp)
 508d848:	dec00104 	addi	sp,sp,4
 508d84c:	f800283a 	ret

0508d850 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 508d850:	defff904 	addi	sp,sp,-28
 508d854:	df000615 	stw	fp,24(sp)
 508d858:	df000604 	addi	fp,sp,24
 508d85c:	e13ffe15 	stw	r4,-8(fp)
 508d860:	e17fff15 	stw	r5,-4(fp)
 508d864:	e0bfff17 	ldw	r2,-4(fp)
 508d868:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508d86c:	0005303a 	rdctl	r2,status
 508d870:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508d874:	e0fffb17 	ldw	r3,-20(fp)
 508d878:	00bfff84 	movi	r2,-2
 508d87c:	1884703a 	and	r2,r3,r2
 508d880:	1001703a 	wrctl	status,r2
  
  return context;
 508d884:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 508d888:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 508d88c:	e0bffa17 	ldw	r2,-24(fp)
 508d890:	00c00044 	movi	r3,1
 508d894:	1884983a 	sll	r2,r3,r2
 508d898:	0084303a 	nor	r2,zero,r2
 508d89c:	1007883a 	mov	r3,r2
 508d8a0:	00814274 	movhi	r2,1289
 508d8a4:	108a3e04 	addi	r2,r2,10488
 508d8a8:	10800017 	ldw	r2,0(r2)
 508d8ac:	1886703a 	and	r3,r3,r2
 508d8b0:	00814274 	movhi	r2,1289
 508d8b4:	108a3e04 	addi	r2,r2,10488
 508d8b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 508d8bc:	00814274 	movhi	r2,1289
 508d8c0:	108a3e04 	addi	r2,r2,10488
 508d8c4:	10800017 	ldw	r2,0(r2)
 508d8c8:	100170fa 	wrctl	ienable,r2
 508d8cc:	e0bffc17 	ldw	r2,-16(fp)
 508d8d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 508d8d4:	e0bffd17 	ldw	r2,-12(fp)
 508d8d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 508d8dc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 508d8e0:	e037883a 	mov	sp,fp
 508d8e4:	df000017 	ldw	fp,0(sp)
 508d8e8:	dec00104 	addi	sp,sp,4
 508d8ec:	f800283a 	ret

0508d8f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 508d8f0:	defffc04 	addi	sp,sp,-16
 508d8f4:	df000315 	stw	fp,12(sp)
 508d8f8:	df000304 	addi	fp,sp,12
 508d8fc:	e13ffe15 	stw	r4,-8(fp)
 508d900:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 508d904:	000530fa 	rdctl	r2,ienable
 508d908:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 508d90c:	e0bfff17 	ldw	r2,-4(fp)
 508d910:	00c00044 	movi	r3,1
 508d914:	1884983a 	sll	r2,r3,r2
 508d918:	1007883a 	mov	r3,r2
 508d91c:	e0bffd17 	ldw	r2,-12(fp)
 508d920:	1884703a 	and	r2,r3,r2
 508d924:	1004c03a 	cmpne	r2,r2,zero
 508d928:	10803fcc 	andi	r2,r2,255
}
 508d92c:	e037883a 	mov	sp,fp
 508d930:	df000017 	ldw	fp,0(sp)
 508d934:	dec00104 	addi	sp,sp,4
 508d938:	f800283a 	ret

0508d93c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 508d93c:	defff504 	addi	sp,sp,-44
 508d940:	dfc00a15 	stw	ra,40(sp)
 508d944:	df000915 	stw	fp,36(sp)
 508d948:	df000904 	addi	fp,sp,36
 508d94c:	e13ffc15 	stw	r4,-16(fp)
 508d950:	e17ffd15 	stw	r5,-12(fp)
 508d954:	e1bffe15 	stw	r6,-8(fp)
 508d958:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 508d95c:	00bffa84 	movi	r2,-22
 508d960:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 508d964:	e0bffd17 	ldw	r2,-12(fp)
 508d968:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 508d96c:	e0bff817 	ldw	r2,-32(fp)
 508d970:	10800808 	cmpgei	r2,r2,32
 508d974:	1000271e 	bne	r2,zero,508da14 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508d978:	0005303a 	rdctl	r2,status
 508d97c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508d980:	e0fffa17 	ldw	r3,-24(fp)
 508d984:	00bfff84 	movi	r2,-2
 508d988:	1884703a 	and	r2,r3,r2
 508d98c:	1001703a 	wrctl	status,r2
  
  return context;
 508d990:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 508d994:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 508d998:	00c14274 	movhi	r3,1289
 508d99c:	18ca5804 	addi	r3,r3,10592
 508d9a0:	e0bff817 	ldw	r2,-32(fp)
 508d9a4:	100490fa 	slli	r2,r2,3
 508d9a8:	1885883a 	add	r2,r3,r2
 508d9ac:	e0fffe17 	ldw	r3,-8(fp)
 508d9b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 508d9b4:	00c14274 	movhi	r3,1289
 508d9b8:	18ca5804 	addi	r3,r3,10592
 508d9bc:	e0bff817 	ldw	r2,-32(fp)
 508d9c0:	100490fa 	slli	r2,r2,3
 508d9c4:	1885883a 	add	r2,r3,r2
 508d9c8:	10800104 	addi	r2,r2,4
 508d9cc:	e0ffff17 	ldw	r3,-4(fp)
 508d9d0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 508d9d4:	e0bffe17 	ldw	r2,-8(fp)
 508d9d8:	10000526 	beq	r2,zero,508d9f0 <alt_iic_isr_register+0xb4>
 508d9dc:	e0bff817 	ldw	r2,-32(fp)
 508d9e0:	e13ffc17 	ldw	r4,-16(fp)
 508d9e4:	100b883a 	mov	r5,r2
 508d9e8:	508d7b40 	call	508d7b4 <alt_ic_irq_enable>
 508d9ec:	00000406 	br	508da00 <alt_iic_isr_register+0xc4>
 508d9f0:	e0bff817 	ldw	r2,-32(fp)
 508d9f4:	e13ffc17 	ldw	r4,-16(fp)
 508d9f8:	100b883a 	mov	r5,r2
 508d9fc:	508d8500 	call	508d850 <alt_ic_irq_disable>
 508da00:	e0bff715 	stw	r2,-36(fp)
 508da04:	e0bff917 	ldw	r2,-28(fp)
 508da08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 508da0c:	e0bffb17 	ldw	r2,-20(fp)
 508da10:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 508da14:	e0bff717 	ldw	r2,-36(fp)
}
 508da18:	e037883a 	mov	sp,fp
 508da1c:	dfc00117 	ldw	ra,4(sp)
 508da20:	df000017 	ldw	fp,0(sp)
 508da24:	dec00204 	addi	sp,sp,8
 508da28:	f800283a 	ret

0508da2c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 508da2c:	defff904 	addi	sp,sp,-28
 508da30:	dfc00615 	stw	ra,24(sp)
 508da34:	df000515 	stw	fp,20(sp)
 508da38:	df000504 	addi	fp,sp,20
 508da3c:	e13ffc15 	stw	r4,-16(fp)
 508da40:	e17ffd15 	stw	r5,-12(fp)
 508da44:	e1bffe15 	stw	r6,-8(fp)
 508da48:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 508da4c:	e13ffd17 	ldw	r4,-12(fp)
 508da50:	e17ffe17 	ldw	r5,-8(fp)
 508da54:	e1bfff17 	ldw	r6,-4(fp)
 508da58:	508dc800 	call	508dc80 <open>
 508da5c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 508da60:	e0bffb17 	ldw	r2,-20(fp)
 508da64:	10001c16 	blt	r2,zero,508dad8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 508da68:	00c14274 	movhi	r3,1289
 508da6c:	18ff1304 	addi	r3,r3,-948
 508da70:	e0bffb17 	ldw	r2,-20(fp)
 508da74:	10800324 	muli	r2,r2,12
 508da78:	1885883a 	add	r2,r3,r2
 508da7c:	10c00017 	ldw	r3,0(r2)
 508da80:	e0bffc17 	ldw	r2,-16(fp)
 508da84:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 508da88:	00c14274 	movhi	r3,1289
 508da8c:	18ff1304 	addi	r3,r3,-948
 508da90:	e0bffb17 	ldw	r2,-20(fp)
 508da94:	10800324 	muli	r2,r2,12
 508da98:	1885883a 	add	r2,r3,r2
 508da9c:	10800104 	addi	r2,r2,4
 508daa0:	10c00017 	ldw	r3,0(r2)
 508daa4:	e0bffc17 	ldw	r2,-16(fp)
 508daa8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 508daac:	00c14274 	movhi	r3,1289
 508dab0:	18ff1304 	addi	r3,r3,-948
 508dab4:	e0bffb17 	ldw	r2,-20(fp)
 508dab8:	10800324 	muli	r2,r2,12
 508dabc:	1885883a 	add	r2,r3,r2
 508dac0:	10800204 	addi	r2,r2,8
 508dac4:	10c00017 	ldw	r3,0(r2)
 508dac8:	e0bffc17 	ldw	r2,-16(fp)
 508dacc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 508dad0:	e13ffb17 	ldw	r4,-20(fp)
 508dad4:	508c40c0 	call	508c40c <alt_release_fd>
  }
} 
 508dad8:	e037883a 	mov	sp,fp
 508dadc:	dfc00117 	ldw	ra,4(sp)
 508dae0:	df000017 	ldw	fp,0(sp)
 508dae4:	dec00204 	addi	sp,sp,8
 508dae8:	f800283a 	ret

0508daec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 508daec:	defffb04 	addi	sp,sp,-20
 508daf0:	dfc00415 	stw	ra,16(sp)
 508daf4:	df000315 	stw	fp,12(sp)
 508daf8:	df000304 	addi	fp,sp,12
 508dafc:	e13ffd15 	stw	r4,-12(fp)
 508db00:	e17ffe15 	stw	r5,-8(fp)
 508db04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 508db08:	01014274 	movhi	r4,1289
 508db0c:	213f1604 	addi	r4,r4,-936
 508db10:	e17ffd17 	ldw	r5,-12(fp)
 508db14:	01800044 	movi	r6,1
 508db18:	01c07fc4 	movi	r7,511
 508db1c:	508da2c0 	call	508da2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 508db20:	01014274 	movhi	r4,1289
 508db24:	213f1304 	addi	r4,r4,-948
 508db28:	e17ffe17 	ldw	r5,-8(fp)
 508db2c:	000d883a 	mov	r6,zero
 508db30:	01c07fc4 	movi	r7,511
 508db34:	508da2c0 	call	508da2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 508db38:	01014274 	movhi	r4,1289
 508db3c:	213f1904 	addi	r4,r4,-924
 508db40:	e17fff17 	ldw	r5,-4(fp)
 508db44:	01800044 	movi	r6,1
 508db48:	01c07fc4 	movi	r7,511
 508db4c:	508da2c0 	call	508da2c <alt_open_fd>
}  
 508db50:	e037883a 	mov	sp,fp
 508db54:	dfc00117 	ldw	ra,4(sp)
 508db58:	df000017 	ldw	fp,0(sp)
 508db5c:	dec00204 	addi	sp,sp,8
 508db60:	f800283a 	ret

0508db64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 508db64:	defffe04 	addi	sp,sp,-8
 508db68:	dfc00115 	stw	ra,4(sp)
 508db6c:	df000015 	stw	fp,0(sp)
 508db70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 508db74:	00814274 	movhi	r2,1289
 508db78:	10839504 	addi	r2,r2,3668
 508db7c:	10800017 	ldw	r2,0(r2)
 508db80:	10000526 	beq	r2,zero,508db98 <alt_get_errno+0x34>
 508db84:	00814274 	movhi	r2,1289
 508db88:	10839504 	addi	r2,r2,3668
 508db8c:	10800017 	ldw	r2,0(r2)
 508db90:	103ee83a 	callr	r2
 508db94:	00000206 	br	508dba0 <alt_get_errno+0x3c>
 508db98:	00814274 	movhi	r2,1289
 508db9c:	108a3d04 	addi	r2,r2,10484
}
 508dba0:	e037883a 	mov	sp,fp
 508dba4:	dfc00117 	ldw	ra,4(sp)
 508dba8:	df000017 	ldw	fp,0(sp)
 508dbac:	dec00204 	addi	sp,sp,8
 508dbb0:	f800283a 	ret

0508dbb4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 508dbb4:	defffd04 	addi	sp,sp,-12
 508dbb8:	df000215 	stw	fp,8(sp)
 508dbbc:	df000204 	addi	fp,sp,8
 508dbc0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 508dbc4:	e0bfff17 	ldw	r2,-4(fp)
 508dbc8:	10800217 	ldw	r2,8(r2)
 508dbcc:	10d00034 	orhi	r3,r2,16384
 508dbd0:	e0bfff17 	ldw	r2,-4(fp)
 508dbd4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 508dbd8:	e03ffe15 	stw	zero,-8(fp)
 508dbdc:	00001d06 	br	508dc54 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 508dbe0:	00c14274 	movhi	r3,1289
 508dbe4:	18ff1304 	addi	r3,r3,-948
 508dbe8:	e0bffe17 	ldw	r2,-8(fp)
 508dbec:	10800324 	muli	r2,r2,12
 508dbf0:	1885883a 	add	r2,r3,r2
 508dbf4:	10c00017 	ldw	r3,0(r2)
 508dbf8:	e0bfff17 	ldw	r2,-4(fp)
 508dbfc:	10800017 	ldw	r2,0(r2)
 508dc00:	1880111e 	bne	r3,r2,508dc48 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 508dc04:	00c14274 	movhi	r3,1289
 508dc08:	18ff1304 	addi	r3,r3,-948
 508dc0c:	e0bffe17 	ldw	r2,-8(fp)
 508dc10:	10800324 	muli	r2,r2,12
 508dc14:	1885883a 	add	r2,r3,r2
 508dc18:	10800204 	addi	r2,r2,8
 508dc1c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 508dc20:	1000090e 	bge	r2,zero,508dc48 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 508dc24:	e0bffe17 	ldw	r2,-8(fp)
 508dc28:	10c00324 	muli	r3,r2,12
 508dc2c:	00814274 	movhi	r2,1289
 508dc30:	10bf1304 	addi	r2,r2,-948
 508dc34:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 508dc38:	e0bfff17 	ldw	r2,-4(fp)
 508dc3c:	18800226 	beq	r3,r2,508dc48 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 508dc40:	00bffcc4 	movi	r2,-13
 508dc44:	00000a06 	br	508dc70 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 508dc48:	e0bffe17 	ldw	r2,-8(fp)
 508dc4c:	10800044 	addi	r2,r2,1
 508dc50:	e0bffe15 	stw	r2,-8(fp)
 508dc54:	00814274 	movhi	r2,1289
 508dc58:	10839404 	addi	r2,r2,3664
 508dc5c:	10800017 	ldw	r2,0(r2)
 508dc60:	1007883a 	mov	r3,r2
 508dc64:	e0bffe17 	ldw	r2,-8(fp)
 508dc68:	18bfdd2e 	bgeu	r3,r2,508dbe0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 508dc6c:	0005883a 	mov	r2,zero
}
 508dc70:	e037883a 	mov	sp,fp
 508dc74:	df000017 	ldw	fp,0(sp)
 508dc78:	dec00104 	addi	sp,sp,4
 508dc7c:	f800283a 	ret

0508dc80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 508dc80:	defff604 	addi	sp,sp,-40
 508dc84:	dfc00915 	stw	ra,36(sp)
 508dc88:	df000815 	stw	fp,32(sp)
 508dc8c:	df000804 	addi	fp,sp,32
 508dc90:	e13ffd15 	stw	r4,-12(fp)
 508dc94:	e17ffe15 	stw	r5,-8(fp)
 508dc98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 508dc9c:	00bfffc4 	movi	r2,-1
 508dca0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 508dca4:	00bffb44 	movi	r2,-19
 508dca8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 508dcac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 508dcb0:	e13ffd17 	ldw	r4,-12(fp)
 508dcb4:	01414274 	movhi	r5,1289
 508dcb8:	29439204 	addi	r5,r5,3656
 508dcbc:	508df900 	call	508df90 <alt_find_dev>
 508dcc0:	e0bff815 	stw	r2,-32(fp)
 508dcc4:	e0bff817 	ldw	r2,-32(fp)
 508dcc8:	1000051e 	bne	r2,zero,508dce0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 508dccc:	e13ffd17 	ldw	r4,-12(fp)
 508dcd0:	508e0200 	call	508e020 <alt_find_file>
 508dcd4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 508dcd8:	00800044 	movi	r2,1
 508dcdc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 508dce0:	e0bff817 	ldw	r2,-32(fp)
 508dce4:	10002926 	beq	r2,zero,508dd8c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 508dce8:	e13ff817 	ldw	r4,-32(fp)
 508dcec:	508e1340 	call	508e134 <alt_get_fd>
 508dcf0:	e0bff915 	stw	r2,-28(fp)
 508dcf4:	e0bff917 	ldw	r2,-28(fp)
 508dcf8:	1000030e 	bge	r2,zero,508dd08 <open+0x88>
    {
      status = index;
 508dcfc:	e0bff917 	ldw	r2,-28(fp)
 508dd00:	e0bffa15 	stw	r2,-24(fp)
 508dd04:	00002306 	br	508dd94 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 508dd08:	e0bff917 	ldw	r2,-28(fp)
 508dd0c:	10c00324 	muli	r3,r2,12
 508dd10:	00814274 	movhi	r2,1289
 508dd14:	10bf1304 	addi	r2,r2,-948
 508dd18:	1885883a 	add	r2,r3,r2
 508dd1c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 508dd20:	e0fffe17 	ldw	r3,-8(fp)
 508dd24:	00900034 	movhi	r2,16384
 508dd28:	10bfffc4 	addi	r2,r2,-1
 508dd2c:	1886703a 	and	r3,r3,r2
 508dd30:	e0bffc17 	ldw	r2,-16(fp)
 508dd34:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 508dd38:	e0bffb17 	ldw	r2,-20(fp)
 508dd3c:	1000051e 	bne	r2,zero,508dd54 <open+0xd4>
 508dd40:	e13ffc17 	ldw	r4,-16(fp)
 508dd44:	508dbb40 	call	508dbb4 <alt_file_locked>
 508dd48:	e0bffa15 	stw	r2,-24(fp)
 508dd4c:	e0bffa17 	ldw	r2,-24(fp)
 508dd50:	10001016 	blt	r2,zero,508dd94 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 508dd54:	e0bff817 	ldw	r2,-32(fp)
 508dd58:	10800317 	ldw	r2,12(r2)
 508dd5c:	10000826 	beq	r2,zero,508dd80 <open+0x100>
 508dd60:	e0bff817 	ldw	r2,-32(fp)
 508dd64:	10800317 	ldw	r2,12(r2)
 508dd68:	e13ffc17 	ldw	r4,-16(fp)
 508dd6c:	e17ffd17 	ldw	r5,-12(fp)
 508dd70:	e1bffe17 	ldw	r6,-8(fp)
 508dd74:	e1ffff17 	ldw	r7,-4(fp)
 508dd78:	103ee83a 	callr	r2
 508dd7c:	00000106 	br	508dd84 <open+0x104>
 508dd80:	0005883a 	mov	r2,zero
 508dd84:	e0bffa15 	stw	r2,-24(fp)
 508dd88:	00000206 	br	508dd94 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 508dd8c:	00bffb44 	movi	r2,-19
 508dd90:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 508dd94:	e0bffa17 	ldw	r2,-24(fp)
 508dd98:	1000080e 	bge	r2,zero,508ddbc <open+0x13c>
  {
    alt_release_fd (index);  
 508dd9c:	e13ff917 	ldw	r4,-28(fp)
 508dda0:	508c40c0 	call	508c40c <alt_release_fd>
    ALT_ERRNO = -status;
 508dda4:	508db640 	call	508db64 <alt_get_errno>
 508dda8:	e0fffa17 	ldw	r3,-24(fp)
 508ddac:	00c7c83a 	sub	r3,zero,r3
 508ddb0:	10c00015 	stw	r3,0(r2)
    return -1;
 508ddb4:	00bfffc4 	movi	r2,-1
 508ddb8:	00000106 	br	508ddc0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 508ddbc:	e0bff917 	ldw	r2,-28(fp)
}
 508ddc0:	e037883a 	mov	sp,fp
 508ddc4:	dfc00117 	ldw	ra,4(sp)
 508ddc8:	df000017 	ldw	fp,0(sp)
 508ddcc:	dec00204 	addi	sp,sp,8
 508ddd0:	f800283a 	ret

0508ddd4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 508ddd4:	defffa04 	addi	sp,sp,-24
 508ddd8:	df000515 	stw	fp,20(sp)
 508dddc:	df000504 	addi	fp,sp,20
 508dde0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508dde4:	0005303a 	rdctl	r2,status
 508dde8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508ddec:	e0fffc17 	ldw	r3,-16(fp)
 508ddf0:	00bfff84 	movi	r2,-2
 508ddf4:	1884703a 	and	r2,r3,r2
 508ddf8:	1001703a 	wrctl	status,r2
  
  return context;
 508ddfc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 508de00:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 508de04:	e0bfff17 	ldw	r2,-4(fp)
 508de08:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 508de0c:	e0bffd17 	ldw	r2,-12(fp)
 508de10:	10800017 	ldw	r2,0(r2)
 508de14:	e0fffd17 	ldw	r3,-12(fp)
 508de18:	18c00117 	ldw	r3,4(r3)
 508de1c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 508de20:	e0bffd17 	ldw	r2,-12(fp)
 508de24:	10800117 	ldw	r2,4(r2)
 508de28:	e0fffd17 	ldw	r3,-12(fp)
 508de2c:	18c00017 	ldw	r3,0(r3)
 508de30:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 508de34:	e0bffd17 	ldw	r2,-12(fp)
 508de38:	e0fffd17 	ldw	r3,-12(fp)
 508de3c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 508de40:	e0bffd17 	ldw	r2,-12(fp)
 508de44:	e0fffd17 	ldw	r3,-12(fp)
 508de48:	10c00015 	stw	r3,0(r2)
 508de4c:	e0bffb17 	ldw	r2,-20(fp)
 508de50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 508de54:	e0bffe17 	ldw	r2,-8(fp)
 508de58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 508de5c:	e037883a 	mov	sp,fp
 508de60:	df000017 	ldw	fp,0(sp)
 508de64:	dec00104 	addi	sp,sp,4
 508de68:	f800283a 	ret

0508de6c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 508de6c:	defffb04 	addi	sp,sp,-20
 508de70:	dfc00415 	stw	ra,16(sp)
 508de74:	df000315 	stw	fp,12(sp)
 508de78:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 508de7c:	d0a00d17 	ldw	r2,-32716(gp)
 508de80:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 508de84:	d0a6b817 	ldw	r2,-25888(gp)
 508de88:	10800044 	addi	r2,r2,1
 508de8c:	d0a6b815 	stw	r2,-25888(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 508de90:	00002e06 	br	508df4c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 508de94:	e0bffd17 	ldw	r2,-12(fp)
 508de98:	10800017 	ldw	r2,0(r2)
 508de9c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 508dea0:	e0bffd17 	ldw	r2,-12(fp)
 508dea4:	10800403 	ldbu	r2,16(r2)
 508dea8:	10803fcc 	andi	r2,r2,255
 508deac:	10000426 	beq	r2,zero,508dec0 <alt_tick+0x54>
 508deb0:	d0a6b817 	ldw	r2,-25888(gp)
 508deb4:	1000021e 	bne	r2,zero,508dec0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 508deb8:	e0bffd17 	ldw	r2,-12(fp)
 508debc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 508dec0:	e0bffd17 	ldw	r2,-12(fp)
 508dec4:	10800217 	ldw	r2,8(r2)
 508dec8:	d0e6b817 	ldw	r3,-25888(gp)
 508decc:	18801d36 	bltu	r3,r2,508df44 <alt_tick+0xd8>
 508ded0:	e0bffd17 	ldw	r2,-12(fp)
 508ded4:	10800403 	ldbu	r2,16(r2)
 508ded8:	10803fcc 	andi	r2,r2,255
 508dedc:	1000191e 	bne	r2,zero,508df44 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 508dee0:	e0bffd17 	ldw	r2,-12(fp)
 508dee4:	10c00317 	ldw	r3,12(r2)
 508dee8:	e0bffd17 	ldw	r2,-12(fp)
 508deec:	10800517 	ldw	r2,20(r2)
 508def0:	1009883a 	mov	r4,r2
 508def4:	183ee83a 	callr	r3
 508def8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 508defc:	e0bfff17 	ldw	r2,-4(fp)
 508df00:	1000031e 	bne	r2,zero,508df10 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 508df04:	e13ffd17 	ldw	r4,-12(fp)
 508df08:	508ddd40 	call	508ddd4 <alt_alarm_stop>
 508df0c:	00000d06 	br	508df44 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 508df10:	e0bffd17 	ldw	r2,-12(fp)
 508df14:	10c00217 	ldw	r3,8(r2)
 508df18:	e0bfff17 	ldw	r2,-4(fp)
 508df1c:	1887883a 	add	r3,r3,r2
 508df20:	e0bffd17 	ldw	r2,-12(fp)
 508df24:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 508df28:	e0bffd17 	ldw	r2,-12(fp)
 508df2c:	10c00217 	ldw	r3,8(r2)
 508df30:	d0a6b817 	ldw	r2,-25888(gp)
 508df34:	1880032e 	bgeu	r3,r2,508df44 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 508df38:	e0bffd17 	ldw	r2,-12(fp)
 508df3c:	00c00044 	movi	r3,1
 508df40:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 508df44:	e0bffe17 	ldw	r2,-8(fp)
 508df48:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 508df4c:	e0fffd17 	ldw	r3,-12(fp)
 508df50:	d0a00d04 	addi	r2,gp,-32716
 508df54:	18bfcf1e 	bne	r3,r2,508de94 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 508df58:	0001883a 	nop
}
 508df5c:	e037883a 	mov	sp,fp
 508df60:	dfc00117 	ldw	ra,4(sp)
 508df64:	df000017 	ldw	fp,0(sp)
 508df68:	dec00204 	addi	sp,sp,8
 508df6c:	f800283a 	ret

0508df70 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 508df70:	deffff04 	addi	sp,sp,-4
 508df74:	df000015 	stw	fp,0(sp)
 508df78:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 508df7c:	000170fa 	wrctl	ienable,zero
}
 508df80:	e037883a 	mov	sp,fp
 508df84:	df000017 	ldw	fp,0(sp)
 508df88:	dec00104 	addi	sp,sp,4
 508df8c:	f800283a 	ret

0508df90 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 508df90:	defffa04 	addi	sp,sp,-24
 508df94:	dfc00515 	stw	ra,20(sp)
 508df98:	df000415 	stw	fp,16(sp)
 508df9c:	df000404 	addi	fp,sp,16
 508dfa0:	e13ffe15 	stw	r4,-8(fp)
 508dfa4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 508dfa8:	e0bfff17 	ldw	r2,-4(fp)
 508dfac:	10800017 	ldw	r2,0(r2)
 508dfb0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 508dfb4:	e13ffe17 	ldw	r4,-8(fp)
 508dfb8:	508299c0 	call	508299c <strlen>
 508dfbc:	10800044 	addi	r2,r2,1
 508dfc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 508dfc4:	00000d06 	br	508dffc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 508dfc8:	e0bffc17 	ldw	r2,-16(fp)
 508dfcc:	10c00217 	ldw	r3,8(r2)
 508dfd0:	e0bffd17 	ldw	r2,-12(fp)
 508dfd4:	1809883a 	mov	r4,r3
 508dfd8:	e17ffe17 	ldw	r5,-8(fp)
 508dfdc:	100d883a 	mov	r6,r2
 508dfe0:	508e2c00 	call	508e2c0 <memcmp>
 508dfe4:	1000021e 	bne	r2,zero,508dff0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 508dfe8:	e0bffc17 	ldw	r2,-16(fp)
 508dfec:	00000706 	br	508e00c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 508dff0:	e0bffc17 	ldw	r2,-16(fp)
 508dff4:	10800017 	ldw	r2,0(r2)
 508dff8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 508dffc:	e0fffc17 	ldw	r3,-16(fp)
 508e000:	e0bfff17 	ldw	r2,-4(fp)
 508e004:	18bff01e 	bne	r3,r2,508dfc8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 508e008:	0005883a 	mov	r2,zero
}
 508e00c:	e037883a 	mov	sp,fp
 508e010:	dfc00117 	ldw	ra,4(sp)
 508e014:	df000017 	ldw	fp,0(sp)
 508e018:	dec00204 	addi	sp,sp,8
 508e01c:	f800283a 	ret

0508e020 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 508e020:	defffb04 	addi	sp,sp,-20
 508e024:	dfc00415 	stw	ra,16(sp)
 508e028:	df000315 	stw	fp,12(sp)
 508e02c:	df000304 	addi	fp,sp,12
 508e030:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 508e034:	00814274 	movhi	r2,1289
 508e038:	10839004 	addi	r2,r2,3648
 508e03c:	10800017 	ldw	r2,0(r2)
 508e040:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 508e044:	00003106 	br	508e10c <alt_find_file+0xec>
  {
    len = strlen(next->name);
 508e048:	e0bffd17 	ldw	r2,-12(fp)
 508e04c:	10800217 	ldw	r2,8(r2)
 508e050:	1009883a 	mov	r4,r2
 508e054:	508299c0 	call	508299c <strlen>
 508e058:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 508e05c:	e0bffd17 	ldw	r2,-12(fp)
 508e060:	10c00217 	ldw	r3,8(r2)
 508e064:	e0bffe17 	ldw	r2,-8(fp)
 508e068:	10bfffc4 	addi	r2,r2,-1
 508e06c:	1885883a 	add	r2,r3,r2
 508e070:	10800003 	ldbu	r2,0(r2)
 508e074:	10803fcc 	andi	r2,r2,255
 508e078:	1080201c 	xori	r2,r2,128
 508e07c:	10bfe004 	addi	r2,r2,-128
 508e080:	10800bd8 	cmpnei	r2,r2,47
 508e084:	1000031e 	bne	r2,zero,508e094 <alt_find_file+0x74>
    {
      len -= 1;
 508e088:	e0bffe17 	ldw	r2,-8(fp)
 508e08c:	10bfffc4 	addi	r2,r2,-1
 508e090:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 508e094:	e0bffe17 	ldw	r2,-8(fp)
 508e098:	e0ffff17 	ldw	r3,-4(fp)
 508e09c:	1885883a 	add	r2,r3,r2
 508e0a0:	10800003 	ldbu	r2,0(r2)
 508e0a4:	10803fcc 	andi	r2,r2,255
 508e0a8:	1080201c 	xori	r2,r2,128
 508e0ac:	10bfe004 	addi	r2,r2,-128
 508e0b0:	10800be0 	cmpeqi	r2,r2,47
 508e0b4:	1000081e 	bne	r2,zero,508e0d8 <alt_find_file+0xb8>
 508e0b8:	e0bffe17 	ldw	r2,-8(fp)
 508e0bc:	e0ffff17 	ldw	r3,-4(fp)
 508e0c0:	1885883a 	add	r2,r3,r2
 508e0c4:	10800003 	ldbu	r2,0(r2)
 508e0c8:	10803fcc 	andi	r2,r2,255
 508e0cc:	1080201c 	xori	r2,r2,128
 508e0d0:	10bfe004 	addi	r2,r2,-128
 508e0d4:	10000a1e 	bne	r2,zero,508e100 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 508e0d8:	e0bffd17 	ldw	r2,-12(fp)
 508e0dc:	10c00217 	ldw	r3,8(r2)
 508e0e0:	e0bffe17 	ldw	r2,-8(fp)
 508e0e4:	1809883a 	mov	r4,r3
 508e0e8:	e17fff17 	ldw	r5,-4(fp)
 508e0ec:	100d883a 	mov	r6,r2
 508e0f0:	508e2c00 	call	508e2c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 508e0f4:	1000021e 	bne	r2,zero,508e100 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 508e0f8:	e0bffd17 	ldw	r2,-12(fp)
 508e0fc:	00000806 	br	508e120 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 508e100:	e0bffd17 	ldw	r2,-12(fp)
 508e104:	10800017 	ldw	r2,0(r2)
 508e108:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 508e10c:	e0fffd17 	ldw	r3,-12(fp)
 508e110:	00814274 	movhi	r2,1289
 508e114:	10839004 	addi	r2,r2,3648
 508e118:	18bfcb1e 	bne	r3,r2,508e048 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 508e11c:	0005883a 	mov	r2,zero
}
 508e120:	e037883a 	mov	sp,fp
 508e124:	dfc00117 	ldw	ra,4(sp)
 508e128:	df000017 	ldw	fp,0(sp)
 508e12c:	dec00204 	addi	sp,sp,8
 508e130:	f800283a 	ret

0508e134 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 508e134:	defffc04 	addi	sp,sp,-16
 508e138:	df000315 	stw	fp,12(sp)
 508e13c:	df000304 	addi	fp,sp,12
 508e140:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 508e144:	00bffa04 	movi	r2,-24
 508e148:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 508e14c:	e03ffd15 	stw	zero,-12(fp)
 508e150:	00001d06 	br	508e1c8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 508e154:	00c14274 	movhi	r3,1289
 508e158:	18ff1304 	addi	r3,r3,-948
 508e15c:	e0bffd17 	ldw	r2,-12(fp)
 508e160:	10800324 	muli	r2,r2,12
 508e164:	1885883a 	add	r2,r3,r2
 508e168:	10800017 	ldw	r2,0(r2)
 508e16c:	1000131e 	bne	r2,zero,508e1bc <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 508e170:	00c14274 	movhi	r3,1289
 508e174:	18ff1304 	addi	r3,r3,-948
 508e178:	e0bffd17 	ldw	r2,-12(fp)
 508e17c:	10800324 	muli	r2,r2,12
 508e180:	1885883a 	add	r2,r3,r2
 508e184:	e0ffff17 	ldw	r3,-4(fp)
 508e188:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 508e18c:	00814274 	movhi	r2,1289
 508e190:	10839404 	addi	r2,r2,3664
 508e194:	10c00017 	ldw	r3,0(r2)
 508e198:	e0bffd17 	ldw	r2,-12(fp)
 508e19c:	1880040e 	bge	r3,r2,508e1b0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 508e1a0:	00814274 	movhi	r2,1289
 508e1a4:	10839404 	addi	r2,r2,3664
 508e1a8:	e0fffd17 	ldw	r3,-12(fp)
 508e1ac:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 508e1b0:	e0bffd17 	ldw	r2,-12(fp)
 508e1b4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 508e1b8:	00000606 	br	508e1d4 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 508e1bc:	e0bffd17 	ldw	r2,-12(fp)
 508e1c0:	10800044 	addi	r2,r2,1
 508e1c4:	e0bffd15 	stw	r2,-12(fp)
 508e1c8:	e0bffd17 	ldw	r2,-12(fp)
 508e1cc:	10800810 	cmplti	r2,r2,32
 508e1d0:	103fe01e 	bne	r2,zero,508e154 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 508e1d4:	e0bffe17 	ldw	r2,-8(fp)
}
 508e1d8:	e037883a 	mov	sp,fp
 508e1dc:	df000017 	ldw	fp,0(sp)
 508e1e0:	dec00104 	addi	sp,sp,4
 508e1e4:	f800283a 	ret

0508e1e8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 508e1e8:	defffb04 	addi	sp,sp,-20
 508e1ec:	df000415 	stw	fp,16(sp)
 508e1f0:	df000404 	addi	fp,sp,16
 508e1f4:	e13ffe15 	stw	r4,-8(fp)
 508e1f8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 508e1fc:	e0bfff17 	ldw	r2,-4(fp)
 508e200:	10840070 	cmpltui	r2,r2,4097
 508e204:	1000021e 	bne	r2,zero,508e210 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 508e208:	00840004 	movi	r2,4096
 508e20c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 508e210:	e0fffe17 	ldw	r3,-8(fp)
 508e214:	e0bfff17 	ldw	r2,-4(fp)
 508e218:	1885883a 	add	r2,r3,r2
 508e21c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 508e220:	e0bffe17 	ldw	r2,-8(fp)
 508e224:	e0bffc15 	stw	r2,-16(fp)
 508e228:	00000506 	br	508e240 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 508e22c:	e0bffc17 	ldw	r2,-16(fp)
 508e230:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 508e234:	e0bffc17 	ldw	r2,-16(fp)
 508e238:	10800804 	addi	r2,r2,32
 508e23c:	e0bffc15 	stw	r2,-16(fp)
 508e240:	e0fffc17 	ldw	r3,-16(fp)
 508e244:	e0bffd17 	ldw	r2,-12(fp)
 508e248:	18bff836 	bltu	r3,r2,508e22c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 508e24c:	e0bffe17 	ldw	r2,-8(fp)
 508e250:	108007cc 	andi	r2,r2,31
 508e254:	10000226 	beq	r2,zero,508e260 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 508e258:	e0bffc17 	ldw	r2,-16(fp)
 508e25c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 508e260:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 508e264:	e037883a 	mov	sp,fp
 508e268:	df000017 	ldw	fp,0(sp)
 508e26c:	dec00104 	addi	sp,sp,4
 508e270:	f800283a 	ret

0508e274 <atexit>:
 508e274:	200b883a 	mov	r5,r4
 508e278:	000d883a 	mov	r6,zero
 508e27c:	0009883a 	mov	r4,zero
 508e280:	000f883a 	mov	r7,zero
 508e284:	508e33c1 	jmpi	508e33c <__register_exitproc>

0508e288 <exit>:
 508e288:	defffe04 	addi	sp,sp,-8
 508e28c:	000b883a 	mov	r5,zero
 508e290:	dc000015 	stw	r16,0(sp)
 508e294:	dfc00115 	stw	ra,4(sp)
 508e298:	2021883a 	mov	r16,r4
 508e29c:	508e46c0 	call	508e46c <__call_exitprocs>
 508e2a0:	00814274 	movhi	r2,1289
 508e2a4:	10838b04 	addi	r2,r2,3628
 508e2a8:	11000017 	ldw	r4,0(r2)
 508e2ac:	20800f17 	ldw	r2,60(r4)
 508e2b0:	10000126 	beq	r2,zero,508e2b8 <exit+0x30>
 508e2b4:	103ee83a 	callr	r2
 508e2b8:	8009883a 	mov	r4,r16
 508e2bc:	508e60c0 	call	508e60c <_exit>

0508e2c0 <memcmp>:
 508e2c0:	01c000c4 	movi	r7,3
 508e2c4:	3980192e 	bgeu	r7,r6,508e32c <memcmp+0x6c>
 508e2c8:	2904b03a 	or	r2,r5,r4
 508e2cc:	11c4703a 	and	r2,r2,r7
 508e2d0:	10000f26 	beq	r2,zero,508e310 <memcmp+0x50>
 508e2d4:	20c00003 	ldbu	r3,0(r4)
 508e2d8:	28800003 	ldbu	r2,0(r5)
 508e2dc:	1880151e 	bne	r3,r2,508e334 <memcmp+0x74>
 508e2e0:	31bfff84 	addi	r6,r6,-2
 508e2e4:	01ffffc4 	movi	r7,-1
 508e2e8:	00000406 	br	508e2fc <memcmp+0x3c>
 508e2ec:	20c00003 	ldbu	r3,0(r4)
 508e2f0:	28800003 	ldbu	r2,0(r5)
 508e2f4:	31bfffc4 	addi	r6,r6,-1
 508e2f8:	18800e1e 	bne	r3,r2,508e334 <memcmp+0x74>
 508e2fc:	21000044 	addi	r4,r4,1
 508e300:	29400044 	addi	r5,r5,1
 508e304:	31fff91e 	bne	r6,r7,508e2ec <memcmp+0x2c>
 508e308:	0005883a 	mov	r2,zero
 508e30c:	f800283a 	ret
 508e310:	20c00017 	ldw	r3,0(r4)
 508e314:	28800017 	ldw	r2,0(r5)
 508e318:	1880041e 	bne	r3,r2,508e32c <memcmp+0x6c>
 508e31c:	31bfff04 	addi	r6,r6,-4
 508e320:	21000104 	addi	r4,r4,4
 508e324:	29400104 	addi	r5,r5,4
 508e328:	39bff936 	bltu	r7,r6,508e310 <memcmp+0x50>
 508e32c:	303fe91e 	bne	r6,zero,508e2d4 <memcmp+0x14>
 508e330:	003ff506 	br	508e308 <memcmp+0x48>
 508e334:	1885c83a 	sub	r2,r3,r2
 508e338:	f800283a 	ret

0508e33c <__register_exitproc>:
 508e33c:	defffa04 	addi	sp,sp,-24
 508e340:	00814274 	movhi	r2,1289
 508e344:	10838b04 	addi	r2,r2,3628
 508e348:	dc000315 	stw	r16,12(sp)
 508e34c:	14000017 	ldw	r16,0(r2)
 508e350:	dc400415 	stw	r17,16(sp)
 508e354:	dfc00515 	stw	ra,20(sp)
 508e358:	80805217 	ldw	r2,328(r16)
 508e35c:	2023883a 	mov	r17,r4
 508e360:	10003e26 	beq	r2,zero,508e45c <__register_exitproc+0x120>
 508e364:	10c00117 	ldw	r3,4(r2)
 508e368:	020007c4 	movi	r8,31
 508e36c:	40c0180e 	bge	r8,r3,508e3d0 <__register_exitproc+0x94>
 508e370:	00800034 	movhi	r2,0
 508e374:	10800004 	addi	r2,r2,0
 508e378:	1000061e 	bne	r2,zero,508e394 <__register_exitproc+0x58>
 508e37c:	00bfffc4 	movi	r2,-1
 508e380:	dfc00517 	ldw	ra,20(sp)
 508e384:	dc400417 	ldw	r17,16(sp)
 508e388:	dc000317 	ldw	r16,12(sp)
 508e38c:	dec00604 	addi	sp,sp,24
 508e390:	f800283a 	ret
 508e394:	01006404 	movi	r4,400
 508e398:	d9400015 	stw	r5,0(sp)
 508e39c:	d9800115 	stw	r6,4(sp)
 508e3a0:	d9c00215 	stw	r7,8(sp)
 508e3a4:	00000000 	call	0 <__alt_mem_sdram>
 508e3a8:	d9400017 	ldw	r5,0(sp)
 508e3ac:	d9800117 	ldw	r6,4(sp)
 508e3b0:	d9c00217 	ldw	r7,8(sp)
 508e3b4:	103ff126 	beq	r2,zero,508e37c <__register_exitproc+0x40>
 508e3b8:	80c05217 	ldw	r3,328(r16)
 508e3bc:	10000115 	stw	zero,4(r2)
 508e3c0:	10c00015 	stw	r3,0(r2)
 508e3c4:	80805215 	stw	r2,328(r16)
 508e3c8:	10006215 	stw	zero,392(r2)
 508e3cc:	10006315 	stw	zero,396(r2)
 508e3d0:	10c00117 	ldw	r3,4(r2)
 508e3d4:	88000d1e 	bne	r17,zero,508e40c <__register_exitproc+0xd0>
 508e3d8:	19000084 	addi	r4,r3,2
 508e3dc:	2109883a 	add	r4,r4,r4
 508e3e0:	18c00044 	addi	r3,r3,1
 508e3e4:	2109883a 	add	r4,r4,r4
 508e3e8:	1109883a 	add	r4,r2,r4
 508e3ec:	10c00115 	stw	r3,4(r2)
 508e3f0:	0005883a 	mov	r2,zero
 508e3f4:	21400015 	stw	r5,0(r4)
 508e3f8:	dfc00517 	ldw	ra,20(sp)
 508e3fc:	dc400417 	ldw	r17,16(sp)
 508e400:	dc000317 	ldw	r16,12(sp)
 508e404:	dec00604 	addi	sp,sp,24
 508e408:	f800283a 	ret
 508e40c:	02400044 	movi	r9,1
 508e410:	12806217 	ldw	r10,392(r2)
 508e414:	48d2983a 	sll	r9,r9,r3
 508e418:	19000804 	addi	r4,r3,32
 508e41c:	18d1883a 	add	r8,r3,r3
 508e420:	2109883a 	add	r4,r4,r4
 508e424:	4211883a 	add	r8,r8,r8
 508e428:	2109883a 	add	r4,r4,r4
 508e42c:	1109883a 	add	r4,r2,r4
 508e430:	1211883a 	add	r8,r2,r8
 508e434:	5254b03a 	or	r10,r10,r9
 508e438:	21c02215 	stw	r7,136(r4)
 508e43c:	41802215 	stw	r6,136(r8)
 508e440:	12806215 	stw	r10,392(r2)
 508e444:	01000084 	movi	r4,2
 508e448:	893fe31e 	bne	r17,r4,508e3d8 <__register_exitproc+0x9c>
 508e44c:	11006317 	ldw	r4,396(r2)
 508e450:	2252b03a 	or	r9,r4,r9
 508e454:	12406315 	stw	r9,396(r2)
 508e458:	003fdf06 	br	508e3d8 <__register_exitproc+0x9c>
 508e45c:	00814274 	movhi	r2,1289
 508e460:	108a9804 	addi	r2,r2,10848
 508e464:	80805215 	stw	r2,328(r16)
 508e468:	003fbe06 	br	508e364 <__register_exitproc+0x28>

0508e46c <__call_exitprocs>:
 508e46c:	00814274 	movhi	r2,1289
 508e470:	10838b04 	addi	r2,r2,3628
 508e474:	10800017 	ldw	r2,0(r2)
 508e478:	defff304 	addi	sp,sp,-52
 508e47c:	df000b15 	stw	fp,44(sp)
 508e480:	d8800015 	stw	r2,0(sp)
 508e484:	10805204 	addi	r2,r2,328
 508e488:	dd400815 	stw	r21,32(sp)
 508e48c:	dfc00c15 	stw	ra,48(sp)
 508e490:	ddc00a15 	stw	r23,40(sp)
 508e494:	dd800915 	stw	r22,36(sp)
 508e498:	dd000715 	stw	r20,28(sp)
 508e49c:	dcc00615 	stw	r19,24(sp)
 508e4a0:	dc800515 	stw	r18,20(sp)
 508e4a4:	dc400415 	stw	r17,16(sp)
 508e4a8:	dc000315 	stw	r16,12(sp)
 508e4ac:	d9000115 	stw	r4,4(sp)
 508e4b0:	2839883a 	mov	fp,r5
 508e4b4:	d8800215 	stw	r2,8(sp)
 508e4b8:	057fffc4 	movi	r21,-1
 508e4bc:	d8800017 	ldw	r2,0(sp)
 508e4c0:	ddc00217 	ldw	r23,8(sp)
 508e4c4:	14805217 	ldw	r18,328(r2)
 508e4c8:	90001726 	beq	r18,zero,508e528 <__call_exitprocs+0xbc>
 508e4cc:	94400117 	ldw	r17,4(r18)
 508e4d0:	8c3fffc4 	addi	r16,r17,-1
 508e4d4:	80001116 	blt	r16,zero,508e51c <__call_exitprocs+0xb0>
 508e4d8:	8c400044 	addi	r17,r17,1
 508e4dc:	8427883a 	add	r19,r16,r16
 508e4e0:	8c63883a 	add	r17,r17,r17
 508e4e4:	95802204 	addi	r22,r18,136
 508e4e8:	9ce7883a 	add	r19,r19,r19
 508e4ec:	8c63883a 	add	r17,r17,r17
 508e4f0:	b4e7883a 	add	r19,r22,r19
 508e4f4:	9463883a 	add	r17,r18,r17
 508e4f8:	e0001726 	beq	fp,zero,508e558 <__call_exitprocs+0xec>
 508e4fc:	8c87c83a 	sub	r3,r17,r18
 508e500:	b0c7883a 	add	r3,r22,r3
 508e504:	18c01e17 	ldw	r3,120(r3)
 508e508:	1f001326 	beq	r3,fp,508e558 <__call_exitprocs+0xec>
 508e50c:	843fffc4 	addi	r16,r16,-1
 508e510:	9cffff04 	addi	r19,r19,-4
 508e514:	8c7fff04 	addi	r17,r17,-4
 508e518:	857ff71e 	bne	r16,r21,508e4f8 <__call_exitprocs+0x8c>
 508e51c:	00800034 	movhi	r2,0
 508e520:	10800004 	addi	r2,r2,0
 508e524:	10002a1e 	bne	r2,zero,508e5d0 <__call_exitprocs+0x164>
 508e528:	dfc00c17 	ldw	ra,48(sp)
 508e52c:	df000b17 	ldw	fp,44(sp)
 508e530:	ddc00a17 	ldw	r23,40(sp)
 508e534:	dd800917 	ldw	r22,36(sp)
 508e538:	dd400817 	ldw	r21,32(sp)
 508e53c:	dd000717 	ldw	r20,28(sp)
 508e540:	dcc00617 	ldw	r19,24(sp)
 508e544:	dc800517 	ldw	r18,20(sp)
 508e548:	dc400417 	ldw	r17,16(sp)
 508e54c:	dc000317 	ldw	r16,12(sp)
 508e550:	dec00d04 	addi	sp,sp,52
 508e554:	f800283a 	ret
 508e558:	91000117 	ldw	r4,4(r18)
 508e55c:	88c00017 	ldw	r3,0(r17)
 508e560:	213fffc4 	addi	r4,r4,-1
 508e564:	24001526 	beq	r4,r16,508e5bc <__call_exitprocs+0x150>
 508e568:	88000015 	stw	zero,0(r17)
 508e56c:	183fe726 	beq	r3,zero,508e50c <__call_exitprocs+0xa0>
 508e570:	00800044 	movi	r2,1
 508e574:	1408983a 	sll	r4,r2,r16
 508e578:	91406217 	ldw	r5,392(r18)
 508e57c:	95000117 	ldw	r20,4(r18)
 508e580:	214a703a 	and	r5,r4,r5
 508e584:	28000b26 	beq	r5,zero,508e5b4 <__call_exitprocs+0x148>
 508e588:	91406317 	ldw	r5,396(r18)
 508e58c:	2148703a 	and	r4,r4,r5
 508e590:	20000c1e 	bne	r4,zero,508e5c4 <__call_exitprocs+0x158>
 508e594:	99400017 	ldw	r5,0(r19)
 508e598:	d9000117 	ldw	r4,4(sp)
 508e59c:	183ee83a 	callr	r3
 508e5a0:	90c00117 	ldw	r3,4(r18)
 508e5a4:	1d3fc51e 	bne	r3,r20,508e4bc <__call_exitprocs+0x50>
 508e5a8:	b8c00017 	ldw	r3,0(r23)
 508e5ac:	1cbfd726 	beq	r3,r18,508e50c <__call_exitprocs+0xa0>
 508e5b0:	003fc206 	br	508e4bc <__call_exitprocs+0x50>
 508e5b4:	183ee83a 	callr	r3
 508e5b8:	003ff906 	br	508e5a0 <__call_exitprocs+0x134>
 508e5bc:	94000115 	stw	r16,4(r18)
 508e5c0:	003fea06 	br	508e56c <__call_exitprocs+0x100>
 508e5c4:	99000017 	ldw	r4,0(r19)
 508e5c8:	183ee83a 	callr	r3
 508e5cc:	003ff406 	br	508e5a0 <__call_exitprocs+0x134>
 508e5d0:	90c00117 	ldw	r3,4(r18)
 508e5d4:	1800071e 	bne	r3,zero,508e5f4 <__call_exitprocs+0x188>
 508e5d8:	90c00017 	ldw	r3,0(r18)
 508e5dc:	18000926 	beq	r3,zero,508e604 <__call_exitprocs+0x198>
 508e5e0:	9009883a 	mov	r4,r18
 508e5e4:	b8c00015 	stw	r3,0(r23)
 508e5e8:	00000000 	call	0 <__alt_mem_sdram>
 508e5ec:	bc800017 	ldw	r18,0(r23)
 508e5f0:	003fb506 	br	508e4c8 <__call_exitprocs+0x5c>
 508e5f4:	90c00017 	ldw	r3,0(r18)
 508e5f8:	902f883a 	mov	r23,r18
 508e5fc:	1825883a 	mov	r18,r3
 508e600:	003fb106 	br	508e4c8 <__call_exitprocs+0x5c>
 508e604:	0007883a 	mov	r3,zero
 508e608:	003ffb06 	br	508e5f8 <__call_exitprocs+0x18c>

0508e60c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 508e60c:	defffc04 	addi	sp,sp,-16
 508e610:	df000315 	stw	fp,12(sp)
 508e614:	df000304 	addi	fp,sp,12
 508e618:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 508e61c:	0001883a 	nop
 508e620:	e0bfff17 	ldw	r2,-4(fp)
 508e624:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 508e628:	e0bffd17 	ldw	r2,-12(fp)
 508e62c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 508e630:	e0bffe17 	ldw	r2,-8(fp)
 508e634:	10000226 	beq	r2,zero,508e640 <_exit+0x34>
    ALT_SIM_FAIL();
 508e638:	002af070 	cmpltui	zero,zero,43969
 508e63c:	00000106 	br	508e644 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 508e640:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 508e644:	003fff06 	br	508e644 <_exit+0x38>
