
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module FPGA_test(

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);

//=======================================================
//  REG/WIRE declarations
//=======================================================
wire					[15:0]		Read_DATA1;
wire	       	[15:0]		Read_DATA2;

wire					[11:0]		mCCD_DATA;
wire										mCCD_DVAL;
wire										mCCD_DVAL_d;
wire	       	[15:0]		X_Cont;
wire	       	[15:0]		Y_Cont;
wire	       	[9:0]			X_ADDR;
wire	       	[31:0]		Frame_Cont;
wire										DLY_RST_0;
wire										DLY_RST_1;
wire										DLY_RST_2;
wire										DLY_RST_3;
wire										DLY_RST_4;
wire										Read;
reg		    		[11:0]		rCCD_DATA;
reg											rCCD_LVAL;
reg											rCCD_FVAL;
wire	       	[11:0]		sCCD_R;
wire	       	[11:0]		sCCD_G;
wire	       	[11:0]		sCCD_B;
wire										sCCD_DVAL;

wire										sdram_ctrl_clk;
wire	       	[9:0]			oVGA_R;   				// VGA Red[9:0]
wire	       	[9:0]			oVGA_G;	 					// VGA Green[9:0]
wire	       	[9:0]			oVGA_B;   				// VGA Blue[9:0]

//power on start
wire             				auto_start;

// frame buffer
logic fb_busy;
logic fb_wfb, fb_dfb;
logic [15:0] fb_px;
logic [7:0] fb_red, fb_green, fb_blue;


logic [2:0] sop_a, sop_b, sop_c;
logic [15:0] addr;


// TODO
logic [7:0] timer;


cpu processor(
	.clk(CLOCK_50),
	.rst_n(rst_n),
	.gpio(GPIO),
	.vga_write(fb_wfb),
	.vga_display(fb_dfb),
	.vga_pixnum(fb_px),
	.vga_r(fb_red),
	.vga_g(fb_green),
	.vga_b(fb_blue),
	
	.addr(addr),
	.sprite_op_a(sop_a),
	.sprite_op_b(sop_b),
	.sprite_op_c(sop_c),
	
	.the_time(timer),
	.border_en(SW[0])
);


hexdecode f(
	.code(timer[7:4]),
	.seven(HEX5)
);

hexdecode e(
	.code(timer[3:0]),
	.seven(HEX4)
);

assign HEX3 = 7'b1111111;

hexdecode c(
	.code(fb_red[7:4]),
	.seven(HEX2)
);

hexdecode b(
	.code(fb_green[7:4]),
	.seven(HEX1)
);

hexdecode a(
	.code(fb_blue[7:4]),
	.seven(HEX0)
);


assign rst_n = KEY[0];
assign rst = ~KEY[0];

//=======================================================
//  Structural coding
//=======================================================
// D5M
assign	D5M_TRIGGER	=	1'b1;
assign	D5M_RESET_N	=	DLY_RST_1;
assign  VGA_CTRL_CLK = VGA_CLK;

//fetch the high 8 bits
assign  VGA_R = oVGA_R[9:2];
assign  VGA_G = oVGA_G[9:2];
assign  VGA_B = oVGA_B[9:2];

//auto start when power on
assign auto_start = ((rst_n)&&(DLY_RST_3)&&(!DLY_RST_4))? 1'b1:1'b0;

//Reset module
Reset_Delay			u2	(
							.iCLK(CLOCK_50),
							.iRST(rst_n),
							.oRST_0(DLY_RST_0),
							.oRST_1(DLY_RST_1),
							.oRST_2(DLY_RST_2),
							.oRST_3(DLY_RST_3),
							.oRST_4(DLY_RST_4)
						);

sdram_pll 			u6	(
							.refclk(CLOCK_50),
							.rst(1'b0),
							.outclk_0(sdram_ctrl_clk),
							.outclk_1(DRAM_CLK),
							.outclk_2(D5M_XCLKIN),    //25M
							.outclk_3(VGA_CLK)        //25M
						);

logic [12:0] vga_x, vga_y;
logic [1:0]  state, nxt_state;
logic write;
logic [9:0] count;
logic draw;

always_ff @(posedge CLOCK_50, negedge rst_n)
	if(!rst_n)
		draw <= 0;
	else if(fb_dfb)
		draw <= 1;
	else if(state == 2'h1)
		draw <= 0;


assign nxt_state 	= (state == 2'h0) & (draw | ~KEY[1]) & (read_count == 16'hFFFF)? 2'h1
						: (state == 2'h0) & fb_wfb & (read_count == 16'hFFFF)? 2'h3
						: (state == 2'h1) & (write_count == 16'hFFFF)? 2'h2
						: (state == 2'h2) & (vga_x == '0) & (vga_y == '0) ? 2'h0
						: (state == 2'h3) & (write_count == 16'hFFFF)? 2'h2
						: state;

always @ (posedge CLOCK_50, negedge rst_n)
	if(!rst_n)
		state <= 0;
	else
		state <= nxt_state;

logic [15:0] write_data, currentw1_addr, currentr1_addr;
logic [7:0] currentw1_x, currentw1_y;

assign currentw1_x = write_count[7:0];
assign currentw1_y = write_count[15:8];
logic [15:0] write_count, read_count;

//count writes
always @(posedge CLOCK_50) begin
	write_count <= (nxt_state != state) & (nxt_state == 2'h1)  ? 16'h0
					: (nxt_state != state) & (nxt_state != 2'h1)? 16'h0
					: (write_count >= 16'hFFFF) ? 16'h0
					: write_count + 16'h1;
end

//count reads
always @(posedge VGA_CTRL_CLK) begin
	read_count <= (nxt_state != state) 	? '0
					: (read_count >= (256*256)) | ((vga_x == '0) & (vga_y == '0))? '0
					: Read ? read_count + 16'h1
					: read_count;
end

logic [15:0] data_to_write, pixel_number;

assign data_to_write = {1'b0, 5'hFF, 5'hFF, 5'h00};
assign pixel_number = fb_px;

logic [7:0] bram_r_out, bram_g_out, bram_b_out;

logic [15:0] pixnum;

assign pixnum = fb_px;
assign write_data[15] = 1'h0;

frame_buffer bram_red(
	.clock(CLOCK_50),
	.data(fb_red),
	.rdaddress({currentw1_y, currentw1_x}),
	.wraddress(pixnum),
	.wren(fb_wfb),
	.q(bram_r_out)
);
	
frame_buffer bram_green(
	.clock(CLOCK_50),
	.data(fb_green),
	.rdaddress({currentw1_y, currentw1_x}),
	.wraddress(pixnum),
	.wren(fb_wfb),
	.q(bram_g_out)
);
	
frame_buffer bram_blue(
	.clock(CLOCK_50),
	.data(fb_blue),
	.rdaddress({currentw1_y, currentw1_x}),
	.wraddress(pixnum),
	.wren(fb_wfb),
	.q(bram_b_out)
);

reg prev_state;

always_ff @(posedge CLOCK_50) begin
	prev_state <= state == 2'h1;
end

//SDRam Read and Write as Frame Buffer
Sdram_Control	   u7	(	// HOST Side
							.RESET_N(rst_n),
							.CLK(sdram_ctrl_clk),
							.currentw1_addr(currentw1_addr),
							.currentr1_addr(currentr1_addr),

							//used for copy
							// FIFO Write Side 1
							.WR1_DATA({1'b0, bram_r_out[7:3], bram_g_out[7:3], bram_b_out[7:3]}),
							//.WR1_DATA({1'b0,RGB_R[11:7],RGB_G[11:7],RGB_B[11:7]}),
							//.WR1(RGB_DVAL),
							.WR1(prev_state),
							.WR1_ADDR(0),
							.WR1_MAX_ADDR(256*256),
							.WR1_LENGTH(8'h40),
							.WR1_LOAD(!DLY_RST_0),
							.WR1_CLK(CLOCK_50),

							//used for write
							// FIFO Write Side 2
							.WR2_DATA(data_to_write),
							//.WR1_DATA({1'b0,RGB_R[11:7],RGB_G[11:7],RGB_B[11:7]}),
							//.WR1(RGB_DVAL),
							.WR2( (state == 2'h3) ),
							.WR2_ADDR(32'h100000 + pixel_number),
							.WR2_MAX_ADDR(32'h100000 + pixel_number),
							.WR2_LENGTH(8'h01),
							.WR2_LOAD(!DLY_RST_0),
							.WR2_CLK(CLOCK_50),

							// FIFO Read Side 1
							.RD1_DATA(Read_DATA1),
				        	.RD1( Read & (state == 2'h0) ),
				        	.RD1_ADDR(0),
							.RD1_MAX_ADDR(256*256),
							.RD1_LENGTH(8'h40),
							.RD1_LOAD(!DLY_RST_0),
							.RD1_CLK(~VGA_CTRL_CLK),


							//used for copying
							// FIFO Read Side 2
							.RD2_DATA(write_data1),
							.RD2((state == 2'h1)),
							.RD2_ADDR(32'h100000),
							.RD2_MAX_ADDR(32'h100000 + 256*256),
							.RD2_LENGTH(8'h40),
							.RD2_LOAD(!DLY_RST_0),
							.RD2_CLK(~CLOCK_50),

							// SDRAM Side
							.SA(DRAM_ADDR),
							.BA(DRAM_BA),
							.CS_N(DRAM_CS_N),
							.CKE(DRAM_CKE),
							.RAS_N(DRAM_RAS_N),
							.CAS_N(DRAM_CAS_N),
							.WE_N(DRAM_WE_N),
							.DQ(DRAM_DQ),
							.DQM({DRAM_UDQM,DRAM_LDQM})
						);

//VGA DISPLAY
VGA_Controller	  	u1	(	// Host Side
							.oRequest(Read),
							.ired({Read_DATA1[14:10], 5'h0}),
							.igreen({Read_DATA1[9:5], 5'h0}),
							.iblue({Read_DATA1[4:0], 5'h0}),
							.vga_x(vga_x),
							.vga_y(vga_y),

							// VGA Side
							.oVGA_R(oVGA_R),
							.oVGA_G(oVGA_G),
							.oVGA_B(oVGA_B),
							.oVGA_H_SYNC(VGA_HS),
							.oVGA_V_SYNC(VGA_VS),
							.oVGA_SYNC(VGA_SYNC_N),
							.oVGA_BLANK(VGA_BLANK_N),
							// Control Signal
							.iCLK(VGA_CTRL_CLK),
							.iRST_N(DLY_RST_2),
							.iZOOM_MODE_SW(0)
						);

endmodule